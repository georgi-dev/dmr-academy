{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/fullcalendar/build/vendors/fullcalendar/fullcalendar.js"],"names":[],"mappings":"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","file":"fullcalendar.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * FullCalendar v3.1.0\n * Docs & License: http://fullcalendar.io/\n * (c) 2016 Adam Shaw\n */\n\n(function(factory) {\n\tfactory(jQuery, moment);\n})(function($, moment) {\n\n;;\n\nvar FC = $.fullCalendar = {\n\tversion: \"3.1.0\",\n\tinternalApiVersion: 7\n};\nvar fcViews = FC.views = {};\n\n\n$.fn.fullCalendar = function(options) {\n\tvar args = Array.prototype.slice.call(arguments, 1); // for a possible method call\n\tvar res = this; // what this function will return (this jQuery object by default)\n\n\tthis.each(function(i, _element) { // loop each DOM element involved\n\t\tvar element = $(_element);\n\t\tvar calendar = element.data('fullCalendar'); // get the existing calendar object (if any)\n\t\tvar singleRes; // the returned value of this single method call\n\n\t\t// a method call\n\t\tif (typeof options === 'string') {\n\t\t\tif (calendar && $.isFunction(calendar[options])) {\n\t\t\t\tsingleRes = calendar[options].apply(calendar, args);\n\t\t\t\tif (!i) {\n\t\t\t\t\tres = singleRes; // record the first method call result\n\t\t\t\t}\n\t\t\t\tif (options === 'destroy') { // for the destroy method, must remove Calendar object data\n\t\t\t\t\telement.removeData('fullCalendar');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// a new calendar initialization\n\t\telse if (!calendar) { // don't initialize twice\n\t\t\tcalendar = new Calendar(element, options);\n\t\t\telement.data('fullCalendar', calendar);\n\t\t\tcalendar.render();\n\t\t}\n\t});\n\n\treturn res;\n};\n\n\nvar complexOptions = [ // names of options that are objects whose properties should be combined\n\t'header',\n\t'footer',\n\t'buttonText',\n\t'buttonIcons',\n\t'themeButtonIcons'\n];\n\n\n// Merges an array of option objects into a single object\nfunction mergeOptions(optionObjs) {\n\treturn mergeProps(optionObjs, complexOptions);\n}\n\n;;\n\n// exports\nFC.intersectRanges = intersectRanges;\nFC.applyAll = applyAll;\nFC.debounce = debounce;\nFC.isInt = isInt;\nFC.htmlEscape = htmlEscape;\nFC.cssToStr = cssToStr;\nFC.proxy = proxy;\nFC.capitaliseFirstLetter = capitaliseFirstLetter;\n\n\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\nfunction compensateScroll(rowEls, scrollbarWidths) {\n\tif (scrollbarWidths.left) {\n\t\trowEls.css({\n\t\t\t'border-left-width': 1,\n\t\t\t'margin-left': scrollbarWidths.left - 1\n\t\t});\n\t}\n\tif (scrollbarWidths.right) {\n\t\trowEls.css({\n\t\t\t'border-right-width': 1,\n\t\t\t'margin-right': scrollbarWidths.right - 1\n\t\t});\n\t}\n}\n\n\n// Undoes compensateScroll and restores all borders/margins\nfunction uncompensateScroll(rowEls) {\n\trowEls.css({\n\t\t'margin-left': '',\n\t\t'margin-right': '',\n\t\t'border-left-width': '',\n\t\t'border-right-width': ''\n\t});\n}\n\n\n// Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n\t$('body').addClass('fc-not-allowed');\n}\n\n\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n\t$('body').removeClass('fc-not-allowed');\n}\n\n\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and\n// reduces the available height.\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {\n\n\t// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n\t// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n\n\tvar minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n\tvar minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n\tvar flexEls = []; // elements that are allowed to expand. array of DOM nodes\n\tvar flexOffsets = []; // amount of vertical space it takes up\n\tvar flexHeights = []; // actual css height\n\tvar usedHeight = 0;\n\n\tundistributeHeight(els); // give all elements their natural height\n\n\t// find elements that are below the recommended height (expandable).\n\t// important to query for heights in a single first pass (to avoid reflow oscillation).\n\tels.each(function(i, el) {\n\t\tvar minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n\t\tvar naturalOffset = $(el).outerHeight(true);\n\n\t\tif (naturalOffset < minOffset) {\n\t\t\tflexEls.push(el);\n\t\t\tflexOffsets.push(naturalOffset);\n\t\t\tflexHeights.push($(el).height());\n\t\t}\n\t\telse {\n\t\t\t// this element stretches past recommended height (non-expandable). mark the space as occupied.\n\t\t\tusedHeight += naturalOffset;\n\t\t}\n\t});\n\n\t// readjust the recommended height to only consider the height available to non-maxed-out rows.\n\tif (shouldRedistribute) {\n\t\tavailableHeight -= usedHeight;\n\t\tminOffset1 = Math.floor(availableHeight / flexEls.length);\n\t\tminOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n\t}\n\n\t// assign heights to all expandable elements\n\t$(flexEls).each(function(i, el) {\n\t\tvar minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n\t\tvar naturalOffset = flexOffsets[i];\n\t\tvar naturalHeight = flexHeights[i];\n\t\tvar newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n\n\t\tif (naturalOffset < minOffset) { // we check this again because redistribution might have changed things\n\t\t\t$(el).height(newHeight);\n\t\t}\n\t});\n}\n\n\n// Undoes distrubuteHeight, restoring all els to their natural height\nfunction undistributeHeight(els) {\n\tels.height('');\n}\n\n\n// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the\n// cells to be that width.\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\nfunction matchCellWidths(els) {\n\tvar maxInnerWidth = 0;\n\n\tels.find('> *').each(function(i, innerEl) {\n\t\tvar innerWidth = $(innerEl).outerWidth();\n\t\tif (innerWidth > maxInnerWidth) {\n\t\t\tmaxInnerWidth = innerWidth;\n\t\t}\n\t});\n\n\tmaxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n\n\tels.width(maxInnerWidth);\n\n\treturn maxInnerWidth;\n}\n\n\n// Given one element that resides inside another,\n// Subtracts the height of the inner element from the outer element.\nfunction subtractInnerElHeight(outerEl, innerEl) {\n\tvar both = outerEl.add(innerEl);\n\tvar diff;\n\n\t// effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n\tboth.css({\n\t\tposition: 'relative', // cause a reflow, which will force fresh dimension recalculation\n\t\tleft: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n\t});\n\tdiff = outerEl.outerHeight() - innerEl.outerHeight(); // grab the dimensions\n\tboth.css({ position: '', left: '' }); // undo hack\n\n\treturn diff;\n}\n\n\n/* Element Geom Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.getOuterRect = getOuterRect;\nFC.getClientRect = getClientRect;\nFC.getContentRect = getContentRect;\nFC.getScrollbarWidths = getScrollbarWidths;\n\n\n// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51\nfunction getScrollParent(el) {\n\tvar position = el.css('position'),\n\t\tscrollParent = el.parents().filter(function() {\n\t\t\tvar parent = $(this);\n\t\t\treturn (/(auto|scroll)/).test(\n\t\t\t\tparent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')\n\t\t\t);\n\t\t}).eq(0);\n\n\treturn position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;\n}\n\n\n// Queries the outer bounding area of a jQuery element.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n// Origin is optional.\nfunction getOuterRect(el, origin) {\n\tvar offset = el.offset();\n\tvar left = offset.left - (origin ? origin.left : 0);\n\tvar top = offset.top - (origin ? origin.top : 0);\n\n\treturn {\n\t\tleft: left,\n\t\tright: left + el.outerWidth(),\n\t\ttop: top,\n\t\tbottom: top + el.outerHeight()\n\t};\n}\n\n\n// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n// Origin is optional.\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\nfunction getClientRect(el, origin) {\n\tvar offset = el.offset();\n\tvar scrollbarWidths = getScrollbarWidths(el);\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left - (origin ? origin.left : 0);\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top - (origin ? origin.top : 0);\n\n\treturn {\n\t\tleft: left,\n\t\tright: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars\n\t\ttop: top,\n\t\tbottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars\n\t};\n}\n\n\n// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n// Origin is optional.\nfunction getContentRect(el, origin) {\n\tvar offset = el.offset(); // just outside of border, margin not included\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left') -\n\t\t(origin ? origin.left : 0);\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top') -\n\t\t(origin ? origin.top : 0);\n\n\treturn {\n\t\tleft: left,\n\t\tright: left + el.width(),\n\t\ttop: top,\n\t\tbottom: top + el.height()\n\t};\n}\n\n\n// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\nfunction getScrollbarWidths(el) {\n\tvar leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars\n\tvar widths = {\n\t\tleft: 0,\n\t\tright: 0,\n\t\ttop: 0,\n\t\tbottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar\n\t};\n\n\tif (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?\n\t\twidths.left = leftRightWidth;\n\t}\n\telse {\n\t\twidths.right = leftRightWidth;\n\t}\n\n\treturn widths;\n}\n\n\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\n\nvar _isLeftRtlScrollbars = null;\n\nfunction getIsLeftRtlScrollbars() { // responsible for caching the computation\n\tif (_isLeftRtlScrollbars === null) {\n\t\t_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();\n\t}\n\treturn _isLeftRtlScrollbars;\n}\n\nfunction computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it\n\tvar el = $('<div><div/></div>')\n\t\t.css({\n\t\t\tposition: 'absolute',\n\t\t\ttop: -1000,\n\t\t\tleft: 0,\n\t\t\tborder: 0,\n\t\t\tpadding: 0,\n\t\t\toverflow: 'scroll',\n\t\t\tdirection: 'rtl'\n\t\t})\n\t\t.appendTo('body');\n\tvar innerEl = el.children();\n\tvar res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?\n\tel.remove();\n\treturn res;\n}\n\n\n// Retrieves a jQuery element's computed CSS value as a floating-point number.\n// If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.\nfunction getCssFloat(el, prop) {\n\treturn parseFloat(el.css(prop)) || 0;\n}\n\n\n/* Mouse / Touch Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.preventDefault = preventDefault;\n\n\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n\treturn ev.which == 1 && !ev.ctrlKey;\n}\n\n\nfunction getEvX(ev) {\n\tif (ev.pageX !== undefined) {\n\t\treturn ev.pageX;\n\t}\n\tvar touches = ev.originalEvent.touches;\n\tif (touches) {\n\t\treturn touches[0].pageX;\n\t}\n}\n\n\nfunction getEvY(ev) {\n\tif (ev.pageY !== undefined) {\n\t\treturn ev.pageY;\n\t}\n\tvar touches = ev.originalEvent.touches;\n\tif (touches) {\n\t\treturn touches[0].pageY;\n\t}\n}\n\n\nfunction getEvIsTouch(ev) {\n\treturn /^touch/.test(ev.type);\n}\n\n\nfunction preventSelection(el) {\n\tel.addClass('fc-unselectable')\n\t\t.on('selectstart', preventDefault);\n}\n\n\n// Stops a mouse/touch event from doing it's native browser action\nfunction preventDefault(ev) {\n\tev.preventDefault();\n}\n\n\n// attach a handler to get called when ANY scroll action happens on the page.\n// this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n// http://stackoverflow.com/a/32954565/96342\n// returns `true` on success.\nfunction bindAnyScroll(handler) {\n\tif (window.addEventListener) {\n\t\twindow.addEventListener('scroll', handler, true); // useCapture=true\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// undoes bindAnyScroll. must pass in the original function.\n// returns `true` on success.\nfunction unbindAnyScroll(handler) {\n\tif (window.removeEventListener) {\n\t\twindow.removeEventListener('scroll', handler, true); // useCapture=true\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n/* General Geometry Utils\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.intersectRects = intersectRects;\n\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n\tvar res = {\n\t\tleft: Math.max(rect1.left, rect2.left),\n\t\tright: Math.min(rect1.right, rect2.right),\n\t\ttop: Math.max(rect1.top, rect2.top),\n\t\tbottom: Math.min(rect1.bottom, rect2.bottom)\n\t};\n\n\tif (res.left < res.right && res.top < res.bottom) {\n\t\treturn res;\n\t}\n\treturn false;\n}\n\n\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n\treturn {\n\t\tleft: Math.min(Math.max(point.left, rect.left), rect.right),\n\t\ttop: Math.min(Math.max(point.top, rect.top), rect.bottom)\n\t};\n}\n\n\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n\treturn {\n\t\tleft: (rect.left + rect.right) / 2,\n\t\ttop: (rect.top + rect.bottom) / 2\n\t};\n}\n\n\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n\treturn {\n\t\tleft: point1.left - point2.left,\n\t\ttop: point1.top - point2.top\n\t};\n}\n\n\n/* Object Ordering by Field\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.parseFieldSpecs = parseFieldSpecs;\nFC.compareByFieldSpecs = compareByFieldSpecs;\nFC.compareByFieldSpec = compareByFieldSpec;\nFC.flexibleCompare = flexibleCompare;\n\n\nfunction parseFieldSpecs(input) {\n\tvar specs = [];\n\tvar tokens = [];\n\tvar i, token;\n\n\tif (typeof input === 'string') {\n\t\ttokens = input.split(/\\s*,\\s*/);\n\t}\n\telse if (typeof input === 'function') {\n\t\ttokens = [ input ];\n\t}\n\telse if ($.isArray(input)) {\n\t\ttokens = input;\n\t}\n\n\tfor (i = 0; i < tokens.length; i++) {\n\t\ttoken = tokens[i];\n\n\t\tif (typeof token === 'string') {\n\t\t\tspecs.push(\n\t\t\t\ttoken.charAt(0) == '-' ?\n\t\t\t\t\t{ field: token.substring(1), order: -1 } :\n\t\t\t\t\t{ field: token, order: 1 }\n\t\t\t);\n\t\t}\n\t\telse if (typeof token === 'function') {\n\t\t\tspecs.push({ func: token });\n\t\t}\n\t}\n\n\treturn specs;\n}\n\n\nfunction compareByFieldSpecs(obj1, obj2, fieldSpecs) {\n\tvar i;\n\tvar cmp;\n\n\tfor (i = 0; i < fieldSpecs.length; i++) {\n\t\tcmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);\n\t\tif (cmp) {\n\t\t\treturn cmp;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\nfunction compareByFieldSpec(obj1, obj2, fieldSpec) {\n\tif (fieldSpec.func) {\n\t\treturn fieldSpec.func(obj1, obj2);\n\t}\n\treturn flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *\n\t\t(fieldSpec.order || 1);\n}\n\n\nfunction flexibleCompare(a, b) {\n\tif (!a && !b) {\n\t\treturn 0;\n\t}\n\tif (b == null) {\n\t\treturn -1;\n\t}\n\tif (a == null) {\n\t\treturn 1;\n\t}\n\tif ($.type(a) === 'string' || $.type(b) === 'string') {\n\t\treturn String(a).localeCompare(String(b));\n\t}\n\treturn a - b;\n}\n\n\n/* FullCalendar-specific Misc Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\n// Computes the intersection of the two ranges. Will return fresh date clones in a range.\n// Returns undefined if no intersection.\n// Expects all dates to be normalized to the same timezone beforehand.\n// TODO: move to date section?\nfunction intersectRanges(subjectRange, constraintRange) {\n\tvar subjectStart = subjectRange.start;\n\tvar subjectEnd = subjectRange.end;\n\tvar constraintStart = constraintRange.start;\n\tvar constraintEnd = constraintRange.end;\n\tvar segStart, segEnd;\n\tvar isStart, isEnd;\n\n\tif (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?\n\n\t\tif (subjectStart >= constraintStart) {\n\t\t\tsegStart = subjectStart.clone();\n\t\t\tisStart = true;\n\t\t}\n\t\telse {\n\t\t\tsegStart = constraintStart.clone();\n\t\t\tisStart =  false;\n\t\t}\n\n\t\tif (subjectEnd <= constraintEnd) {\n\t\t\tsegEnd = subjectEnd.clone();\n\t\t\tisEnd = true;\n\t\t}\n\t\telse {\n\t\t\tsegEnd = constraintEnd.clone();\n\t\t\tisEnd = false;\n\t\t}\n\n\t\treturn {\n\t\t\tstart: segStart,\n\t\t\tend: segEnd,\n\t\t\tisStart: isStart,\n\t\t\tisEnd: isEnd\n\t\t};\n\t}\n}\n\n\n/* Date Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.computeIntervalUnit = computeIntervalUnit;\nFC.divideRangeByDuration = divideRangeByDuration;\nFC.divideDurationByDuration = divideDurationByDuration;\nFC.multiplyDuration = multiplyDuration;\nFC.durationHasTime = durationHasTime;\n\nvar dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];\nvar intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];\n\n\n// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.\n// Moments will have their timezones normalized.\nfunction diffDayTime(a, b) {\n\treturn moment.duration({\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),\n\t\tms: a.time() - b.time() // time-of-day from day start. disregards timezone\n\t});\n}\n\n\n// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.\nfunction diffDay(a, b) {\n\treturn moment.duration({\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days')\n\t});\n}\n\n\n// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.\nfunction diffByUnit(a, b, unit) {\n\treturn moment.duration(\n\t\tMath.round(a.diff(b, unit, true)), // returnFloat=true\n\t\tunit\n\t);\n}\n\n\n// Computes the unit name of the largest whole-unit period of time.\n// For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".\n// Accepts start/end, a range object, or an original duration object.\nfunction computeIntervalUnit(start, end) {\n\tvar i, unit;\n\tvar val;\n\n\tfor (i = 0; i < intervalUnits.length; i++) {\n\t\tunit = intervalUnits[i];\n\t\tval = computeRangeAs(unit, start, end);\n\n\t\tif (val >= 1 && isInt(val)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn unit; // will be \"milliseconds\" if nothing else matches\n}\n\n\n// Computes the number of units (like \"hours\") in the given range.\n// Range can be a {start,end} object, separate start/end args, or a Duration.\n// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling\n// of month-diffing logic (which tends to vary from version to version).\nfunction computeRangeAs(unit, start, end) {\n\n\tif (end != null) { // given start, end\n\t\treturn end.diff(start, unit, true);\n\t}\n\telse if (moment.isDuration(start)) { // given duration\n\t\treturn start.as(unit);\n\t}\n\telse { // given { start, end } range object\n\t\treturn start.end.diff(start.start, unit, true);\n\t}\n}\n\n\n// Intelligently divides a range (specified by a start/end params) by a duration\nfunction divideRangeByDuration(start, end, dur) {\n\tvar months;\n\n\tif (durationHasTime(dur)) {\n\t\treturn (end - start) / dur;\n\t}\n\tmonths = dur.asMonths();\n\tif (Math.abs(months) >= 1 && isInt(months)) {\n\t\treturn end.diff(start, 'months', true) / months;\n\t}\n\treturn end.diff(start, 'days', true) / dur.asDays();\n}\n\n\n// Intelligently divides one duration by another\nfunction divideDurationByDuration(dur1, dur2) {\n\tvar months1, months2;\n\n\tif (durationHasTime(dur1) || durationHasTime(dur2)) {\n\t\treturn dur1 / dur2;\n\t}\n\tmonths1 = dur1.asMonths();\n\tmonths2 = dur2.asMonths();\n\tif (\n\t\tMath.abs(months1) >= 1 && isInt(months1) &&\n\t\tMath.abs(months2) >= 1 && isInt(months2)\n\t) {\n\t\treturn months1 / months2;\n\t}\n\treturn dur1.asDays() / dur2.asDays();\n}\n\n\n// Intelligently multiplies a duration by a number\nfunction multiplyDuration(dur, n) {\n\tvar months;\n\n\tif (durationHasTime(dur)) {\n\t\treturn moment.duration(dur * n);\n\t}\n\tmonths = dur.asMonths();\n\tif (Math.abs(months) >= 1 && isInt(months)) {\n\t\treturn moment.duration({ months: months * n });\n\t}\n\treturn moment.duration({ days: dur.asDays() * n });\n}\n\n\n// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)\nfunction durationHasTime(dur) {\n\treturn Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());\n}\n\n\nfunction isNativeDate(input) {\n\treturn  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;\n}\n\n\n// Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"\nfunction isTimeString(str) {\n\treturn /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);\n}\n\n\n/* Logging and Debug\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.log = function() {\n\tvar console = window.console;\n\n\tif (console && console.log) {\n\t\treturn console.log.apply(console, arguments);\n\t}\n};\n\nFC.warn = function() {\n\tvar console = window.console;\n\n\tif (console && console.warn) {\n\t\treturn console.warn.apply(console, arguments);\n\t}\n\telse {\n\t\treturn FC.log.apply(FC, arguments);\n\t}\n};\n\n\n/* General Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar hasOwnPropMethod = {}.hasOwnProperty;\n\n\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexProps) {\n\tvar dest = {};\n\tvar i, name;\n\tvar complexObjs;\n\tvar j, val;\n\tvar props;\n\n\tif (complexProps) {\n\t\tfor (i = 0; i < complexProps.length; i++) {\n\t\t\tname = complexProps[i];\n\t\t\tcomplexObjs = [];\n\n\t\t\t// collect the trailing object values, stopping when a non-object is discovered\n\t\t\tfor (j = propObjs.length - 1; j >= 0; j--) {\n\t\t\t\tval = propObjs[j][name];\n\n\t\t\t\tif (typeof val === 'object') {\n\t\t\t\t\tcomplexObjs.unshift(val);\n\t\t\t\t}\n\t\t\t\telse if (val !== undefined) {\n\t\t\t\t\tdest[name] = val; // if there were no objects, this value will be used\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if the trailing values were objects, use the merged value\n\t\t\tif (complexObjs.length) {\n\t\t\t\tdest[name] = mergeProps(complexObjs);\n\t\t\t}\n\t\t}\n\t}\n\n\t// copy values into the destination, going from last to first\n\tfor (i = propObjs.length - 1; i >= 0; i--) {\n\t\tprops = propObjs[i];\n\n\t\tfor (name in props) {\n\t\t\tif (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign\n\t\t\t\tdest[name] = props[name];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dest;\n}\n\n\n// Create an object that has the given prototype. Just like Object.create\nfunction createObject(proto) {\n\tvar f = function() {};\n\tf.prototype = proto;\n\treturn new f();\n}\nFC.createObject = createObject;\n\n\nfunction copyOwnProps(src, dest) {\n\tfor (var name in src) {\n\t\tif (hasOwnProp(src, name)) {\n\t\t\tdest[name] = src[name];\n\t\t}\n\t}\n}\n\n\nfunction hasOwnProp(obj, name) {\n\treturn hasOwnPropMethod.call(obj, name);\n}\n\n\n// Is the given value a non-object non-function value?\nfunction isAtomic(val) {\n\treturn /undefined|null|boolean|number|string/.test($.type(val));\n}\n\n\nfunction applyAll(functions, thisObj, args) {\n\tif ($.isFunction(functions)) {\n\t\tfunctions = [ functions ];\n\t}\n\tif (functions) {\n\t\tvar i;\n\t\tvar ret;\n\t\tfor (i=0; i<functions.length; i++) {\n\t\t\tret = functions[i].apply(thisObj, args) || ret;\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\nfunction firstDefined() {\n\tfor (var i=0; i<arguments.length; i++) {\n\t\tif (arguments[i] !== undefined) {\n\t\t\treturn arguments[i];\n\t\t}\n\t}\n}\n\n\nfunction htmlEscape(s) {\n\treturn (s + '').replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/'/g, '&#039;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/\\n/g, '<br />');\n}\n\n\nfunction stripHtmlEntities(text) {\n\treturn text.replace(/&.*?;/g, '');\n}\n\n\n// Given a hash of CSS properties, returns a string of CSS.\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\nfunction cssToStr(cssProps) {\n\tvar statements = [];\n\n\t$.each(cssProps, function(name, val) {\n\t\tif (val != null) {\n\t\t\tstatements.push(name + ':' + val);\n\t\t}\n\t});\n\n\treturn statements.join(';');\n}\n\n\n// Given an object hash of HTML attribute names to values,\n// generates a string that can be injected between < > in HTML\nfunction attrsToStr(attrs) {\n\tvar parts = [];\n\n\t$.each(attrs, function(name, val) {\n\t\tif (val != null) {\n\t\t\tparts.push(name + '=\"' + htmlEscape(val) + '\"');\n\t\t}\n\t});\n\n\treturn parts.join(' ');\n}\n\n\nfunction capitaliseFirstLetter(str) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\nfunction compareNumbers(a, b) { // for .sort()\n\treturn a - b;\n}\n\n\nfunction isInt(n) {\n\treturn n % 1 === 0;\n}\n\n\n// Returns a method bound to the given object context.\n// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with\n// different contexts as identical when binding/unbinding events.\nfunction proxy(obj, methodName) {\n\tvar method = obj[methodName];\n\n\treturn function() {\n\t\treturn method.apply(obj, arguments);\n\t};\n}\n\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\nfunction debounce(func, wait, immediate) {\n\tvar timeout, args, context, timestamp, result;\n\n\tvar later = function() {\n\t\tvar last = +new Date() - timestamp;\n\t\tif (last < wait) {\n\t\t\ttimeout = setTimeout(later, wait - last);\n\t\t}\n\t\telse {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) {\n\t\t\t\tresult = func.apply(context, args);\n\t\t\t\tcontext = args = null;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn function() {\n\t\tcontext = this;\n\t\targs = arguments;\n\t\ttimestamp = +new Date();\n\t\tvar callNow = immediate && !timeout;\n\t\tif (!timeout) {\n\t\t\ttimeout = setTimeout(later, wait);\n\t\t}\n\t\tif (callNow) {\n\t\t\tresult = func.apply(context, args);\n\t\t\tcontext = args = null;\n\t\t}\n\t\treturn result;\n\t};\n}\n\n;;\n\n/*\nGENERAL NOTE on moments throughout the *entire rest* of the codebase:\nAll moments are assumed to be ambiguously-zoned unless otherwise noted,\nwith the NOTABLE EXCEOPTION of start/end dates that live on *Event Objects*.\nAmbiguously-TIMED moments are assumed to be ambiguously-zoned by nature.\n*/\n\nvar ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;\nvar ambigTimeOrZoneRegex =\n\t/^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;\nvar newMomentProto = moment.fn; // where we will attach our new methods\nvar oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods\n\n// tell momentjs to transfer these properties upon clone\nvar momentProperties = moment.momentProperties;\nmomentProperties.push('_fullCalendar');\nmomentProperties.push('_ambigTime');\nmomentProperties.push('_ambigZone');\n\n\n// Creating\n// -------------------------------------------------------------------------------------------------\n\n// Creates a new moment, similar to the vanilla moment(...) constructor, but with\n// extra features (ambiguous time, enhanced formatting). When given an existing moment,\n// it will function as a clone (and retain the zone of the moment). Anything else will\n// result in a moment in the local zone.\nFC.moment = function() {\n\treturn makeMoment(arguments);\n};\n\n// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.\nFC.moment.utc = function() {\n\tvar mom = makeMoment(arguments, true);\n\n\t// Force it into UTC because makeMoment doesn't guarantee it\n\t// (if given a pre-existing moment for example)\n\tif (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone\n\t\tmom.utc();\n\t}\n\n\treturn mom;\n};\n\n// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.\n// ISO8601 strings with no timezone offset will become ambiguously zoned.\nFC.moment.parseZone = function() {\n\treturn makeMoment(arguments, true, true);\n};\n\n// Builds an enhanced moment from args. When given an existing moment, it clones. When given a\n// native Date, or called with no arguments (the current time), the resulting moment will be local.\n// Anything else needs to be \"parsed\" (a string or an array), and will be affected by:\n//    parseAsUTC - if there is no zone information, should we parse the input in UTC?\n//    parseZone - if there is zone information, should we force the zone of the moment?\nfunction makeMoment(args, parseAsUTC, parseZone) {\n\tvar input = args[0];\n\tvar isSingleString = args.length == 1 && typeof input === 'string';\n\tvar isAmbigTime;\n\tvar isAmbigZone;\n\tvar ambigMatch;\n\tvar mom;\n\n\tif (moment.isMoment(input) || isNativeDate(input) || input === undefined) {\n\t\tmom = moment.apply(null, args);\n\t}\n\telse { // \"parsing\" is required\n\t\tisAmbigTime = false;\n\t\tisAmbigZone = false;\n\n\t\tif (isSingleString) {\n\t\t\tif (ambigDateOfMonthRegex.test(input)) {\n\t\t\t\t// accept strings like '2014-05', but convert to the first of the month\n\t\t\t\tinput += '-01';\n\t\t\t\targs = [ input ]; // for when we pass it on to moment's constructor\n\t\t\t\tisAmbigTime = true;\n\t\t\t\tisAmbigZone = true;\n\t\t\t}\n\t\t\telse if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {\n\t\t\t\tisAmbigTime = !ambigMatch[5]; // no time part?\n\t\t\t\tisAmbigZone = true;\n\t\t\t}\n\t\t}\n\t\telse if ($.isArray(input)) {\n\t\t\t// arrays have no timezone information, so assume ambiguous zone\n\t\t\tisAmbigZone = true;\n\t\t}\n\t\t// otherwise, probably a string with a format\n\n\t\tif (parseAsUTC || isAmbigTime) {\n\t\t\tmom = moment.utc.apply(moment, args);\n\t\t}\n\t\telse {\n\t\t\tmom = moment.apply(null, args);\n\t\t}\n\n\t\tif (isAmbigTime) {\n\t\t\tmom._ambigTime = true;\n\t\t\tmom._ambigZone = true; // ambiguous time always means ambiguous zone\n\t\t}\n\t\telse if (parseZone) { // let's record the inputted zone somehow\n\t\t\tif (isAmbigZone) {\n\t\t\t\tmom._ambigZone = true;\n\t\t\t}\n\t\t\telse if (isSingleString) {\n\t\t\t\tmom.utcOffset(input); // if not a valid zone, will assign UTC\n\t\t\t}\n\t\t}\n\t}\n\n\tmom._fullCalendar = true; // flag for extended functionality\n\n\treturn mom;\n}\n\n\n// Week Number\n// -------------------------------------------------------------------------------------------------\n\n\n// Returns the week number, considering the locale's custom week number calcuation\n// `weeks` is an alias for `week`\nnewMomentProto.week = newMomentProto.weeks = function(input) {\n\tvar weekCalc = this._locale._fullCalendar_weekCalc;\n\n\tif (input == null && typeof weekCalc === 'function') { // custom function only works for getter\n\t\treturn weekCalc(this);\n\t}\n\telse if (weekCalc === 'ISO') {\n\t\treturn oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter\n\t}\n\n\treturn oldMomentProto.week.apply(this, arguments); // local getter/setter\n};\n\n\n// Time-of-day\n// -------------------------------------------------------------------------------------------------\n\n// GETTER\n// Returns a Duration with the hours/minutes/seconds/ms values of the moment.\n// If the moment has an ambiguous time, a duration of 00:00 will be returned.\n//\n// SETTER\n// You can supply a Duration, a Moment, or a Duration-like argument.\n// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.\nnewMomentProto.time = function(time) {\n\n\t// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.\n\t// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.\n\tif (!this._fullCalendar) {\n\t\treturn oldMomentProto.time.apply(this, arguments);\n\t}\n\n\tif (time == null) { // getter\n\t\treturn moment.duration({\n\t\t\thours: this.hours(),\n\t\t\tminutes: this.minutes(),\n\t\t\tseconds: this.seconds(),\n\t\t\tmilliseconds: this.milliseconds()\n\t\t});\n\t}\n\telse { // setter\n\n\t\tthis._ambigTime = false; // mark that the moment now has a time\n\n\t\tif (!moment.isDuration(time) && !moment.isMoment(time)) {\n\t\t\ttime = moment.duration(time);\n\t\t}\n\n\t\t// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).\n\t\t// Only for Duration times, not Moment times.\n\t\tvar dayHours = 0;\n\t\tif (moment.isDuration(time)) {\n\t\t\tdayHours = Math.floor(time.asDays()) * 24;\n\t\t}\n\n\t\t// We need to set the individual fields.\n\t\t// Can't use startOf('day') then add duration. In case of DST at start of day.\n\t\treturn this.hours(dayHours + time.hours())\n\t\t\t.minutes(time.minutes())\n\t\t\t.seconds(time.seconds())\n\t\t\t.milliseconds(time.milliseconds());\n\t}\n};\n\n// Converts the moment to UTC, stripping out its time-of-day and timezone offset,\n// but preserving its YMD. A moment with a stripped time will display no time\n// nor timezone offset when .format() is called.\nnewMomentProto.stripTime = function() {\n\n\tif (!this._ambigTime) {\n\n\t\tthis.utc(true); // keepLocalTime=true (for keeping *date* value)\n\n\t\t// set time to zero\n\t\tthis.set({\n\t\t\thours: 0,\n\t\t\tminutes: 0,\n\t\t\tseconds: 0,\n\t\t\tms: 0\n\t\t});\n\n\t\t// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n\t\t// which clears all ambig flags.\n\t\tthis._ambigTime = true;\n\t\tthis._ambigZone = true; // if ambiguous time, also ambiguous timezone offset\n\t}\n\n\treturn this; // for chaining\n};\n\n// Returns if the moment has a non-ambiguous time (boolean)\nnewMomentProto.hasTime = function() {\n\treturn !this._ambigTime;\n};\n\n\n// Timezone\n// -------------------------------------------------------------------------------------------------\n\n// Converts the moment to UTC, stripping out its timezone offset, but preserving its\n// YMD and time-of-day. A moment with a stripped timezone offset will display no\n// timezone offset when .format() is called.\nnewMomentProto.stripZone = function() {\n\tvar wasAmbigTime;\n\n\tif (!this._ambigZone) {\n\n\t\twasAmbigTime = this._ambigTime;\n\n\t\tthis.utc(true); // keepLocalTime=true (for keeping date and time values)\n\n\t\t// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore\n\t\tthis._ambigTime = wasAmbigTime || false;\n\n\t\t// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n\t\t// which clears the ambig flags.\n\t\tthis._ambigZone = true;\n\t}\n\n\treturn this; // for chaining\n};\n\n// Returns of the moment has a non-ambiguous timezone offset (boolean)\nnewMomentProto.hasZone = function() {\n\treturn !this._ambigZone;\n};\n\n\n// implicitly marks a zone\nnewMomentProto.local = function(keepLocalTime) {\n\n\t// for when converting from ambiguously-zoned to local,\n\t// keep the time values when converting from UTC -> local\n\toldMomentProto.local.call(this, this._ambigZone || keepLocalTime);\n\n\t// ensure non-ambiguous\n\t// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals\n\tthis._ambigTime = false;\n\tthis._ambigZone = false;\n\n\treturn this; // for chaining\n};\n\n\n// implicitly marks a zone\nnewMomentProto.utc = function(keepLocalTime) {\n\n\toldMomentProto.utc.call(this, keepLocalTime);\n\n\t// ensure non-ambiguous\n\t// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals\n\tthis._ambigTime = false;\n\tthis._ambigZone = false;\n\n\treturn this;\n};\n\n\n// implicitly marks a zone (will probably get called upon .utc() and .local())\nnewMomentProto.utcOffset = function(tzo) {\n\n\tif (tzo != null) { // setter\n\t\t// these assignments needs to happen before the original zone method is called.\n\t\t// I forget why, something to do with a browser crash.\n\t\tthis._ambigTime = false;\n\t\tthis._ambigZone = false;\n\t}\n\n\treturn oldMomentProto.utcOffset.apply(this, arguments);\n};\n\n\n// Formatting\n// -------------------------------------------------------------------------------------------------\n\nnewMomentProto.format = function() {\n\tif (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?\n\t\treturn formatDate(this, arguments[0]); // our extended formatting\n\t}\n\tif (this._ambigTime) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');\n\t}\n\tif (this._ambigZone) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');\n\t}\n\treturn oldMomentProto.format.apply(this, arguments);\n};\n\nnewMomentProto.toISOString = function() {\n\tif (this._ambigTime) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');\n\t}\n\tif (this._ambigZone) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');\n\t}\n\treturn oldMomentProto.toISOString.apply(this, arguments);\n};\n\n;;\n\n// Single Date Formatting\n// -------------------------------------------------------------------------------------------------\n\n\n// call this if you want Moment's original format method to be used\nfunction oldMomentFormat(mom, formatStr) {\n\treturn oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js\n}\n\n\n// Formats `date` with a Moment formatting string, but allow our non-zero areas and\n// additional token.\nfunction formatDate(date, formatStr) {\n\treturn formatDateWithChunks(date, getFormatStringChunks(formatStr));\n}\n\n\nfunction formatDateWithChunks(date, chunks) {\n\tvar s = '';\n\tvar i;\n\n\tfor (i=0; i<chunks.length; i++) {\n\t\ts += formatDateWithChunk(date, chunks[i]);\n\t}\n\n\treturn s;\n}\n\n\n// addition formatting tokens we want recognized\nvar tokenOverrides = {\n\tt: function(date) { // \"a\" or \"p\"\n\t\treturn oldMomentFormat(date, 'a').charAt(0);\n\t},\n\tT: function(date) { // \"A\" or \"P\"\n\t\treturn oldMomentFormat(date, 'A').charAt(0);\n\t}\n};\n\n\nfunction formatDateWithChunk(date, chunk) {\n\tvar token;\n\tvar maybeStr;\n\n\tif (typeof chunk === 'string') { // a literal string\n\t\treturn chunk;\n\t}\n\telse if ((token = chunk.token)) { // a token, like \"YYYY\"\n\t\tif (tokenOverrides[token]) {\n\t\t\treturn tokenOverrides[token](date); // use our custom token\n\t\t}\n\t\treturn oldMomentFormat(date, token);\n\t}\n\telse if (chunk.maybe) { // a grouping of other chunks that must be non-zero\n\t\tmaybeStr = formatDateWithChunks(date, chunk.maybe);\n\t\tif (maybeStr.match(/[1-9]/)) {\n\t\t\treturn maybeStr;\n\t\t}\n\t}\n\n\treturn '';\n}\n\n\n// Date Range Formatting\n// -------------------------------------------------------------------------------------------------\n// TODO: make it work with timezone offset\n\n// Using a formatting string meant for a single date, generate a range string, like\n// \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.\n// If the dates are the same as far as the format string is concerned, just return a single\n// rendering of one date, without any separator.\nfunction formatRange(date1, date2, formatStr, separator, isRTL) {\n\tvar localeData;\n\n\tdate1 = FC.moment.parseZone(date1);\n\tdate2 = FC.moment.parseZone(date2);\n\n\tlocaleData = date1.localeData();\n\n\t// Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\"\n\tformatStr = localeData.longDateFormat(formatStr) || formatStr;\n\t// BTW, this is not important for `formatDate` because it is impossible to put custom tokens\n\t// or non-zero areas in Moment's localized format strings.\n\n\tseparator = separator || ' - ';\n\n\treturn formatRangeWithChunks(\n\t\tdate1,\n\t\tdate2,\n\t\tgetFormatStringChunks(formatStr),\n\t\tseparator,\n\t\tisRTL\n\t);\n}\nFC.formatRange = formatRange; // expose\n\n\nfunction formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {\n\tvar unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk\n\tvar unzonedDate2 = date2.clone().stripZone(); // \"\n\tvar chunkStr; // the rendering of the chunk\n\tvar leftI;\n\tvar leftStr = '';\n\tvar rightI;\n\tvar rightStr = '';\n\tvar middleI;\n\tvar middleStr1 = '';\n\tvar middleStr2 = '';\n\tvar middleStr = '';\n\n\t// Start at the leftmost side of the formatting string and continue until you hit a token\n\t// that is not the same between dates.\n\tfor (leftI=0; leftI<chunks.length; leftI++) {\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);\n\t\tif (chunkStr === false) {\n\t\t\tbreak;\n\t\t}\n\t\tleftStr += chunkStr;\n\t}\n\n\t// Similarly, start at the rightmost side of the formatting string and move left\n\tfor (rightI=chunks.length-1; rightI>leftI; rightI--) {\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);\n\t\tif (chunkStr === false) {\n\t\t\tbreak;\n\t\t}\n\t\trightStr = chunkStr + rightStr;\n\t}\n\n\t// The area in the middle is different for both of the dates.\n\t// Collect them distinctly so we can jam them together later.\n\tfor (middleI=leftI; middleI<=rightI; middleI++) {\n\t\tmiddleStr1 += formatDateWithChunk(date1, chunks[middleI]);\n\t\tmiddleStr2 += formatDateWithChunk(date2, chunks[middleI]);\n\t}\n\n\tif (middleStr1 || middleStr2) {\n\t\tif (isRTL) {\n\t\t\tmiddleStr = middleStr2 + separator + middleStr1;\n\t\t}\n\t\telse {\n\t\t\tmiddleStr = middleStr1 + separator + middleStr2;\n\t\t}\n\t}\n\n\treturn leftStr + middleStr + rightStr;\n}\n\n\nvar similarUnitMap = {\n\tY: 'year',\n\tM: 'month',\n\tD: 'day', // day of month\n\td: 'day', // day of week\n\t// prevents a separator between anything time-related...\n\tA: 'second', // AM/PM\n\ta: 'second', // am/pm\n\tT: 'second', // A/P\n\tt: 'second', // a/p\n\tH: 'second', // hour (24)\n\th: 'second', // hour (12)\n\tm: 'second', // minute\n\ts: 'second' // second\n};\n// TODO: week maybe?\n\n\n// Given a formatting chunk, and given that both dates are similar in the regard the\n// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.\nfunction formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {\n\tvar token;\n\tvar unit;\n\n\tif (typeof chunk === 'string') { // a literal string\n\t\treturn chunk;\n\t}\n\telse if ((token = chunk.token)) {\n\t\tunit = similarUnitMap[token.charAt(0)];\n\n\t\t// are the dates the same for this unit of measurement?\n\t\t// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)\n\t\tif (unit && unzonedDate1.isSame(unzonedDate2, unit)) {\n\t\t\treturn oldMomentFormat(date1, token); // would be the same if we used `date2`\n\t\t\t// BTW, don't support custom tokens\n\t\t}\n\t}\n\n\treturn false; // the chunk is NOT the same for the two dates\n\t// BTW, don't support splitting on non-zero areas\n}\n\n\n// Chunking Utils\n// -------------------------------------------------------------------------------------------------\n\n\nvar formatStringChunkCache = {};\n\n\nfunction getFormatStringChunks(formatStr) {\n\tif (formatStr in formatStringChunkCache) {\n\t\treturn formatStringChunkCache[formatStr];\n\t}\n\treturn (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));\n}\n\n\n// Break the formatting string into an array of chunks\nfunction chunkFormatString(formatStr) {\n\tvar chunks = [];\n\tvar chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g; // TODO: more descrimination\n\tvar match;\n\n\twhile ((match = chunker.exec(formatStr))) {\n\t\tif (match[1]) { // a literal string inside [ ... ]\n\t\t\tchunks.push(match[1]);\n\t\t}\n\t\telse if (match[2]) { // non-zero formatting inside ( ... )\n\t\t\tchunks.push({ maybe: chunkFormatString(match[2]) });\n\t\t}\n\t\telse if (match[3]) { // a formatting token\n\t\t\tchunks.push({ token: match[3] });\n\t\t}\n\t\telse if (match[5]) { // an unenclosed literal string\n\t\t\tchunks.push(match[5]);\n\t\t}\n\t}\n\n\treturn chunks;\n}\n\n\n// Misc Utils\n// -------------------------------------------------------------------------------------------------\n\n\n// granularity only goes up until day\n// TODO: unify with similarUnitMap\nvar tokenGranularities = {\n\tY: { value: 1, unit: 'year' },\n\tM: { value: 2, unit: 'month' },\n\tW: { value: 3, unit: 'week' },\n\tw: { value: 3, unit: 'week' },\n\tD: { value: 4, unit: 'day' }, // day of month\n\td: { value: 4, unit: 'day' } // day of week\n};\n\n// returns a unit string, either 'year', 'month', 'day', or null\n// for the most granular formatting token in the string.\nFC.queryMostGranularFormatUnit = function(formatStr) {\n\tvar chunks = getFormatStringChunks(formatStr);\n\tvar i, chunk;\n\tvar candidate;\n\tvar best;\n\n\tfor (i = 0; i < chunks.length; i++) {\n\t\tchunk = chunks[i];\n\t\tif (chunk.token) {\n\t\t\tcandidate = tokenGranularities[chunk.token.charAt(0)];\n\t\t\tif (candidate) {\n\t\t\t\tif (!best || candidate.value > best.value) {\n\t\t\t\t\tbest = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (best) {\n\t\treturn best.unit;\n\t}\n\n\treturn null;\n};\n\n;;\n\nFC.Class = Class; // export\n\n// Class that all other classes will inherit from\nfunction Class() { }\n\n\n// Called on a class to create a subclass.\n// Last argument contains instance methods. Any argument before the last are considered mixins.\nClass.extend = function() {\n\tvar len = arguments.length;\n\tvar i;\n\tvar members;\n\n\tfor (i = 0; i < len; i++) {\n\t\tmembers = arguments[i];\n\t\tif (i < len - 1) { // not the last argument?\n\t\t\tmixIntoClass(this, members);\n\t\t}\n\t}\n\n\treturn extendClass(this, members || {}); // members will be undefined if no arguments\n};\n\n\n// Adds new member variables/methods to the class's prototype.\n// Can be called with another class, or a plain object hash containing new members.\nClass.mixin = function(members) {\n\tmixIntoClass(this, members);\n};\n\n\nfunction extendClass(superClass, members) {\n\tvar subClass;\n\n\t// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist\n\tif (hasOwnProp(members, 'constructor')) {\n\t\tsubClass = members.constructor;\n\t}\n\tif (typeof subClass !== 'function') {\n\t\tsubClass = members.constructor = function() {\n\t\t\tsuperClass.apply(this, arguments);\n\t\t};\n\t}\n\n\t// build the base prototype for the subclass, which is an new object chained to the superclass's prototype\n\tsubClass.prototype = createObject(superClass.prototype);\n\n\t// copy each member variable/method onto the the subclass's prototype\n\tcopyOwnProps(members, subClass.prototype);\n\n\t// copy over all class variables/methods to the subclass, such as `extend` and `mixin`\n\tcopyOwnProps(superClass, subClass);\n\n\treturn subClass;\n}\n\n\nfunction mixIntoClass(theClass, members) {\n\tcopyOwnProps(members, theClass.prototype);\n}\n;;\n\n/*\nWrap jQuery's Deferred Promise object to be slightly more Promise/A+ compliant.\nWith the added non-standard feature of synchronously executing handlers on resolved promises,\nwhich doesn't always happen otherwise (esp with nested .then handlers!?),\nso, this makes things a lot easier, esp because jQuery 3 changed the synchronicity for Deferred objects.\n\nTODO: write tests and more comments\n*/\n\nfunction Promise(executor) {\n\tvar deferred = $.Deferred();\n\tvar promise = deferred.promise();\n\n\tif (typeof executor === 'function') {\n\t\texecutor(\n\t\t\tfunction(value) { // resolve\n\t\t\t\tif (Promise.immediate) {\n\t\t\t\t\tpromise._value = value;\n\t\t\t\t}\n\t\t\t\tdeferred.resolve(value);\n\t\t\t},\n\t\t\tfunction() { // reject\n\t\t\t\tdeferred.reject();\n\t\t\t}\n\t\t);\n\t}\n\n\tif (Promise.immediate) {\n\t\tvar origThen = promise.then;\n\n\t\tpromise.then = function(onFulfilled, onRejected) {\n\t\t\tvar state = promise.state();\n\n\t\t\tif (state === 'resolved') {\n\t\t\t\tif (typeof onFulfilled === 'function') {\n\t\t\t\t\treturn Promise.resolve(onFulfilled(promise._value));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (state === 'rejected') {\n\t\t\t\tif (typeof onRejected === 'function') {\n\t\t\t\t\tonRejected();\n\t\t\t\t\treturn promise; // already rejected\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn origThen.call(promise, onFulfilled, onRejected);\n\t\t};\n\t}\n\n\treturn promise; // instanceof Promise will break :( TODO: make Promise a real class\n}\n\nFC.Promise = Promise;\n\nPromise.immediate = true;\n\n\nPromise.resolve = function(value) {\n\tif (value && typeof value.resolve === 'function') {\n\t\treturn value.promise();\n\t}\n\tif (value && typeof value.then === 'function') {\n\t\treturn value;\n\t}\n\telse {\n\t\tvar deferred = $.Deferred().resolve(value);\n\t\tvar promise = deferred.promise();\n\n\t\tif (Promise.immediate) {\n\t\t\tvar origThen = promise.then;\n\n\t\t\tpromise._value = value;\n\n\t\t\tpromise.then = function(onFulfilled, onRejected) {\n\t\t\t\tif (typeof onFulfilled === 'function') {\n\t\t\t\t\treturn Promise.resolve(onFulfilled(value));\n\t\t\t\t}\n\t\t\t\treturn origThen.call(promise, onFulfilled, onRejected);\n\t\t\t};\n\t\t}\n\n\t\treturn promise;\n\t}\n};\n\n\nPromise.reject = function() {\n\treturn $.Deferred().reject().promise();\n};\n\n\nPromise.all = function(inputs) {\n\tvar hasAllValues = false;\n\tvar values;\n\tvar i, input;\n\n\tif (Promise.immediate) {\n\t\thasAllValues = true;\n\t\tvalues = [];\n\n\t\tfor (i = 0; i < inputs.length; i++) {\n\t\t\tinput = inputs[i];\n\n\t\t\tif (input && typeof input.state === 'function' && input.state() === 'resolved' && ('_value' in input)) {\n\t\t\t\tvalues.push(input._value);\n\t\t\t}\n\t\t\telse if (input && typeof input.then === 'function') {\n\t\t\t\thasAllValues = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues.push(input);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasAllValues) {\n\t\treturn Promise.resolve(values);\n\t}\n\telse {\n\t\treturn $.when.apply($.when, inputs).then(function() {\n\t\t\treturn $.when($.makeArray(arguments));\n\t\t});\n\t}\n};\n\n;;\n\n// TODO: write tests and clean up code\n\nfunction TaskQueue(debounceWait) {\n\tvar q = []; // array of runFuncs\n\n\tfunction addTask(taskFunc) {\n\t\treturn new Promise(function(resolve) {\n\n\t\t\t// should run this function when it's taskFunc's turn to run.\n\t\t\t// responsible for popping itself off the queue.\n\t\t\tvar runFunc = function() {\n\t\t\t\tPromise.resolve(taskFunc()) // result might be async, coerce to promise\n\t\t\t\t\t.then(resolve) // resolve TaskQueue::push's promise, for the caller. will receive result of taskFunc.\n\t\t\t\t\t.then(function() {\n\t\t\t\t\t\tq.shift(); // pop itself off\n\n\t\t\t\t\t\t// run the next task, if any\n\t\t\t\t\t\tif (q.length) {\n\t\t\t\t\t\t\tq[0]();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\t// always put the task at the end of the queue, BEFORE running the task\n\t\t\tq.push(runFunc);\n\n\t\t\t// if it's the only task in the queue, run immediately\n\t\t\tif (q.length === 1) {\n\t\t\t\trunFunc();\n\t\t\t}\n\t\t});\n\t}\n\n\tthis.add = // potentially debounce, for the public method\n\t\ttypeof debounceWait === 'number' ?\n\t\t\tdebounce(addTask, debounceWait) :\n\t\t\taddTask; // if not a number (null/undefined/false), no debounce at all\n\n\tthis.addQuickly = addTask; // guaranteed no debounce\n}\n\nFC.TaskQueue = TaskQueue;\n\n/*\nq = new TaskQueue();\n\nfunction work(i) {\n\treturn q.push(function() {\n\t\ttrigger();\n\t\tconsole.log('work' + i);\n\t});\n}\n\nvar cnt = 0;\n\nfunction trigger() {\n\tif (cnt < 5) {\n\t\tcnt++;\n\t\twork(cnt);\n\t}\n}\n\nwork(9);\n*/\n\n;;\n\nvar EmitterMixin = FC.EmitterMixin = {\n\n\t// jQuery-ification via $(this) allows a non-DOM object to have\n\t// the same event handling capabilities (including namespaces).\n\n\n\ton: function(types, handler) {\n\t\t$(this).on(types, this._prepareIntercept(handler));\n\t\treturn this; // for chaining\n\t},\n\n\n\tone: function(types, handler) {\n\t\t$(this).one(types, this._prepareIntercept(handler));\n\t\treturn this; // for chaining\n\t},\n\n\n\t_prepareIntercept: function(handler) {\n\t\t// handlers are always called with an \"event\" object as their first param.\n\t\t// sneak the `this` context and arguments into the extra parameter object\n\t\t// and forward them on to the original handler.\n\t\tvar intercept = function(ev, extra) {\n\t\t\treturn handler.apply(\n\t\t\t\textra.context || this,\n\t\t\t\textra.args || []\n\t\t\t);\n\t\t};\n\n\t\t// mimick jQuery's internal \"proxy\" system (risky, I know)\n\t\t// causing all functions with the same .guid to appear to be the same.\n\t\t// https://github.com/jquery/jquery/blob/2.2.4/src/core.js#L448\n\t\t// this is needed for calling .off with the original non-intercept handler.\n\t\tif (!handler.guid) {\n\t\t\thandler.guid = $.guid++;\n\t\t}\n\t\tintercept.guid = handler.guid;\n\n\t\treturn intercept;\n\t},\n\n\n\toff: function(types, handler) {\n\t\t$(this).off(types, handler);\n\n\t\treturn this; // for chaining\n\t},\n\n\n\ttrigger: function(types) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1); // arguments after the first\n\n\t\t// pass in \"extra\" info to the intercept\n\t\t$(this).triggerHandler(types, { args: args });\n\n\t\treturn this; // for chaining\n\t},\n\n\n\ttriggerWith: function(types, context, args) {\n\n\t\t// `triggerHandler` is less reliant on the DOM compared to `trigger`.\n\t\t// pass in \"extra\" info to the intercept.\n\t\t$(this).triggerHandler(types, { context: context, args: args });\n\n\t\treturn this; // for chaining\n\t}\n\n};\n\n;;\n\n/*\nUtility methods for easily listening to events on another object,\nand more importantly, easily unlistening from them.\n*/\nvar ListenerMixin = FC.ListenerMixin = (function() {\n\tvar guid = 0;\n\tvar ListenerMixin = {\n\n\t\tlistenerId: null,\n\n\t\t/*\n\t\tGiven an `other` object that has on/off methods, bind the given `callback` to an event by the given name.\n\t\tThe `callback` will be called with the `this` context of the object that .listenTo is being called on.\n\t\tCan be called:\n\t\t\t.listenTo(other, eventName, callback)\n\t\tOR\n\t\t\t.listenTo(other, {\n\t\t\t\teventName1: callback1,\n\t\t\t\teventName2: callback2\n\t\t\t})\n\t\t*/\n\t\tlistenTo: function(other, arg, callback) {\n\t\t\tif (typeof arg === 'object') { // given dictionary of callbacks\n\t\t\t\tfor (var eventName in arg) {\n\t\t\t\t\tif (arg.hasOwnProperty(eventName)) {\n\t\t\t\t\t\tthis.listenTo(other, eventName, arg[eventName]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (typeof arg === 'string') {\n\t\t\t\tother.on(\n\t\t\t\t\targ + '.' + this.getListenerNamespace(), // use event namespacing to identify this object\n\t\t\t\t\t$.proxy(callback, this) // always use `this` context\n\t\t\t\t\t\t// the usually-undesired jQuery guid behavior doesn't matter,\n\t\t\t\t\t\t// because we always unbind via namespace\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\tCauses the current object to stop listening to events on the `other` object.\n\t\t`eventName` is optional. If omitted, will stop listening to ALL events on `other`.\n\t\t*/\n\t\tstopListeningTo: function(other, eventName) {\n\t\t\tother.off((eventName || '') + '.' + this.getListenerNamespace());\n\t\t},\n\n\t\t/*\n\t\tReturns a string, unique to this object, to be used for event namespacing\n\t\t*/\n\t\tgetListenerNamespace: function() {\n\t\t\tif (this.listenerId == null) {\n\t\t\t\tthis.listenerId = guid++;\n\t\t\t}\n\t\t\treturn '_listener' + this.listenerId;\n\t\t}\n\n\t};\n\treturn ListenerMixin;\n})();\n;;\n\n// simple class for toggle a `isIgnoringMouse` flag on delay\n// initMouseIgnoring must first be called, with a millisecond delay setting.\nvar MouseIgnorerMixin = {\n\n\tisIgnoringMouse: false, // bool\n\tdelayUnignoreMouse: null, // method\n\n\n\tinitMouseIgnoring: function(delay) {\n\t\tthis.delayUnignoreMouse = debounce(proxy(this, 'unignoreMouse'), delay || 1000);\n\t},\n\n\n\t// temporarily ignore mouse actions on segments\n\ttempIgnoreMouse: function() {\n\t\tthis.isIgnoringMouse = true;\n\t\tthis.delayUnignoreMouse();\n\t},\n\n\n\t// delayUnignoreMouse eventually calls this\n\tunignoreMouse: function() {\n\t\tthis.isIgnoringMouse = false;\n\t}\n\n};\n\n;;\n\n/* A rectangular panel that is absolutely positioned over other content\n------------------------------------------------------------------------------------------------------------------------\nOptions:\n\t- className (string)\n\t- content (HTML string or jQuery element set)\n\t- parentEl\n\t- top\n\t- left\n\t- right (the x coord of where the right edge should be. not a \"CSS\" right)\n\t- autoHide (boolean)\n\t- show (callback)\n\t- hide (callback)\n*/\n\nvar Popover = Class.extend(ListenerMixin, {\n\n\tisHidden: true,\n\toptions: null,\n\tel: null, // the container element for the popover. generated by this object\n\tmargin: 10, // the space required between the popover and the edges of the scroll container\n\n\n\tconstructor: function(options) {\n\t\tthis.options = options || {};\n\t},\n\n\n\t// Shows the popover on the specified position. Renders it if not already\n\tshow: function() {\n\t\tif (this.isHidden) {\n\t\t\tif (!this.el) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\tthis.el.show();\n\t\t\tthis.position();\n\t\t\tthis.isHidden = false;\n\t\t\tthis.trigger('show');\n\t\t}\n\t},\n\n\n\t// Hides the popover, through CSS, but does not remove it from the DOM\n\thide: function() {\n\t\tif (!this.isHidden) {\n\t\t\tthis.el.hide();\n\t\t\tthis.isHidden = true;\n\t\t\tthis.trigger('hide');\n\t\t}\n\t},\n\n\n\t// Creates `this.el` and renders content inside of it\n\trender: function() {\n\t\tvar _this = this;\n\t\tvar options = this.options;\n\n\t\tthis.el = $('<div class=\"fc-popover\"/>')\n\t\t\t.addClass(options.className || '')\n\t\t\t.css({\n\t\t\t\t// position initially to the top left to avoid creating scrollbars\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t})\n\t\t\t.append(options.content)\n\t\t\t.appendTo(options.parentEl);\n\n\t\t// when a click happens on anything inside with a 'fc-close' className, hide the popover\n\t\tthis.el.on('click', '.fc-close', function() {\n\t\t\t_this.hide();\n\t\t});\n\n\t\tif (options.autoHide) {\n\t\t\tthis.listenTo($(document), 'mousedown', this.documentMousedown);\n\t\t}\n\t},\n\n\n\t// Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n\tdocumentMousedown: function(ev) {\n\t\t// only hide the popover if the click happened outside the popover\n\t\tif (this.el && !$(ev.target).closest(this.el).length) {\n\t\t\tthis.hide();\n\t\t}\n\t},\n\n\n\t// Hides and unregisters any handlers\n\tremoveElement: function() {\n\t\tthis.hide();\n\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t\tthis.el = null;\n\t\t}\n\n\t\tthis.stopListeningTo($(document), 'mousedown');\n\t},\n\n\n\t// Positions the popover optimally, using the top/left/right options\n\tposition: function() {\n\t\tvar options = this.options;\n\t\tvar origin = this.el.offsetParent().offset();\n\t\tvar width = this.el.outerWidth();\n\t\tvar height = this.el.outerHeight();\n\t\tvar windowEl = $(window);\n\t\tvar viewportEl = getScrollParent(this.el);\n\t\tvar viewportTop;\n\t\tvar viewportLeft;\n\t\tvar viewportOffset;\n\t\tvar top; // the \"position\" (not \"offset\") values for the popover\n\t\tvar left; //\n\n\t\t// compute top and left\n\t\ttop = options.top || 0;\n\t\tif (options.left !== undefined) {\n\t\t\tleft = options.left;\n\t\t}\n\t\telse if (options.right !== undefined) {\n\t\t\tleft = options.right - width; // derive the left value from the right value\n\t\t}\n\t\telse {\n\t\t\tleft = 0;\n\t\t}\n\n\t\tif (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result\n\t\t\tviewportEl = windowEl;\n\t\t\tviewportTop = 0; // the window is always at the top left\n\t\t\tviewportLeft = 0; // (and .offset() won't work if called here)\n\t\t}\n\t\telse {\n\t\t\tviewportOffset = viewportEl.offset();\n\t\t\tviewportTop = viewportOffset.top;\n\t\t\tviewportLeft = viewportOffset.left;\n\t\t}\n\n\t\t// if the window is scrolled, it causes the visible area to be further down\n\t\tviewportTop += windowEl.scrollTop();\n\t\tviewportLeft += windowEl.scrollLeft();\n\n\t\t// constrain to the view port. if constrained by two edges, give precedence to top/left\n\t\tif (options.viewportConstrain !== false) {\n\t\t\ttop = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);\n\t\t\ttop = Math.max(top, viewportTop + this.margin);\n\t\t\tleft = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);\n\t\t\tleft = Math.max(left, viewportLeft + this.margin);\n\t\t}\n\n\t\tthis.el.css({\n\t\t\ttop: top - origin.top,\n\t\t\tleft: left - origin.left\n\t\t});\n\t},\n\n\n\t// Triggers a callback. Calls a function in the option hash of the same name.\n\t// Arguments beyond the first `name` are forwarded on.\n\t// TODO: better code reuse for this. Repeat code\n\ttrigger: function(name) {\n\t\tif (this.options[name]) {\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\t}\n\n});\n\n;;\n\n/*\nA cache for the left/right/top/bottom/width/height values for one or more elements.\nWorks with both offset (from topleft document) and position (from offsetParent).\n\noptions:\n- els\n- isHorizontal\n- isVertical\n*/\nvar CoordCache = FC.CoordCache = Class.extend({\n\n\tels: null, // jQuery set (assumed to be siblings)\n\tforcedOffsetParentEl: null, // options can override the natural offsetParent\n\torigin: null, // {left,top} position of offsetParent of els\n\tboundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null\n\tisHorizontal: false, // whether to query for left/right/width\n\tisVertical: false, // whether to query for top/bottom/height\n\n\t// arrays of coordinates (offsets from topleft of document)\n\tlefts: null,\n\trights: null,\n\ttops: null,\n\tbottoms: null,\n\n\n\tconstructor: function(options) {\n\t\tthis.els = $(options.els);\n\t\tthis.isHorizontal = options.isHorizontal;\n\t\tthis.isVertical = options.isVertical;\n\t\tthis.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;\n\t},\n\n\n\t// Queries the els for coordinates and stores them.\n\t// Call this method before using and of the get* methods below.\n\tbuild: function() {\n\t\tvar offsetParentEl = this.forcedOffsetParentEl;\n\t\tif (!offsetParentEl && this.els.length > 0) {\n\t\t\toffsetParentEl = this.els.eq(0).offsetParent();\n\t\t}\n\n\t\tthis.origin = offsetParentEl ?\n\t\t\toffsetParentEl.offset() :\n\t\t\tnull;\n\n\t\tthis.boundingRect = this.queryBoundingRect();\n\n\t\tif (this.isHorizontal) {\n\t\t\tthis.buildElHorizontals();\n\t\t}\n\t\tif (this.isVertical) {\n\t\t\tthis.buildElVerticals();\n\t\t}\n\t},\n\n\n\t// Destroys all internal data about coordinates, freeing memory\n\tclear: function() {\n\t\tthis.origin = null;\n\t\tthis.boundingRect = null;\n\t\tthis.lefts = null;\n\t\tthis.rights = null;\n\t\tthis.tops = null;\n\t\tthis.bottoms = null;\n\t},\n\n\n\t// When called, if coord caches aren't built, builds them\n\tensureBuilt: function() {\n\t\tif (!this.origin) {\n\t\t\tthis.build();\n\t\t}\n\t},\n\n\n\t// Populates the left/right internal coordinate arrays\n\tbuildElHorizontals: function() {\n\t\tvar lefts = [];\n\t\tvar rights = [];\n\n\t\tthis.els.each(function(i, node) {\n\t\t\tvar el = $(node);\n\t\t\tvar left = el.offset().left;\n\t\t\tvar width = el.outerWidth();\n\n\t\t\tlefts.push(left);\n\t\t\trights.push(left + width);\n\t\t});\n\n\t\tthis.lefts = lefts;\n\t\tthis.rights = rights;\n\t},\n\n\n\t// Populates the top/bottom internal coordinate arrays\n\tbuildElVerticals: function() {\n\t\tvar tops = [];\n\t\tvar bottoms = [];\n\n\t\tthis.els.each(function(i, node) {\n\t\t\tvar el = $(node);\n\t\t\tvar top = el.offset().top;\n\t\t\tvar height = el.outerHeight();\n\n\t\t\ttops.push(top);\n\t\t\tbottoms.push(top + height);\n\t\t});\n\n\t\tthis.tops = tops;\n\t\tthis.bottoms = bottoms;\n\t},\n\n\n\t// Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n\t// If no intersection is made, returns undefined.\n\tgetHorizontalIndex: function(leftOffset) {\n\t\tthis.ensureBuilt();\n\n\t\tvar lefts = this.lefts;\n\t\tvar rights = this.rights;\n\t\tvar len = lefts.length;\n\t\tvar i;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (leftOffset >= lefts[i] && leftOffset < rights[i]) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Given a top offset (from document top), returns the index of the el that it vertically intersects.\n\t// If no intersection is made, returns undefined.\n\tgetVerticalIndex: function(topOffset) {\n\t\tthis.ensureBuilt();\n\n\t\tvar tops = this.tops;\n\t\tvar bottoms = this.bottoms;\n\t\tvar len = tops.length;\n\t\tvar i;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (topOffset >= tops[i] && topOffset < bottoms[i]) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Gets the left offset (from document left) of the element at the given index\n\tgetLeftOffset: function(leftIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.lefts[leftIndex];\n\t},\n\n\n\t// Gets the left position (from offsetParent left) of the element at the given index\n\tgetLeftPosition: function(leftIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.lefts[leftIndex] - this.origin.left;\n\t},\n\n\n\t// Gets the right offset (from document left) of the element at the given index.\n\t// This value is NOT relative to the document's right edge, like the CSS concept of \"right\" would be.\n\tgetRightOffset: function(leftIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.rights[leftIndex];\n\t},\n\n\n\t// Gets the right position (from offsetParent left) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's right edge, like the CSS concept of \"right\" would be.\n\tgetRightPosition: function(leftIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.rights[leftIndex] - this.origin.left;\n\t},\n\n\n\t// Gets the width of the element at the given index\n\tgetWidth: function(leftIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.rights[leftIndex] - this.lefts[leftIndex];\n\t},\n\n\n\t// Gets the top offset (from document top) of the element at the given index\n\tgetTopOffset: function(topIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.tops[topIndex];\n\t},\n\n\n\t// Gets the top position (from offsetParent top) of the element at the given position\n\tgetTopPosition: function(topIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.tops[topIndex] - this.origin.top;\n\t},\n\n\t// Gets the bottom offset (from the document top) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n\tgetBottomOffset: function(topIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.bottoms[topIndex];\n\t},\n\n\n\t// Gets the bottom position (from the offsetParent top) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n\tgetBottomPosition: function(topIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.bottoms[topIndex] - this.origin.top;\n\t},\n\n\n\t// Gets the height of the element at the given index\n\tgetHeight: function(topIndex) {\n\t\tthis.ensureBuilt();\n\t\treturn this.bottoms[topIndex] - this.tops[topIndex];\n\t},\n\n\n\t// Bounding Rect\n\t// TODO: decouple this from CoordCache\n\n\t// Compute and return what the elements' bounding rectangle is, from the user's perspective.\n\t// Right now, only returns a rectangle if constrained by an overflow:scroll element.\n\t// Returns null if there are no elements\n\tqueryBoundingRect: function() {\n\t\tvar scrollParentEl;\n\n\t\tif (this.els.length > 0) {\n\t\t\tscrollParentEl = getScrollParent(this.els.eq(0));\n\n\t\t\tif (!scrollParentEl.is(document)) {\n\t\t\t\treturn getClientRect(scrollParentEl);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\tisPointInBounds: function(leftOffset, topOffset) {\n\t\treturn this.isLeftInBounds(leftOffset) && this.isTopInBounds(topOffset);\n\t},\n\n\tisLeftInBounds: function(leftOffset) {\n\t\treturn !this.boundingRect || (leftOffset >= this.boundingRect.left && leftOffset < this.boundingRect.right);\n\t},\n\n\tisTopInBounds: function(topOffset) {\n\t\treturn !this.boundingRect || (topOffset >= this.boundingRect.top && topOffset < this.boundingRect.bottom);\n\t}\n\n});\n\n;;\n\n/* Tracks a drag's mouse movement, firing various handlers\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: use Emitter\n\nvar DragListener = FC.DragListener = Class.extend(ListenerMixin, MouseIgnorerMixin, {\n\n\toptions: null,\n\tsubjectEl: null,\n\n\t// coordinates of the initial mousedown\n\toriginX: null,\n\toriginY: null,\n\n\t// the wrapping element that scrolls, or MIGHT scroll if there's overflow.\n\t// TODO: do this for wrappers that have overflow:hidden as well.\n\tscrollEl: null,\n\n\tisInteracting: false,\n\tisDistanceSurpassed: false,\n\tisDelayEnded: false,\n\tisDragging: false,\n\tisTouch: false,\n\n\tdelay: null,\n\tdelayTimeoutId: null,\n\tminDistance: null,\n\n\thandleTouchScrollProxy: null, // calls handleTouchScroll, always bound to `this`\n\n\n\tconstructor: function(options) {\n\t\tthis.options = options || {};\n\t\tthis.handleTouchScrollProxy = proxy(this, 'handleTouchScroll');\n\t\tthis.initMouseIgnoring(500);\n\t},\n\n\n\t// Interaction (high-level)\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tstartInteraction: function(ev, extraOptions) {\n\t\tvar isTouch = getEvIsTouch(ev);\n\n\t\tif (ev.type === 'mousedown') {\n\t\t\tif (this.isIgnoringMouse) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (!isPrimaryMouseButton(ev)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tev.preventDefault(); // prevents native selection in most browsers\n\t\t\t}\n\t\t}\n\n\t\tif (!this.isInteracting) {\n\n\t\t\t// process options\n\t\t\textraOptions = extraOptions || {};\n\t\t\tthis.delay = firstDefined(extraOptions.delay, this.options.delay, 0);\n\t\t\tthis.minDistance = firstDefined(extraOptions.distance, this.options.distance, 0);\n\t\t\tthis.subjectEl = this.options.subjectEl;\n\n\t\t\tthis.isInteracting = true;\n\t\t\tthis.isTouch = isTouch;\n\t\t\tthis.isDelayEnded = false;\n\t\t\tthis.isDistanceSurpassed = false;\n\n\t\t\tthis.originX = getEvX(ev);\n\t\t\tthis.originY = getEvY(ev);\n\t\t\tthis.scrollEl = getScrollParent($(ev.target));\n\n\t\t\tthis.bindHandlers();\n\t\t\tthis.initAutoScroll();\n\t\t\tthis.handleInteractionStart(ev);\n\t\t\tthis.startDelay(ev);\n\n\t\t\tif (!this.minDistance) {\n\t\t\t\tthis.handleDistanceSurpassed(ev);\n\t\t\t}\n\t\t}\n\t},\n\n\n\thandleInteractionStart: function(ev) {\n\t\tthis.trigger('interactionStart', ev);\n\t},\n\n\n\tendInteraction: function(ev, isCancelled) {\n\t\tif (this.isInteracting) {\n\t\t\tthis.endDrag(ev);\n\n\t\t\tif (this.delayTimeoutId) {\n\t\t\t\tclearTimeout(this.delayTimeoutId);\n\t\t\t\tthis.delayTimeoutId = null;\n\t\t\t}\n\n\t\t\tthis.destroyAutoScroll();\n\t\t\tthis.unbindHandlers();\n\n\t\t\tthis.isInteracting = false;\n\t\t\tthis.handleInteractionEnd(ev, isCancelled);\n\n\t\t\t// a touchstart+touchend on the same element will result in the following addition simulated events:\n\t\t\t// mouseover + mouseout + click\n\t\t\t// let's ignore these bogus events\n\t\t\tif (this.isTouch) {\n\t\t\t\tthis.tempIgnoreMouse();\n\t\t\t}\n\t\t}\n\t},\n\n\n\thandleInteractionEnd: function(ev, isCancelled) {\n\t\tthis.trigger('interactionEnd', ev, isCancelled || false);\n\t},\n\n\n\t// Binding To DOM\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tbindHandlers: function() {\n\t\tvar _this = this;\n\t\tvar touchStartIgnores = 1;\n\n\t\tif (this.isTouch) {\n\t\t\tthis.listenTo($(document), {\n\t\t\t\ttouchmove: this.handleTouchMove,\n\t\t\t\ttouchend: this.endInteraction,\n\t\t\t\ttouchcancel: this.endInteraction,\n\n\t\t\t\t// Sometimes touchend doesn't fire\n\t\t\t\t// (can't figure out why. touchcancel doesn't fire either. has to do with scrolling?)\n\t\t\t\t// If another touchstart happens, we know it's bogus, so cancel the drag.\n\t\t\t\t// touchend will continue to be broken until user does a shorttap/scroll, but this is best we can do.\n\t\t\t\ttouchstart: function(ev) {\n\t\t\t\t\tif (touchStartIgnores) { // bindHandlers is called from within a touchstart,\n\t\t\t\t\t\ttouchStartIgnores--; // and we don't want this to fire immediately, so ignore.\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t_this.endInteraction(ev, true); // isCancelled=true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// listen to ALL scroll actions on the page\n\t\t\tif (\n\t\t\t\t!bindAnyScroll(this.handleTouchScrollProxy) && // hopefully this works and short-circuits the rest\n\t\t\t\tthis.scrollEl // otherwise, attach a single handler to this\n\t\t\t) {\n\t\t\t\tthis.listenTo(this.scrollEl, 'scroll', this.handleTouchScroll);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.listenTo($(document), {\n\t\t\t\tmousemove: this.handleMouseMove,\n\t\t\t\tmouseup: this.endInteraction\n\t\t\t});\n\t\t}\n\n\t\tthis.listenTo($(document), {\n\t\t\tselectstart: preventDefault, // don't allow selection while dragging\n\t\t\tcontextmenu: preventDefault // long taps would open menu on Chrome dev tools\n\t\t});\n\t},\n\n\n\tunbindHandlers: function() {\n\t\tthis.stopListeningTo($(document));\n\n\t\t// unbind scroll listening\n\t\tunbindAnyScroll(this.handleTouchScrollProxy);\n\t\tif (this.scrollEl) {\n\t\t\tthis.stopListeningTo(this.scrollEl, 'scroll');\n\t\t}\n\t},\n\n\n\t// Drag (high-level)\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// extraOptions ignored if drag already started\n\tstartDrag: function(ev, extraOptions) {\n\t\tthis.startInteraction(ev, extraOptions); // ensure interaction began\n\n\t\tif (!this.isDragging) {\n\t\t\tthis.isDragging = true;\n\t\t\tthis.handleDragStart(ev);\n\t\t}\n\t},\n\n\n\thandleDragStart: function(ev) {\n\t\tthis.trigger('dragStart', ev);\n\t},\n\n\n\thandleMove: function(ev) {\n\t\tvar dx = getEvX(ev) - this.originX;\n\t\tvar dy = getEvY(ev) - this.originY;\n\t\tvar minDistance = this.minDistance;\n\t\tvar distanceSq; // current distance from the origin, squared\n\n\t\tif (!this.isDistanceSurpassed) {\n\t\t\tdistanceSq = dx * dx + dy * dy;\n\t\t\tif (distanceSq >= minDistance * minDistance) { // use pythagorean theorem\n\t\t\t\tthis.handleDistanceSurpassed(ev);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDragging) {\n\t\t\tthis.handleDrag(dx, dy, ev);\n\t\t}\n\t},\n\n\n\t// Called while the mouse is being moved and when we know a legitimate drag is taking place\n\thandleDrag: function(dx, dy, ev) {\n\t\tthis.trigger('drag', dx, dy, ev);\n\t\tthis.updateAutoScroll(ev); // will possibly cause scrolling\n\t},\n\n\n\tendDrag: function(ev) {\n\t\tif (this.isDragging) {\n\t\t\tthis.isDragging = false;\n\t\t\tthis.handleDragEnd(ev);\n\t\t}\n\t},\n\n\n\thandleDragEnd: function(ev) {\n\t\tthis.trigger('dragEnd', ev);\n\t},\n\n\n\t// Delay\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tstartDelay: function(initialEv) {\n\t\tvar _this = this;\n\n\t\tif (this.delay) {\n\t\t\tthis.delayTimeoutId = setTimeout(function() {\n\t\t\t\t_this.handleDelayEnd(initialEv);\n\t\t\t}, this.delay);\n\t\t}\n\t\telse {\n\t\t\tthis.handleDelayEnd(initialEv);\n\t\t}\n\t},\n\n\n\thandleDelayEnd: function(initialEv) {\n\t\tthis.isDelayEnded = true;\n\n\t\tif (this.isDistanceSurpassed) {\n\t\t\tthis.startDrag(initialEv);\n\t\t}\n\t},\n\n\n\t// Distance\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\thandleDistanceSurpassed: function(ev) {\n\t\tthis.isDistanceSurpassed = true;\n\n\t\tif (this.isDelayEnded) {\n\t\t\tthis.startDrag(ev);\n\t\t}\n\t},\n\n\n\t// Mouse / Touch\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\thandleTouchMove: function(ev) {\n\t\t// prevent inertia and touchmove-scrolling while dragging\n\t\tif (this.isDragging) {\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\tthis.handleMove(ev);\n\t},\n\n\n\thandleMouseMove: function(ev) {\n\t\tthis.handleMove(ev);\n\t},\n\n\n\t// Scrolling (unrelated to auto-scroll)\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\thandleTouchScroll: function(ev) {\n\t\t// if the drag is being initiated by touch, but a scroll happens before\n\t\t// the drag-initiating delay is over, cancel the drag\n\t\tif (!this.isDragging) {\n\t\t\tthis.endInteraction(ev, true); // isCancelled=true\n\t\t}\n\t},\n\n\n\t// Utils\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// Triggers a callback. Calls a function in the option hash of the same name.\n\t// Arguments beyond the first `name` are forwarded on.\n\ttrigger: function(name) {\n\t\tif (this.options[name]) {\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\t\t// makes _methods callable by event name. TODO: kill this\n\t\tif (this['_' + name]) {\n\t\t\tthis['_' + name].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\t}\n\n\n});\n\n;;\n/*\nthis.scrollEl is set in DragListener\n*/\nDragListener.mixin({\n\n\tisAutoScroll: false,\n\n\tscrollBounds: null, // { top, bottom, left, right }\n\tscrollTopVel: null, // pixels per second\n\tscrollLeftVel: null, // pixels per second\n\tscrollIntervalId: null, // ID of setTimeout for scrolling animation loop\n\n\t// defaults\n\tscrollSensitivity: 30, // pixels from edge for scrolling to start\n\tscrollSpeed: 200, // pixels per second, at maximum speed\n\tscrollIntervalMs: 50, // millisecond wait between scroll increment\n\n\n\tinitAutoScroll: function() {\n\t\tvar scrollEl = this.scrollEl;\n\n\t\tthis.isAutoScroll =\n\t\t\tthis.options.scroll &&\n\t\t\tscrollEl &&\n\t\t\t!scrollEl.is(window) &&\n\t\t\t!scrollEl.is(document);\n\n\t\tif (this.isAutoScroll) {\n\t\t\t// debounce makes sure rapid calls don't happen\n\t\t\tthis.listenTo(scrollEl, 'scroll', debounce(this.handleDebouncedScroll, 100));\n\t\t}\n\t},\n\n\n\tdestroyAutoScroll: function() {\n\t\tthis.endAutoScroll(); // kill any animation loop\n\n\t\t// remove the scroll handler if there is a scrollEl\n\t\tif (this.isAutoScroll) {\n\t\t\tthis.stopListeningTo(this.scrollEl, 'scroll'); // will probably get removed by unbindHandlers too :(\n\t\t}\n\t},\n\n\n\t// Computes and stores the bounding rectangle of scrollEl\n\tcomputeScrollBounds: function() {\n\t\tif (this.isAutoScroll) {\n\t\t\tthis.scrollBounds = getOuterRect(this.scrollEl);\n\t\t\t// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars\n\t\t}\n\t},\n\n\n\t// Called when the dragging is in progress and scrolling should be updated\n\tupdateAutoScroll: function(ev) {\n\t\tvar sensitivity = this.scrollSensitivity;\n\t\tvar bounds = this.scrollBounds;\n\t\tvar topCloseness, bottomCloseness;\n\t\tvar leftCloseness, rightCloseness;\n\t\tvar topVel = 0;\n\t\tvar leftVel = 0;\n\n\t\tif (bounds) { // only scroll if scrollEl exists\n\n\t\t\t// compute closeness to edges. valid range is from 0.0 - 1.0\n\t\t\ttopCloseness = (sensitivity - (getEvY(ev) - bounds.top)) / sensitivity;\n\t\t\tbottomCloseness = (sensitivity - (bounds.bottom - getEvY(ev))) / sensitivity;\n\t\t\tleftCloseness = (sensitivity - (getEvX(ev) - bounds.left)) / sensitivity;\n\t\t\trightCloseness = (sensitivity - (bounds.right - getEvX(ev))) / sensitivity;\n\n\t\t\t// translate vertical closeness into velocity.\n\t\t\t// mouse must be completely in bounds for velocity to happen.\n\t\t\tif (topCloseness >= 0 && topCloseness <= 1) {\n\t\t\t\ttopVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up\n\t\t\t}\n\t\t\telse if (bottomCloseness >= 0 && bottomCloseness <= 1) {\n\t\t\t\ttopVel = bottomCloseness * this.scrollSpeed;\n\t\t\t}\n\n\t\t\t// translate horizontal closeness into velocity\n\t\t\tif (leftCloseness >= 0 && leftCloseness <= 1) {\n\t\t\t\tleftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left\n\t\t\t}\n\t\t\telse if (rightCloseness >= 0 && rightCloseness <= 1) {\n\t\t\t\tleftVel = rightCloseness * this.scrollSpeed;\n\t\t\t}\n\t\t}\n\n\t\tthis.setScrollVel(topVel, leftVel);\n\t},\n\n\n\t// Sets the speed-of-scrolling for the scrollEl\n\tsetScrollVel: function(topVel, leftVel) {\n\n\t\tthis.scrollTopVel = topVel;\n\t\tthis.scrollLeftVel = leftVel;\n\n\t\tthis.constrainScrollVel(); // massages into realistic values\n\n\t\t// if there is non-zero velocity, and an animation loop hasn't already started, then START\n\t\tif ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {\n\t\t\tthis.scrollIntervalId = setInterval(\n\t\t\t\tproxy(this, 'scrollIntervalFunc'), // scope to `this`\n\t\t\t\tthis.scrollIntervalMs\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way\n\tconstrainScrollVel: function() {\n\t\tvar el = this.scrollEl;\n\n\t\tif (this.scrollTopVel < 0) { // scrolling up?\n\t\t\tif (el.scrollTop() <= 0) { // already scrolled all the way up?\n\t\t\t\tthis.scrollTopVel = 0;\n\t\t\t}\n\t\t}\n\t\telse if (this.scrollTopVel > 0) { // scrolling down?\n\t\t\tif (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?\n\t\t\t\tthis.scrollTopVel = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (this.scrollLeftVel < 0) { // scrolling left?\n\t\t\tif (el.scrollLeft() <= 0) { // already scrolled all the left?\n\t\t\t\tthis.scrollLeftVel = 0;\n\t\t\t}\n\t\t}\n\t\telse if (this.scrollLeftVel > 0) { // scrolling right?\n\t\t\tif (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?\n\t\t\t\tthis.scrollLeftVel = 0;\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// This function gets called during every iteration of the scrolling animation loop\n\tscrollIntervalFunc: function() {\n\t\tvar el = this.scrollEl;\n\t\tvar frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by\n\n\t\t// change the value of scrollEl's scroll\n\t\tif (this.scrollTopVel) {\n\t\t\tel.scrollTop(el.scrollTop() + this.scrollTopVel * frac);\n\t\t}\n\t\tif (this.scrollLeftVel) {\n\t\t\tel.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);\n\t\t}\n\n\t\tthis.constrainScrollVel(); // since the scroll values changed, recompute the velocities\n\n\t\t// if scrolled all the way, which causes the vels to be zero, stop the animation loop\n\t\tif (!this.scrollTopVel && !this.scrollLeftVel) {\n\t\t\tthis.endAutoScroll();\n\t\t}\n\t},\n\n\n\t// Kills any existing scrolling animation loop\n\tendAutoScroll: function() {\n\t\tif (this.scrollIntervalId) {\n\t\t\tclearInterval(this.scrollIntervalId);\n\t\t\tthis.scrollIntervalId = null;\n\n\t\t\tthis.handleScrollEnd();\n\t\t}\n\t},\n\n\n\t// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)\n\thandleDebouncedScroll: function() {\n\t\t// recompute all coordinates, but *only* if this is *not* part of our scrolling animation\n\t\tif (!this.scrollIntervalId) {\n\t\t\tthis.handleScrollEnd();\n\t\t}\n\t},\n\n\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n\thandleScrollEnd: function() {\n\t}\n\n});\n;;\n\n/* Tracks mouse movements over a component and raises events about which hit the mouse is over.\n------------------------------------------------------------------------------------------------------------------------\noptions:\n- subjectEl\n- subjectCenter\n*/\n\nvar HitDragListener = DragListener.extend({\n\n\tcomponent: null, // converts coordinates to hits\n\t\t// methods: prepareHits, releaseHits, queryHit\n\n\torigHit: null, // the hit the mouse was over when listening started\n\thit: null, // the hit the mouse is over\n\tcoordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions\n\n\n\tconstructor: function(component, options) {\n\t\tDragListener.call(this, options); // call the super-constructor\n\n\t\tthis.component = component;\n\t},\n\n\n\t// Called when drag listening starts (but a real drag has not necessarily began).\n\t// ev might be undefined if dragging was started manually.\n\thandleInteractionStart: function(ev) {\n\t\tvar subjectEl = this.subjectEl;\n\t\tvar subjectRect;\n\t\tvar origPoint;\n\t\tvar point;\n\n\t\tthis.computeCoords();\n\n\t\tif (ev) {\n\t\t\torigPoint = { left: getEvX(ev), top: getEvY(ev) };\n\t\t\tpoint = origPoint;\n\n\t\t\t// constrain the point to bounds of the element being dragged\n\t\t\tif (subjectEl) {\n\t\t\t\tsubjectRect = getOuterRect(subjectEl); // used for centering as well\n\t\t\t\tpoint = constrainPoint(point, subjectRect);\n\t\t\t}\n\n\t\t\tthis.origHit = this.queryHit(point.left, point.top);\n\n\t\t\t// treat the center of the subject as the collision point?\n\t\t\tif (subjectEl && this.options.subjectCenter) {\n\n\t\t\t\t// only consider the area the subject overlaps the hit. best for large subjects.\n\t\t\t\t// TODO: skip this if hit didn't supply left/right/top/bottom\n\t\t\t\tif (this.origHit) {\n\t\t\t\t\tsubjectRect = intersectRects(this.origHit, subjectRect) ||\n\t\t\t\t\t\tsubjectRect; // in case there is no intersection\n\t\t\t\t}\n\n\t\t\t\tpoint = getRectCenter(subjectRect);\n\t\t\t}\n\n\t\t\tthis.coordAdjust = diffPoints(point, origPoint); // point - origPoint\n\t\t}\n\t\telse {\n\t\t\tthis.origHit = null;\n\t\t\tthis.coordAdjust = null;\n\t\t}\n\n\t\t// call the super-method. do it after origHit has been computed\n\t\tDragListener.prototype.handleInteractionStart.apply(this, arguments);\n\t},\n\n\n\t// Recomputes the drag-critical positions of elements\n\tcomputeCoords: function() {\n\t\tthis.component.prepareHits();\n\t\tthis.computeScrollBounds(); // why is this here??????\n\t},\n\n\n\t// Called when the actual drag has started\n\thandleDragStart: function(ev) {\n\t\tvar hit;\n\n\t\tDragListener.prototype.handleDragStart.apply(this, arguments); // call the super-method\n\n\t\t// might be different from this.origHit if the min-distance is large\n\t\thit = this.queryHit(getEvX(ev), getEvY(ev));\n\n\t\t// report the initial hit the mouse is over\n\t\t// especially important if no min-distance and drag starts immediately\n\t\tif (hit) {\n\t\t\tthis.handleHitOver(hit);\n\t\t}\n\t},\n\n\n\t// Called when the drag moves\n\thandleDrag: function(dx, dy, ev) {\n\t\tvar hit;\n\n\t\tDragListener.prototype.handleDrag.apply(this, arguments); // call the super-method\n\n\t\thit = this.queryHit(getEvX(ev), getEvY(ev));\n\n\t\tif (!isHitsEqual(hit, this.hit)) { // a different hit than before?\n\t\t\tif (this.hit) {\n\t\t\t\tthis.handleHitOut();\n\t\t\t}\n\t\t\tif (hit) {\n\t\t\t\tthis.handleHitOver(hit);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Called when dragging has been stopped\n\thandleDragEnd: function() {\n\t\tthis.handleHitDone();\n\t\tDragListener.prototype.handleDragEnd.apply(this, arguments); // call the super-method\n\t},\n\n\n\t// Called when a the mouse has just moved over a new hit\n\thandleHitOver: function(hit) {\n\t\tvar isOrig = isHitsEqual(hit, this.origHit);\n\n\t\tthis.hit = hit;\n\n\t\tthis.trigger('hitOver', this.hit, isOrig, this.origHit);\n\t},\n\n\n\t// Called when the mouse has just moved out of a hit\n\thandleHitOut: function() {\n\t\tif (this.hit) {\n\t\t\tthis.trigger('hitOut', this.hit);\n\t\t\tthis.handleHitDone();\n\t\t\tthis.hit = null;\n\t\t}\n\t},\n\n\n\t// Called after a hitOut. Also called before a dragStop\n\thandleHitDone: function() {\n\t\tif (this.hit) {\n\t\t\tthis.trigger('hitDone', this.hit);\n\t\t}\n\t},\n\n\n\t// Called when the interaction ends, whether there was a real drag or not\n\thandleInteractionEnd: function() {\n\t\tDragListener.prototype.handleInteractionEnd.apply(this, arguments); // call the super-method\n\n\t\tthis.origHit = null;\n\t\tthis.hit = null;\n\n\t\tthis.component.releaseHits();\n\t},\n\n\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n\thandleScrollEnd: function() {\n\t\tDragListener.prototype.handleScrollEnd.apply(this, arguments); // call the super-method\n\n\t\tthis.computeCoords(); // hits' absolute positions will be in new places. recompute\n\t},\n\n\n\t// Gets the hit underneath the coordinates for the given mouse event\n\tqueryHit: function(left, top) {\n\n\t\tif (this.coordAdjust) {\n\t\t\tleft += this.coordAdjust.left;\n\t\t\ttop += this.coordAdjust.top;\n\t\t}\n\n\t\treturn this.component.queryHit(left, top);\n\t}\n\n});\n\n\n// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.\n// Two null values will be considered equal, as two \"out of the component\" states are the same.\nfunction isHitsEqual(hit0, hit1) {\n\n\tif (!hit0 && !hit1) {\n\t\treturn true;\n\t}\n\n\tif (hit0 && hit1) {\n\t\treturn hit0.component === hit1.component &&\n\t\t\tisHitPropsWithin(hit0, hit1) &&\n\t\t\tisHitPropsWithin(hit1, hit0); // ensures all props are identical\n\t}\n\n\treturn false;\n}\n\n\n// Returns true if all of subHit's non-standard properties are within superHit\nfunction isHitPropsWithin(subHit, superHit) {\n\tfor (var propName in subHit) {\n\t\tif (!/^(component|left|right|top|bottom)$/.test(propName)) {\n\t\t\tif (subHit[propName] !== superHit[propName]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n;;\n\n/* Creates a clone of an element and lets it track the mouse as it moves\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar MouseFollower = Class.extend(ListenerMixin, {\n\n\toptions: null,\n\n\tsourceEl: null, // the element that will be cloned and made to look like it is dragging\n\tel: null, // the clone of `sourceEl` that will track the mouse\n\tparentEl: null, // the element that `el` (the clone) will be attached to\n\n\t// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl\n\ttop0: null,\n\tleft0: null,\n\n\t// the absolute coordinates of the initiating touch/mouse action\n\ty0: null,\n\tx0: null,\n\n\t// the number of pixels the mouse has moved from its initial position\n\ttopDelta: null,\n\tleftDelta: null,\n\n\tisFollowing: false,\n\tisHidden: false,\n\tisAnimating: false, // doing the revert animation?\n\n\tconstructor: function(sourceEl, options) {\n\t\tthis.options = options = options || {};\n\t\tthis.sourceEl = sourceEl;\n\t\tthis.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent\n\t},\n\n\n\t// Causes the element to start following the mouse\n\tstart: function(ev) {\n\t\tif (!this.isFollowing) {\n\t\t\tthis.isFollowing = true;\n\n\t\t\tthis.y0 = getEvY(ev);\n\t\t\tthis.x0 = getEvX(ev);\n\t\t\tthis.topDelta = 0;\n\t\t\tthis.leftDelta = 0;\n\n\t\t\tif (!this.isHidden) {\n\t\t\t\tthis.updatePosition();\n\t\t\t}\n\n\t\t\tif (getEvIsTouch(ev)) {\n\t\t\t\tthis.listenTo($(document), 'touchmove', this.handleMove);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.listenTo($(document), 'mousemove', this.handleMove);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.\n\t// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.\n\tstop: function(shouldRevert, callback) {\n\t\tvar _this = this;\n\t\tvar revertDuration = this.options.revertDuration;\n\n\t\tfunction complete() { // might be called by .animate(), which might change `this` context\n\t\t\t_this.isAnimating = false;\n\t\t\t_this.removeElement();\n\n\t\t\t_this.top0 = _this.left0 = null; // reset state for future updatePosition calls\n\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\n\t\tif (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time\n\t\t\tthis.isFollowing = false;\n\n\t\t\tthis.stopListeningTo($(document));\n\n\t\t\tif (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?\n\t\t\t\tthis.isAnimating = true;\n\t\t\t\tthis.el.animate({\n\t\t\t\t\ttop: this.top0,\n\t\t\t\t\tleft: this.left0\n\t\t\t\t}, {\n\t\t\t\t\tduration: revertDuration,\n\t\t\t\t\tcomplete: complete\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcomplete();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Gets the tracking element. Create it if necessary\n\tgetEl: function() {\n\t\tvar el = this.el;\n\n\t\tif (!el) {\n\t\t\tel = this.el = this.sourceEl.clone()\n\t\t\t\t.addClass(this.options.additionalClass || '')\n\t\t\t\t.css({\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tvisibility: '', // in case original element was hidden (commonly through hideEvents())\n\t\t\t\t\tdisplay: this.isHidden ? 'none' : '', // for when initially hidden\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tright: 'auto', // erase and set width instead\n\t\t\t\t\tbottom: 'auto', // erase and set height instead\n\t\t\t\t\twidth: this.sourceEl.width(), // explicit height in case there was a 'right' value\n\t\t\t\t\theight: this.sourceEl.height(), // explicit width in case there was a 'bottom' value\n\t\t\t\t\topacity: this.options.opacity || '',\n\t\t\t\t\tzIndex: this.options.zIndex\n\t\t\t\t});\n\n\t\t\t// we don't want long taps or any mouse interaction causing selection/menus.\n\t\t\t// would use preventSelection(), but that prevents selectstart, causing problems.\n\t\t\tel.addClass('fc-unselectable');\n\n\t\t\tel.appendTo(this.parentEl);\n\t\t}\n\n\t\treturn el;\n\t},\n\n\n\t// Removes the tracking element if it has already been created\n\tremoveElement: function() {\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t\tthis.el = null;\n\t\t}\n\t},\n\n\n\t// Update the CSS position of the tracking element\n\tupdatePosition: function() {\n\t\tvar sourceOffset;\n\t\tvar origin;\n\n\t\tthis.getEl(); // ensure this.el\n\n\t\t// make sure origin info was computed\n\t\tif (this.top0 === null) {\n\t\t\tsourceOffset = this.sourceEl.offset();\n\t\t\torigin = this.el.offsetParent().offset();\n\t\t\tthis.top0 = sourceOffset.top - origin.top;\n\t\t\tthis.left0 = sourceOffset.left - origin.left;\n\t\t}\n\n\t\tthis.el.css({\n\t\t\ttop: this.top0 + this.topDelta,\n\t\t\tleft: this.left0 + this.leftDelta\n\t\t});\n\t},\n\n\n\t// Gets called when the user moves the mouse\n\thandleMove: function(ev) {\n\t\tthis.topDelta = getEvY(ev) - this.y0;\n\t\tthis.leftDelta = getEvX(ev) - this.x0;\n\n\t\tif (!this.isHidden) {\n\t\t\tthis.updatePosition();\n\t\t}\n\t},\n\n\n\t// Temporarily makes the tracking element invisible. Can be called before following starts\n\thide: function() {\n\t\tif (!this.isHidden) {\n\t\t\tthis.isHidden = true;\n\t\t\tif (this.el) {\n\t\t\t\tthis.el.hide();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Show the tracking element after it has been temporarily hidden\n\tshow: function() {\n\t\tif (this.isHidden) {\n\t\t\tthis.isHidden = false;\n\t\t\tthis.updatePosition();\n\t\t\tthis.getEl().show();\n\t\t}\n\t}\n\n});\n\n;;\n\n/* An abstract class comprised of a \"grid\" of areas that each represent a specific datetime\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar Grid = FC.Grid = Class.extend(ListenerMixin, MouseIgnorerMixin, {\n\n\t// self-config, overridable by subclasses\n\thasDayInteractions: true, // can user click/select ranges of time?\n\n\tview: null, // a View object\n\tisRTL: null, // shortcut to the view's isRTL option\n\n\tstart: null,\n\tend: null,\n\n\tel: null, // the containing element\n\telsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.\n\n\t// derived from options\n\teventTimeFormat: null,\n\tdisplayEventTime: null,\n\tdisplayEventEnd: null,\n\n\tminResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration\n\n\t// if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity\n\t// of the date areas. if not defined, assumes to be day and time granularity.\n\t// TODO: port isTimeScale into same system?\n\tlargeUnit: null,\n\n\tdayDragListener: null,\n\tsegDragListener: null,\n\tsegResizeListener: null,\n\texternalDragListener: null,\n\n\n\tconstructor: function(view) {\n\t\tthis.view = view;\n\t\tthis.isRTL = view.opt('isRTL');\n\t\tthis.elsByFill = {};\n\n\t\tthis.dayDragListener = this.buildDayDragListener();\n\t\tthis.initMouseIgnoring();\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('smallTimeFormat');\n\t},\n\n\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.\n\t// Only applies to non-all-day events.\n\tcomputeDisplayEventTime: function() {\n\t\treturn true;\n\t},\n\n\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'\n\tcomputeDisplayEventEnd: function() {\n\t\treturn true;\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Tells the grid about what period of time to display.\n\t// Any date-related internal data should be generated.\n\tsetRange: function(range) {\n\t\tthis.start = range.start.clone();\n\t\tthis.end = range.end.clone();\n\n\t\tthis.rangeUpdated();\n\t\tthis.processRangeOptions();\n\t},\n\n\n\t// Called when internal variables that rely on the range should be updated\n\trangeUpdated: function() {\n\t},\n\n\n\t// Updates values that rely on options and also relate to range\n\tprocessRangeOptions: function() {\n\t\tvar view = this.view;\n\t\tvar displayEventTime;\n\t\tvar displayEventEnd;\n\n\t\tthis.eventTimeFormat =\n\t\t\tview.opt('eventTimeFormat') ||\n\t\t\tview.opt('timeFormat') || // deprecated\n\t\t\tthis.computeEventTimeFormat();\n\n\t\tdisplayEventTime = view.opt('displayEventTime');\n\t\tif (displayEventTime == null) {\n\t\t\tdisplayEventTime = this.computeDisplayEventTime(); // might be based off of range\n\t\t}\n\n\t\tdisplayEventEnd = view.opt('displayEventEnd');\n\t\tif (displayEventEnd == null) {\n\t\t\tdisplayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n\t\t}\n\n\t\tthis.displayEventTime = displayEventTime;\n\t\tthis.displayEventEnd = displayEventEnd;\n\t},\n\n\n\t// Converts a span (has unzoned start/end and any other grid-specific location information)\n\t// into an array of segments (pieces of events whose format is decided by the grid).\n\tspanToSegs: function(span) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Diffs the two dates, returning a duration, based on granularity of the grid\n\t// TODO: port isTimeScale into this system?\n\tdiffDates: function(a, b) {\n\t\tif (this.largeUnit) {\n\t\t\treturn diffByUnit(a, b, this.largeUnit);\n\t\t}\n\t\telse {\n\t\t\treturn diffDayTime(a, b);\n\t\t}\n\t},\n\n\n\t/* Hit Area\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit\n\tprepareHits: function() {\n\t},\n\n\n\t// Called when queryHit calls have subsided. Good place to clear any coordinate caches.\n\treleaseHits: function() {\n\t},\n\n\n\t// Given coordinates from the topleft of the document, return data about the date-related area underneath.\n\t// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).\n\t// Must have a `grid` property, a reference to this current grid. TODO: avoid this\n\t// The returned object will be processed by getHitSpan and getHitEl.\n\tqueryHit: function(leftOffset, topOffset) {\n\t},\n\n\n\t// Given position-level information about a date-related area within the grid,\n\t// should return an object with at least a start/end date. Can provide other information as well.\n\tgetHitSpan: function(hit) {\n\t},\n\n\n\t// Given position-level information about a date-related area within the grid,\n\t// should return a jQuery element that best represents it. passed to dayClick callback.\n\tgetHitEl: function(hit) {\n\t},\n\n\n\t/* Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the container element that the grid should render inside of.\n\t// Does other DOM-related initializations.\n\tsetElement: function(el) {\n\t\tthis.el = el;\n\n\t\tif (this.hasDayInteractions) {\n\t\t\tpreventSelection(el);\n\n\t\t\tthis.bindDayHandler('touchstart', this.dayTouchStart);\n\t\t\tthis.bindDayHandler('mousedown', this.dayMousedown);\n\t\t}\n\n\t\t// attach event-element-related handlers. in Grid.events\n\t\t// same garbage collection note as above.\n\t\tthis.bindSegHandlers();\n\n\t\tthis.bindGlobalHandlers();\n\t},\n\n\n\tbindDayHandler: function(name, handler) {\n\t\tvar _this = this;\n\n\t\t// attach a handler to the grid's root element.\n\t\t// jQuery will take care of unregistering them when removeElement gets called.\n\t\tthis.el.on(name, function(ev) {\n\t\t\tif (\n\t\t\t\t!$(ev.target).is(\n\t\t\t\t\t_this.segSelector + ',' + // directly on an event element\n\t\t\t\t\t_this.segSelector + ' *,' + // within an event element\n\t\t\t\t\t'.fc-more,' + // a \"more..\" link\n\t\t\t\t\t'a[data-goto]' // a clickable nav link\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn handler.call(_this, ev);\n\t\t\t}\n\t\t});\n\t},\n\n\n\t// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.\n\t// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View\n\tremoveElement: function() {\n\t\tthis.unbindGlobalHandlers();\n\t\tthis.clearDragListeners();\n\n\t\tthis.el.remove();\n\n\t\t// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement\n\t},\n\n\n\t// Renders the basic structure of grid view before any content is rendered\n\trenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Renders the grid's date-related content (like areas that represent days/times).\n\t// Assumes setRange has already been called and the skeleton has already been rendered.\n\trenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders the grid's date-related content\n\tunrenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Handlers\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Binds DOM handlers to elements that reside outside the grid, such as the document\n\tbindGlobalHandlers: function() {\n\t\tthis.listenTo($(document), {\n\t\t\tdragstart: this.externalDragStart, // jqui\n\t\t\tsortstart: this.externalDragStart // jqui\n\t\t});\n\t},\n\n\n\t// Unbinds DOM handlers from elements that reside outside the grid\n\tunbindGlobalHandlers: function() {\n\t\tthis.stopListeningTo($(document));\n\t},\n\n\n\t// Process a mousedown on an element that represents a day. For day clicking and selecting.\n\tdayMousedown: function(ev) {\n\t\tif (!this.isIgnoringMouse) {\n\t\t\tthis.dayDragListener.startInteraction(ev, {\n\t\t\t\t//distance: 5, // needs more work if we want dayClick to fire correctly\n\t\t\t});\n\t\t}\n\t},\n\n\n\tdayTouchStart: function(ev) {\n\t\tvar view = this.view;\n\t\tvar selectLongPressDelay = view.opt('selectLongPressDelay');\n\n\t\t// HACK to prevent a user's clickaway for unselecting a range or an event\n\t\t// from causing a dayClick.\n\t\tif (view.isSelected || view.selectedEvent) {\n\t\t\tthis.tempIgnoreMouse();\n\t\t}\n\n\t\tif (selectLongPressDelay == null) {\n\t\t\tselectLongPressDelay = view.opt('longPressDelay'); // fallback\n\t\t}\n\n\t\tthis.dayDragListener.startInteraction(ev, {\n\t\t\tdelay: selectLongPressDelay\n\t\t});\n\t},\n\n\n\t// Creates a listener that tracks the user's drag across day elements.\n\t// For day clicking and selecting.\n\tbuildDayDragListener: function() {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar isSelectable = view.opt('selectable');\n\t\tvar dayClickHit; // null if invalid dayClick\n\t\tvar selectionSpan; // null if invalid selection\n\n\t\t// this listener tracks a mousedown on a day element, and a subsequent drag.\n\t\t// if the drag ends on the same day, it is a 'dayClick'.\n\t\t// if 'selectable' is enabled, this listener also detects selections.\n\t\tvar dragListener = new HitDragListener(this, {\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tinteractionStart: function() {\n\t\t\t\tdayClickHit = dragListener.origHit; // for dayClick, where no dragging happens\n\t\t\t\tselectionSpan = null;\n\t\t\t},\n\t\t\tdragStart: function() {\n\t\t\t\tview.unselect(); // since we could be rendering a new selection, we want to clear any old one\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\t\t\t\tif (origHit) { // click needs to have started on a hit\n\n\t\t\t\t\t// if user dragged to another cell at any point, it can no longer be a dayClick\n\t\t\t\t\tif (!isOrig) {\n\t\t\t\t\t\tdayClickHit = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isSelectable) {\n\t\t\t\t\t\tselectionSpan = _this.computeSelection(\n\t\t\t\t\t\t\t_this.getHitSpan(origHit),\n\t\t\t\t\t\t\t_this.getHitSpan(hit)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (selectionSpan) {\n\t\t\t\t\t\t\t_this.renderSelection(selectionSpan);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (selectionSpan === false) {\n\t\t\t\t\t\t\tdisableCursor();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits\n\t\t\t\tdayClickHit = null;\n\t\t\t\tselectionSpan = null;\n\t\t\t\t_this.unrenderSelection();\n\t\t\t},\n\t\t\thitDone: function() { // called after a hitOut OR before a dragEnd\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tinteractionEnd: function(ev, isCancelled) {\n\t\t\t\tif (!isCancelled) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tdayClickHit &&\n\t\t\t\t\t\t!_this.isIgnoringMouse // see hack in dayTouchStart\n\t\t\t\t\t) {\n\t\t\t\t\t\tview.triggerDayClick(\n\t\t\t\t\t\t\t_this.getHitSpan(dayClickHit),\n\t\t\t\t\t\t\t_this.getHitEl(dayClickHit),\n\t\t\t\t\t\t\tev\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (selectionSpan) {\n\t\t\t\t\t\t// the selection will already have been rendered. just report it\n\t\t\t\t\t\tview.reportSelection(selectionSpan, ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn dragListener;\n\t},\n\n\n\t// Kills all in-progress dragging.\n\t// Useful for when public API methods that result in re-rendering are invoked during a drag.\n\t// Also useful for when touch devices misbehave and don't fire their touchend.\n\tclearDragListeners: function() {\n\t\tthis.dayDragListener.endInteraction();\n\n\t\tif (this.segDragListener) {\n\t\t\tthis.segDragListener.endInteraction(); // will clear this.segDragListener\n\t\t}\n\t\tif (this.segResizeListener) {\n\t\t\tthis.segResizeListener.endInteraction(); // will clear this.segResizeListener\n\t\t}\n\t\tif (this.externalDragListener) {\n\t\t\tthis.externalDragListener.endInteraction(); // will clear this.externalDragListener\n\t\t}\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// TODO: should probably move this to Grid.events, like we did event dragging / resizing\n\n\n\t// Renders a mock event at the given event location, which contains zoned start/end properties.\n\t// Returns all mock event elements.\n\trenderEventLocationHelper: function(eventLocation, sourceSeg) {\n\t\tvar fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);\n\n\t\treturn this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering\n\t},\n\n\n\t// Builds a fake event given zoned event date properties and a segment is should be inspired from.\n\t// The range's end can be null, in which case the mock event that is rendered will have a null end time.\n\t// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.\n\tfabricateHelperEvent: function(eventLocation, sourceSeg) {\n\t\tvar fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible\n\n\t\tfakeEvent.start = eventLocation.start.clone();\n\t\tfakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;\n\t\tfakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates\n\t\tthis.view.calendar.normalizeEventDates(fakeEvent);\n\n\t\t// this extra className will be useful for differentiating real events from mock events in CSS\n\t\tfakeEvent.className = (fakeEvent.className || []).concat('fc-helper');\n\n\t\t// if something external is being dragged in, don't render a resizer\n\t\tif (!sourceSeg) {\n\t\t\tfakeEvent.editable = false;\n\t\t}\n\n\t\treturn fakeEvent;\n\t},\n\n\n\t// Renders a mock event. Given zoned event date properties.\n\t// Must return all mock event elements.\n\trenderHelper: function(eventLocation, sourceSeg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a mock event\n\tunrenderHelper: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.\n\t// Given a span (unzoned start/end and other misc data)\n\trenderSelection: function(span) {\n\t\tthis.renderHighlight(span);\n\t},\n\n\n\t// Unrenders any visual indications of a selection. Will unrender a highlight by default.\n\tunrenderSelection: function() {\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t// Given the first and last date-spans of a selection, returns another date-span object.\n\t// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().\n\t// Will return false if the selection is invalid and this should be indicated to the user.\n\t// Will return null/undefined if a selection invalid but no error should be reported.\n\tcomputeSelection: function(span0, span1) {\n\t\tvar span = this.computeSelectionSpan(span0, span1);\n\n\t\tif (span && !this.view.calendar.isSelectionSpanAllowed(span)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn span;\n\t},\n\n\n\t// Given two spans, must return the combination of the two.\n\t// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.\n\tcomputeSelectionSpan: function(span0, span1) {\n\t\tvar dates = [ span0.start, span0.end, span1.start, span1.end ];\n\n\t\tdates.sort(compareNumbers); // sorts chronologically. works with Moments\n\n\t\treturn { start: dates[0].clone(), end: dates[3].clone() };\n\t},\n\n\n\t/* Highlight\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)\n\trenderHighlight: function(span) {\n\t\tthis.renderFill('highlight', this.spanToSegs(span));\n\t},\n\n\n\t// Unrenders the emphasis on a date range\n\tunrenderHighlight: function() {\n\t\tthis.unrenderFill('highlight');\n\t},\n\n\n\t// Generates an array of classNames for rendering the highlight. Used by the fill system.\n\thighlightSegClasses: function() {\n\t\treturn [ 'fc-highlight' ];\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBusinessHours: function() {\n\t},\n\n\n\tunrenderBusinessHours: function() {\n\t},\n\n\n\t/* Now Indicator\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tgetNowIndicatorUnit: function() {\n\t},\n\n\n\trenderNowIndicator: function(date) {\n\t},\n\n\n\tunrenderNowIndicator: function() {\n\t},\n\n\n\t/* Fill System (highlight, background events, business hours)\n\t--------------------------------------------------------------------------------------------------------------------\n\tTODO: remove this system. like we did in TimeGrid\n\t*/\n\n\n\t// Renders a set of rectangles over the given segments of time.\n\t// MUST RETURN a subset of segs, the segs that were actually rendered.\n\t// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement\n\trenderFill: function(type, segs) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a specific type of fill that is currently rendered on the grid\n\tunrenderFill: function(type) {\n\t\tvar el = this.elsByFill[type];\n\n\t\tif (el) {\n\t\t\tel.remove();\n\t\t\tdelete this.elsByFill[type];\n\t\t}\n\t},\n\n\n\t// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n\t// Only returns segments that successfully rendered.\n\t// To be harnessed by renderFill (implemented by subclasses).\n\t// Analagous to renderFgSegEls.\n\trenderFillSegEls: function(type, segs) {\n\t\tvar _this = this;\n\t\tvar segElMethod = this[type + 'SegEl'];\n\t\tvar html = '';\n\t\tvar renderedSegs = [];\n\t\tvar i;\n\n\t\tif (segs.length) {\n\n\t\t\t// build a large concatenation of segment HTML\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\thtml += this.fillSegHtml(type, segs[i]);\n\t\t\t}\n\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.\n\t\t\t// Then, compute the 'el' for each segment.\n\t\t\t$(html).each(function(i, node) {\n\t\t\t\tvar seg = segs[i];\n\t\t\t\tvar el = $(node);\n\n\t\t\t\t// allow custom filter methods per-type\n\t\t\t\tif (segElMethod) {\n\t\t\t\t\tel = segElMethod.call(_this, seg, el);\n\t\t\t\t}\n\n\t\t\t\tif (el) { // custom filters did not cancel the render\n\t\t\t\t\tel = $(el); // allow custom filter to return raw DOM node\n\n\t\t\t\t\t// correct element type? (would be bad if a non-TD were inserted into a table for example)\n\t\t\t\t\tif (el.is(_this.fillSegTag)) {\n\t\t\t\t\t\tseg.el = el;\n\t\t\t\t\t\trenderedSegs.push(seg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn renderedSegs;\n\t},\n\n\n\tfillSegTag: 'div', // subclasses can override\n\n\n\t// Builds the HTML needed for one fill segment. Generic enough to work with different types.\n\tfillSegHtml: function(type, seg) {\n\n\t\t// custom hooks per-type\n\t\tvar classesMethod = this[type + 'SegClasses'];\n\t\tvar cssMethod = this[type + 'SegCss'];\n\n\t\tvar classes = classesMethod ? classesMethod.call(this, seg) : [];\n\t\tvar css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});\n\n\t\treturn '<' + this.fillSegTag +\n\t\t\t(classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') +\n\t\t\t(css ? ' style=\"' + css + '\"' : '') +\n\t\t\t' />';\n\t},\n\n\n\n\t/* Generic rendering utilities for subclasses\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes HTML classNames for a single-day element\n\tgetDayClasses: function(date, noThemeHighlight) {\n\t\tvar view = this.view;\n\t\tvar today = view.calendar.getNow();\n\t\tvar classes = [ 'fc-' + dayIDs[date.day()] ];\n\n\t\tif (\n\t\t\tview.intervalDuration.as('months') == 1 &&\n\t\t\tdate.month() != view.intervalStart.month()\n\t\t) {\n\t\t\tclasses.push('fc-other-month');\n\t\t}\n\n\t\tif (date.isSame(today, 'day')) {\n\t\t\tclasses.push('fc-today');\n\n\t\t\tif (noThemeHighlight !== true) {\n\t\t\t\tclasses.push(view.highlightStateClass);\n\t\t\t}\n\t\t}\n\t\telse if (date < today) {\n\t\t\tclasses.push('fc-past');\n\t\t}\n\t\telse {\n\t\t\tclasses.push('fc-future');\n\t\t}\n\n\t\treturn classes;\n\t}\n\n});\n\n;;\n\n/* Event-rendering and event-interaction methods for the abstract Grid class\n----------------------------------------------------------------------------------------------------------------------*/\n\nGrid.mixin({\n\n\t// self-config, overridable by subclasses\n\tsegSelector: '.fc-event-container > *', // what constitutes an event element?\n\n\tmousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing\n\tisDraggingSeg: false, // is a segment being dragged? boolean\n\tisResizingSeg: false, // is a segment being resized? boolean\n\tisDraggingExternal: false, // jqui-dragging an external element? boolean\n\tsegs: null, // the *event* segments currently rendered in the grid. TODO: rename to `eventSegs`\n\n\n\t// Renders the given events onto the grid\n\trenderEvents: function(events) {\n\t\tvar bgEvents = [];\n\t\tvar fgEvents = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);\n\t\t}\n\n\t\tthis.segs = [].concat( // record all segs\n\t\t\tthis.renderBgEvents(bgEvents),\n\t\t\tthis.renderFgEvents(fgEvents)\n\t\t);\n\t},\n\n\n\trenderBgEvents: function(events) {\n\t\tvar segs = this.eventsToSegs(events);\n\n\t\t// renderBgSegs might return a subset of segs, segs that were actually rendered\n\t\treturn this.renderBgSegs(segs) || segs;\n\t},\n\n\n\trenderFgEvents: function(events) {\n\t\tvar segs = this.eventsToSegs(events);\n\n\t\t// renderFgSegs might return a subset of segs, segs that were actually rendered\n\t\treturn this.renderFgSegs(segs) || segs;\n\t},\n\n\n\t// Unrenders all events currently rendered on the grid\n\tunrenderEvents: function() {\n\t\tthis.handleSegMouseout(); // trigger an eventMouseout if user's mouse is over an event\n\t\tthis.clearDragListeners();\n\n\t\tthis.unrenderFgSegs();\n\t\tthis.unrenderBgSegs();\n\n\t\tthis.segs = null;\n\t},\n\n\n\t// Retrieves all rendered segment objects currently rendered on the grid\n\tgetEventSegs: function() {\n\t\treturn this.segs || [];\n\t},\n\n\n\t/* Foreground Segment Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.\n\trenderFgSegs: function(segs) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders all currently rendered foreground segments\n\tunrenderFgSegs: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Renders and assigns an `el` property for each foreground event segment.\n\t// Only returns segments that successfully rendered.\n\t// A utility that subclasses may use.\n\trenderFgSegEls: function(segs, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar html = '';\n\t\tvar renderedSegs = [];\n\t\tvar i;\n\n\t\tif (segs.length) { // don't build an empty html string\n\n\t\t\t// build a large concatenation of event segment HTML\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\thtml += this.fgSegHtml(segs[i], disableResizing);\n\t\t\t}\n\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.\n\t\t\t// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n\t\t\t$(html).each(function(i, node) {\n\t\t\t\tvar seg = segs[i];\n\t\t\t\tvar el = view.resolveEventEl(seg.event, $(node));\n\n\t\t\t\tif (el) {\n\t\t\t\t\tel.data('fc-seg', seg); // used by handlers\n\t\t\t\t\tseg.el = el;\n\t\t\t\t\trenderedSegs.push(seg);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn renderedSegs;\n\t},\n\n\n\t// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()\n\tfgSegHtml: function(seg, disableResizing) {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Background Segment Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders the given background event segments onto the grid.\n\t// Returns a subset of the segs that were actually rendered.\n\trenderBgSegs: function(segs) {\n\t\treturn this.renderFill('bgEvent', segs);\n\t},\n\n\n\t// Unrenders all the currently rendered background event segments\n\tunrenderBgSegs: function() {\n\t\tthis.unrenderFill('bgEvent');\n\t},\n\n\n\t// Renders a background event element, given the default rendering. Called by the fill system.\n\tbgEventSegEl: function(seg, el) {\n\t\treturn this.view.resolveEventEl(seg.event, el); // will filter through eventRender\n\t},\n\n\n\t// Generates an array of classNames to be used for the default rendering of a background event.\n\t// Called by fillSegHtml.\n\tbgEventSegClasses: function(seg) {\n\t\tvar event = seg.event;\n\t\tvar source = event.source || {};\n\n\t\treturn [ 'fc-bgevent' ].concat(\n\t\t\tevent.className,\n\t\t\tsource.className || []\n\t\t);\n\t},\n\n\n\t// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.\n\t// Called by fillSegHtml.\n\tbgEventSegCss: function(seg) {\n\t\treturn {\n\t\t\t'background-color': this.getSegSkinCss(seg)['background-color']\n\t\t};\n\t},\n\n\n\t// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.\n\t// Called by fillSegHtml.\n\tbusinessHoursSegClasses: function(seg) {\n\t\treturn [ 'fc-nonbusiness', 'fc-bgevent' ];\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Compute business hour segs for the grid's current date range.\n\t// Caller must ask if whole-day business hours are needed.\n\t// If no `businessHours` configuration value is specified, assumes the calendar default.\n\tbuildBusinessHourSegs: function(wholeDay, businessHours) {\n\t\treturn this.eventsToSegs(\n\t\t\tthis.buildBusinessHourEvents(wholeDay, businessHours)\n\t\t);\n\t},\n\n\n\t// Compute business hour *events* for the grid's current date range.\n\t// Caller must ask if whole-day business hours are needed.\n\t// If no `businessHours` configuration value is specified, assumes the calendar default.\n\tbuildBusinessHourEvents: function(wholeDay, businessHours) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar events;\n\n\t\tif (businessHours == null) {\n\t\t\t// fallback\n\t\t\t// access from calendawr. don't access from view. doesn't update with dynamic options.\n\t\t\tbusinessHours = calendar.options.businessHours;\n\t\t}\n\n\t\tevents = calendar.computeBusinessHourEvents(wholeDay, businessHours);\n\n\t\t// HACK. Eventually refactor business hours \"events\" system.\n\t\t// If no events are given, but businessHours is activated, this means the entire visible range should be\n\t\t// marked as *not* business-hours, via inverse-background rendering.\n\t\tif (!events.length && businessHours) {\n\t\t\tevents = [\n\t\t\t\t$.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, {\n\t\t\t\t\tstart: this.view.end, // guaranteed out-of-range\n\t\t\t\t\tend: this.view.end,   // \"\n\t\t\t\t\tdow: null\n\t\t\t\t})\n\t\t\t];\n\t\t}\n\n\t\treturn events;\n\t},\n\n\n\t/* Handlers\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Attaches event-element-related handlers for *all* rendered event segments of the view.\n\tbindSegHandlers: function() {\n\t\tthis.bindSegHandlersToEl(this.el);\n\t},\n\n\n\t// Attaches event-element-related handlers to an arbitrary container element. leverages bubbling.\n\tbindSegHandlersToEl: function(el) {\n\t\tthis.bindSegHandlerToEl(el, 'touchstart', this.handleSegTouchStart);\n\t\tthis.bindSegHandlerToEl(el, 'touchend', this.handleSegTouchEnd);\n\t\tthis.bindSegHandlerToEl(el, 'mouseenter', this.handleSegMouseover);\n\t\tthis.bindSegHandlerToEl(el, 'mouseleave', this.handleSegMouseout);\n\t\tthis.bindSegHandlerToEl(el, 'mousedown', this.handleSegMousedown);\n\t\tthis.bindSegHandlerToEl(el, 'click', this.handleSegClick);\n\t},\n\n\n\t// Executes a handler for any a user-interaction on a segment.\n\t// Handler gets called with (seg, ev), and with the `this` context of the Grid\n\tbindSegHandlerToEl: function(el, name, handler) {\n\t\tvar _this = this;\n\n\t\tel.on(name, this.segSelector, function(ev) {\n\t\t\tvar seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents\n\n\t\t\t// only call the handlers if there is not a drag/resize in progress\n\t\t\tif (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {\n\t\t\t\treturn handler.call(_this, seg, ev); // context will be the Grid\n\t\t\t}\n\t\t});\n\t},\n\n\n\thandleSegClick: function(seg, ev) {\n\t\tvar res = this.view.publiclyTrigger('eventClick', seg.el[0], seg.event, ev); // can return `false` to cancel\n\t\tif (res === false) {\n\t\t\tev.preventDefault();\n\t\t}\n\t},\n\n\n\t// Updates internal state and triggers handlers for when an event element is moused over\n\thandleSegMouseover: function(seg, ev) {\n\t\tif (\n\t\t\t!this.isIgnoringMouse &&\n\t\t\t!this.mousedOverSeg\n\t\t) {\n\t\t\tthis.mousedOverSeg = seg;\n\t\t\tif (this.view.isEventResizable(seg.event)) {\n\t\t\t\tseg.el.addClass('fc-allow-mouse-resize');\n\t\t\t}\n\t\t\tthis.view.publiclyTrigger('eventMouseover', seg.el[0], seg.event, ev);\n\t\t}\n\t},\n\n\n\t// Updates internal state and triggers handlers for when an event element is moused out.\n\t// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.\n\thandleSegMouseout: function(seg, ev) {\n\t\tev = ev || {}; // if given no args, make a mock mouse event\n\n\t\tif (this.mousedOverSeg) {\n\t\t\tseg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment\n\t\t\tthis.mousedOverSeg = null;\n\t\t\tif (this.view.isEventResizable(seg.event)) {\n\t\t\t\tseg.el.removeClass('fc-allow-mouse-resize');\n\t\t\t}\n\t\t\tthis.view.publiclyTrigger('eventMouseout', seg.el[0], seg.event, ev);\n\t\t}\n\t},\n\n\n\thandleSegMousedown: function(seg, ev) {\n\t\tvar isResizing = this.startSegResize(seg, ev, { distance: 5 });\n\n\t\tif (!isResizing && this.view.isEventDraggable(seg.event)) {\n\t\t\tthis.buildSegDragListener(seg)\n\t\t\t\t.startInteraction(ev, {\n\t\t\t\t\tdistance: 5\n\t\t\t\t});\n\t\t}\n\t},\n\n\n\thandleSegTouchStart: function(seg, ev) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar isSelected = view.isEventSelected(event);\n\t\tvar isDraggable = view.isEventDraggable(event);\n\t\tvar isResizable = view.isEventResizable(event);\n\t\tvar isResizing = false;\n\t\tvar dragListener;\n\t\tvar eventLongPressDelay;\n\n\t\tif (isSelected && isResizable) {\n\t\t\t// only allow resizing of the event is selected\n\t\t\tisResizing = this.startSegResize(seg, ev);\n\t\t}\n\n\t\tif (!isResizing && (isDraggable || isResizable)) { // allowed to be selected?\n\n\t\t\teventLongPressDelay = view.opt('eventLongPressDelay');\n\t\t\tif (eventLongPressDelay == null) {\n\t\t\t\teventLongPressDelay = view.opt('longPressDelay'); // fallback\n\t\t\t}\n\n\t\t\tdragListener = isDraggable ?\n\t\t\t\tthis.buildSegDragListener(seg) :\n\t\t\t\tthis.buildSegSelectListener(seg); // seg isn't draggable, but still needs to be selected\n\n\t\t\tdragListener.startInteraction(ev, { // won't start if already started\n\t\t\t\tdelay: isSelected ? 0 : eventLongPressDelay // do delay if not already selected\n\t\t\t});\n\t\t}\n\n\t\t// a long tap simulates a mouseover. ignore this bogus mouseover.\n\t\tthis.tempIgnoreMouse();\n\t},\n\n\n\thandleSegTouchEnd: function(seg, ev) {\n\t\t// touchstart+touchend = click, which simulates a mouseover.\n\t\t// ignore this bogus mouseover.\n\t\tthis.tempIgnoreMouse();\n\t},\n\n\n\t// returns boolean whether resizing actually started or not.\n\t// assumes the seg allows resizing.\n\t// `dragOptions` are optional.\n\tstartSegResize: function(seg, ev, dragOptions) {\n\t\tif ($(ev.target).is('.fc-resizer')) {\n\t\t\tthis.buildSegResizeListener(seg, $(ev.target).is('.fc-start-resizer'))\n\t\t\t\t.startInteraction(ev, dragOptions);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\n\n\t/* Event Dragging\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Builds a listener that will track user-dragging on an event segment.\n\t// Generic enough to work with any type of Grid.\n\t// Has side effect of setting/unsetting `segDragListener`\n\tbuildSegDragListener: function(seg) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar calendar = view.calendar;\n\t\tvar el = seg.el;\n\t\tvar event = seg.event;\n\t\tvar isDragging;\n\t\tvar mouseFollower; // A clone of the original element that will move with the mouse\n\t\tvar dropLocation; // zoned event date properties\n\n\t\tif (this.segDragListener) {\n\t\t\treturn this.segDragListener;\n\t\t}\n\n\t\t// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents\n\t\t// of the view.\n\t\tvar dragListener = this.segDragListener = new HitDragListener(view, {\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tsubjectEl: el,\n\t\t\tsubjectCenter: true,\n\t\t\tinteractionStart: function(ev) {\n\t\t\t\tseg.component = _this; // for renderDrag\n\t\t\t\tisDragging = false;\n\t\t\t\tmouseFollower = new MouseFollower(seg.el, {\n\t\t\t\t\tadditionalClass: 'fc-dragging',\n\t\t\t\t\tparentEl: view.el,\n\t\t\t\t\topacity: dragListener.isTouch ? null : view.opt('dragOpacity'),\n\t\t\t\t\trevertDuration: view.opt('dragRevertDuration'),\n\t\t\t\t\tzIndex: 2 // one above the .fc-view\n\t\t\t\t});\n\t\t\t\tmouseFollower.hide(); // don't show until we know this is a real drag\n\t\t\t\tmouseFollower.start(ev);\n\t\t\t},\n\t\t\tdragStart: function(ev) {\n\t\t\t\tif (dragListener.isTouch && !view.isEventSelected(event)) {\n\t\t\t\t\t// if not previously selected, will fire after a delay. then, select the event\n\t\t\t\t\tview.selectEvent(event);\n\t\t\t\t}\n\t\t\t\tisDragging = true;\n\t\t\t\t_this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\t\t\t\t_this.segDragStart(seg, ev);\n\t\t\t\tview.hideEvent(event); // hide all event segments. our mouseFollower will take over\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\t\t\t\tvar dragHelperEls;\n\n\t\t\t\t// starting hit could be forced (DayGrid.limit)\n\t\t\t\tif (seg.hit) {\n\t\t\t\t\torigHit = seg.hit;\n\t\t\t\t}\n\n\t\t\t\t// since we are querying the parent view, might not belong to this grid\n\t\t\t\tdropLocation = _this.computeEventDrop(\n\t\t\t\t\torigHit.component.getHitSpan(origHit),\n\t\t\t\t\thit.component.getHitSpan(hit),\n\t\t\t\t\tevent\n\t\t\t\t);\n\n\t\t\t\tif (dropLocation && !calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {\n\t\t\t\t\tdisableCursor();\n\t\t\t\t\tdropLocation = null;\n\t\t\t\t}\n\n\t\t\t\t// if a valid drop location, have the subclass render a visual indication\n\t\t\t\tif (dropLocation && (dragHelperEls = view.renderDrag(dropLocation, seg))) {\n\n\t\t\t\t\tdragHelperEls.addClass('fc-dragging');\n\t\t\t\t\tif (!dragListener.isTouch) {\n\t\t\t\t\t\t_this.applyDragOpacity(dragHelperEls);\n\t\t\t\t\t}\n\n\t\t\t\t\tmouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)\n\t\t\t\t}\n\n\t\t\t\tif (isOrig) {\n\t\t\t\t\tdropLocation = null; // needs to have moved hits to be a valid drop\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits\n\t\t\t\tview.unrenderDrag(); // unrender whatever was done in renderDrag\n\t\t\t\tmouseFollower.show(); // show in case we are moving out of all hits\n\t\t\t\tdropLocation = null;\n\t\t\t},\n\t\t\thitDone: function() { // Called after a hitOut OR before a dragEnd\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tinteractionEnd: function(ev) {\n\t\t\t\tdelete seg.component; // prevent side effects\n\n\t\t\t\t// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)\n\t\t\t\tmouseFollower.stop(!dropLocation, function() {\n\t\t\t\t\tif (isDragging) {\n\t\t\t\t\t\tview.unrenderDrag();\n\t\t\t\t\t\t_this.segDragStop(seg, ev);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dropLocation) {\n\t\t\t\t\t\t// no need to re-show original, will rerender all anyways. esp important if eventRenderWait\n\t\t\t\t\t\tview.reportEventDrop(event, dropLocation, _this.largeUnit, el, ev);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tview.showEvent(event);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t_this.segDragListener = null;\n\t\t\t}\n\t\t});\n\n\t\treturn dragListener;\n\t},\n\n\n\t// seg isn't draggable, but let's use a generic DragListener\n\t// simply for the delay, so it can be selected.\n\t// Has side effect of setting/unsetting `segDragListener`\n\tbuildSegSelectListener: function(seg) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\n\t\tif (this.segDragListener) {\n\t\t\treturn this.segDragListener;\n\t\t}\n\n\t\tvar dragListener = this.segDragListener = new DragListener({\n\t\t\tdragStart: function(ev) {\n\t\t\t\tif (dragListener.isTouch && !view.isEventSelected(event)) {\n\t\t\t\t\t// if not previously selected, will fire after a delay. then, select the event\n\t\t\t\t\tview.selectEvent(event);\n\t\t\t\t}\n\t\t\t},\n\t\t\tinteractionEnd: function(ev) {\n\t\t\t\t_this.segDragListener = null;\n\t\t\t}\n\t\t});\n\n\t\treturn dragListener;\n\t},\n\n\n\t// Called before event segment dragging starts\n\tsegDragStart: function(seg, ev) {\n\t\tthis.isDraggingSeg = true;\n\t\tthis.view.publiclyTrigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Called after event segment dragging stops\n\tsegDragStop: function(seg, ev) {\n\t\tthis.isDraggingSeg = false;\n\t\tthis.view.publiclyTrigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay\n\t// values for the event. Subclasses may override and set additional properties to be used by renderDrag.\n\t// A falsy returned value indicates an invalid drop.\n\t// DOES NOT consider overlap/constraint.\n\tcomputeEventDrop: function(startSpan, endSpan, event) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar dragStart = startSpan.start;\n\t\tvar dragEnd = endSpan.start;\n\t\tvar delta;\n\t\tvar dropLocation; // zoned event date properties\n\n\t\tif (dragStart.hasTime() === dragEnd.hasTime()) {\n\t\t\tdelta = this.diffDates(dragEnd, dragStart);\n\n\t\t\t// if an all-day event was in a timed area and it was dragged to a different time,\n\t\t\t// guarantee an end and adjust start/end to have times\n\t\t\tif (event.allDay && durationHasTime(delta)) {\n\t\t\t\tdropLocation = {\n\t\t\t\t\tstart: event.start.clone(),\n\t\t\t\t\tend: calendar.getEventEnd(event), // will be an ambig day\n\t\t\t\t\tallDay: false // for normalizeEventTimes\n\t\t\t\t};\n\t\t\t\tcalendar.normalizeEventTimes(dropLocation);\n\t\t\t}\n\t\t\t// othewise, work off existing values\n\t\t\telse {\n\t\t\t\tdropLocation = pluckEventDateProps(event);\n\t\t\t}\n\n\t\t\tdropLocation.start.add(delta);\n\t\t\tif (dropLocation.end) {\n\t\t\t\tdropLocation.end.add(delta);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared\n\t\t\tdropLocation = {\n\t\t\t\tstart: dragEnd.clone(),\n\t\t\t\tend: null, // end should be cleared\n\t\t\t\tallDay: !dragEnd.hasTime()\n\t\t\t};\n\t\t}\n\n\t\treturn dropLocation;\n\t},\n\n\n\t// Utility for apply dragOpacity to a jQuery set\n\tapplyDragOpacity: function(els) {\n\t\tvar opacity = this.view.opt('dragOpacity');\n\n\t\tif (opacity != null) {\n\t\t\tels.css('opacity', opacity);\n\t\t}\n\t},\n\n\n\t/* External Element Dragging\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called when a jQuery UI drag is initiated anywhere in the DOM\n\texternalDragStart: function(ev, ui) {\n\t\tvar view = this.view;\n\t\tvar el;\n\t\tvar accept;\n\n\t\tif (view.opt('droppable')) { // only listen if this setting is on\n\t\t\tel = $((ui ? ui.item : null) || ev.target);\n\n\t\t\t// Test that the dragged element passes the dropAccept selector or filter function.\n\t\t\t// FYI, the default is \"*\" (matches all)\n\t\t\taccept = view.opt('dropAccept');\n\t\t\tif ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {\n\t\t\t\tif (!this.isDraggingExternal) { // prevent double-listening if fired twice\n\t\t\t\t\tthis.listenToExternalDrag(el, ev, ui);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Called when a jQuery UI drag starts and it needs to be monitored for dropping\n\tlistenToExternalDrag: function(el, ev, ui) {\n\t\tvar _this = this;\n\t\tvar calendar = this.view.calendar;\n\t\tvar meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create\n\t\tvar dropLocation; // a null value signals an unsuccessful drag\n\n\t\t// listener that tracks mouse movement over date-associated pixel regions\n\t\tvar dragListener = _this.externalDragListener = new HitDragListener(this, {\n\t\t\tinteractionStart: function() {\n\t\t\t\t_this.isDraggingExternal = true;\n\t\t\t},\n\t\t\thitOver: function(hit) {\n\t\t\t\tdropLocation = _this.computeExternalDrop(\n\t\t\t\t\thit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid\n\t\t\t\t\tmeta\n\t\t\t\t);\n\n\t\t\t\tif ( // invalid hit?\n\t\t\t\t\tdropLocation &&\n\t\t\t\t\t!calendar.isExternalSpanAllowed(_this.eventToSpan(dropLocation), dropLocation, meta.eventProps)\n\t\t\t\t) {\n\t\t\t\t\tdisableCursor();\n\t\t\t\t\tdropLocation = null;\n\t\t\t\t}\n\n\t\t\t\tif (dropLocation) {\n\t\t\t\t\t_this.renderDrag(dropLocation); // called without a seg parameter\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() {\n\t\t\t\tdropLocation = null; // signal unsuccessful\n\t\t\t},\n\t\t\thitDone: function() { // Called after a hitOut OR before a dragEnd\n\t\t\t\tenableCursor();\n\t\t\t\t_this.unrenderDrag();\n\t\t\t},\n\t\t\tinteractionEnd: function(ev) {\n\t\t\t\tif (dropLocation) { // element was dropped on a valid hit\n\t\t\t\t\t_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);\n\t\t\t\t}\n\t\t\t\t_this.isDraggingExternal = false;\n\t\t\t\t_this.externalDragListener = null;\n\t\t\t}\n\t\t});\n\n\t\tdragListener.startDrag(ev); // start listening immediately\n\t},\n\n\n\t// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),\n\t// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.\n\t// Returning a null value signals an invalid drop hit.\n\t// DOES NOT consider overlap/constraint.\n\tcomputeExternalDrop: function(span, meta) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar dropLocation = {\n\t\t\tstart: calendar.applyTimezone(span.start), // simulate a zoned event start date\n\t\t\tend: null\n\t\t};\n\n\t\t// if dropped on an all-day span, and element's metadata specified a time, set it\n\t\tif (meta.startTime && !dropLocation.start.hasTime()) {\n\t\t\tdropLocation.start.time(meta.startTime);\n\t\t}\n\n\t\tif (meta.duration) {\n\t\t\tdropLocation.end = dropLocation.start.clone().add(meta.duration);\n\t\t}\n\n\t\treturn dropLocation;\n\t},\n\n\n\n\t/* Drag Rendering (for both events and an external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event or external element being dragged.\n\t// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.\n\t// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.\n\t// A truthy returned value indicates this method has rendered a helper element.\n\t// Must return elements used for any mock events.\n\trenderDrag: function(dropLocation, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event or external element being dragged\n\tunrenderDrag: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Resizing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Creates a listener that tracks the user as they resize an event segment.\n\t// Generic enough to work with any type of Grid.\n\tbuildSegResizeListener: function(seg, isStart) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar calendar = view.calendar;\n\t\tvar el = seg.el;\n\t\tvar event = seg.event;\n\t\tvar eventEnd = calendar.getEventEnd(event);\n\t\tvar isDragging;\n\t\tvar resizeLocation; // zoned event date properties. falsy if invalid resize\n\n\t\t// Tracks mouse movement over the *grid's* coordinate map\n\t\tvar dragListener = this.segResizeListener = new HitDragListener(this, {\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tsubjectEl: el,\n\t\t\tinteractionStart: function() {\n\t\t\t\tisDragging = false;\n\t\t\t},\n\t\t\tdragStart: function(ev) {\n\t\t\t\tisDragging = true;\n\t\t\t\t_this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\t\t\t\t_this.segResizeStart(seg, ev);\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\t\t\t\tvar origHitSpan = _this.getHitSpan(origHit);\n\t\t\t\tvar hitSpan = _this.getHitSpan(hit);\n\n\t\t\t\tresizeLocation = isStart ?\n\t\t\t\t\t_this.computeEventStartResize(origHitSpan, hitSpan, event) :\n\t\t\t\t\t_this.computeEventEndResize(origHitSpan, hitSpan, event);\n\n\t\t\t\tif (resizeLocation) {\n\t\t\t\t\tif (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {\n\t\t\t\t\t\tdisableCursor();\n\t\t\t\t\t\tresizeLocation = null;\n\t\t\t\t\t}\n\t\t\t\t\t// no change? (FYI, event dates might have zones)\n\t\t\t\t\telse if (\n\t\t\t\t\t\tresizeLocation.start.isSame(event.start.clone().stripZone()) &&\n\t\t\t\t\t\tresizeLocation.end.isSame(eventEnd.clone().stripZone())\n\t\t\t\t\t) {\n\t\t\t\t\t\tresizeLocation = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resizeLocation) {\n\t\t\t\t\tview.hideEvent(event);\n\t\t\t\t\t_this.renderEventResize(resizeLocation, seg);\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits\n\t\t\t\tresizeLocation = null;\n\t\t\t\tview.showEvent(event); // for when out-of-bounds. show original\n\t\t\t},\n\t\t\thitDone: function() { // resets the rendering to show the original event\n\t\t\t\t_this.unrenderEventResize();\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tinteractionEnd: function(ev) {\n\t\t\t\tif (isDragging) {\n\t\t\t\t\t_this.segResizeStop(seg, ev);\n\t\t\t\t}\n\n\t\t\t\tif (resizeLocation) { // valid date to resize to?\n\t\t\t\t\t// no need to re-show original, will rerender all anyways. esp important if eventRenderWait\n\t\t\t\t\tview.reportEventResize(event, resizeLocation, _this.largeUnit, el, ev);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tview.showEvent(event);\n\t\t\t\t}\n\t\t\t\t_this.segResizeListener = null;\n\t\t\t}\n\t\t});\n\n\t\treturn dragListener;\n\t},\n\n\n\t// Called before event segment resizing starts\n\tsegResizeStart: function(seg, ev) {\n\t\tthis.isResizingSeg = true;\n\t\tthis.view.publiclyTrigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Called after event segment resizing stops\n\tsegResizeStop: function(seg, ev) {\n\t\tthis.isResizingSeg = false;\n\t\tthis.view.publiclyTrigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Returns new date-information for an event segment being resized from its start\n\tcomputeEventStartResize: function(startSpan, endSpan, event) {\n\t\treturn this.computeEventResize('start', startSpan, endSpan, event);\n\t},\n\n\n\t// Returns new date-information for an event segment being resized from its end\n\tcomputeEventEndResize: function(startSpan, endSpan, event) {\n\t\treturn this.computeEventResize('end', startSpan, endSpan, event);\n\t},\n\n\n\t// Returns new zoned date information for an event segment being resized from its start OR end\n\t// `type` is either 'start' or 'end'.\n\t// DOES NOT consider overlap/constraint.\n\tcomputeEventResize: function(type, startSpan, endSpan, event) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar delta = this.diffDates(endSpan[type], startSpan[type]);\n\t\tvar resizeLocation; // zoned event date properties\n\t\tvar defaultDuration;\n\n\t\t// build original values to work from, guaranteeing a start and end\n\t\tresizeLocation = {\n\t\t\tstart: event.start.clone(),\n\t\t\tend: calendar.getEventEnd(event),\n\t\t\tallDay: event.allDay\n\t\t};\n\n\t\t// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times\n\t\tif (resizeLocation.allDay && durationHasTime(delta)) {\n\t\t\tresizeLocation.allDay = false;\n\t\t\tcalendar.normalizeEventTimes(resizeLocation);\n\t\t}\n\n\t\tresizeLocation[type].add(delta); // apply delta to start or end\n\n\t\t// if the event was compressed too small, find a new reasonable duration for it\n\t\tif (!resizeLocation.start.isBefore(resizeLocation.end)) {\n\n\t\t\tdefaultDuration =\n\t\t\t\tthis.minResizeDuration || // TODO: hack\n\t\t\t\t(event.allDay ?\n\t\t\t\t\tcalendar.defaultAllDayEventDuration :\n\t\t\t\t\tcalendar.defaultTimedEventDuration);\n\n\t\t\tif (type == 'start') { // resizing the start?\n\t\t\t\tresizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);\n\t\t\t}\n\t\t\telse { // resizing the end?\n\t\t\t\tresizeLocation.end = resizeLocation.start.clone().add(defaultDuration);\n\t\t\t}\n\t\t}\n\n\t\treturn resizeLocation;\n\t},\n\n\n\t// Renders a visual indication of an event being resized.\n\t// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.\n\t// Must return elements used for any mock events.\n\trenderEventResize: function(range, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event being resized.\n\tunrenderEventResize: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Rendering Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Compute the text that should be displayed on an event's element.\n\t// `range` can be the Event object itself, or something range-like, with at least a `start`.\n\t// If event times are disabled, or the event has no time, will return a blank string.\n\t// If not specified, formatStr will default to the eventTimeFormat setting,\n\t// and displayEnd will default to the displayEventEnd setting.\n\tgetEventTimeText: function(range, formatStr, displayEnd) {\n\n\t\tif (formatStr == null) {\n\t\t\tformatStr = this.eventTimeFormat;\n\t\t}\n\n\t\tif (displayEnd == null) {\n\t\t\tdisplayEnd = this.displayEventEnd;\n\t\t}\n\n\t\tif (this.displayEventTime && range.start.hasTime()) {\n\t\t\tif (displayEnd && range.end) {\n\t\t\t\treturn this.view.formatRange(range, formatStr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn range.start.format(formatStr);\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generic utility for generating the HTML classNames for an event segment's element\n\tgetSegClasses: function(seg, isDraggable, isResizable) {\n\t\tvar view = this.view;\n\t\tvar classes = [\n\t\t\t'fc-event',\n\t\t\tseg.isStart ? 'fc-start' : 'fc-not-start',\n\t\t\tseg.isEnd ? 'fc-end' : 'fc-not-end'\n\t\t].concat(this.getSegCustomClasses(seg));\n\n\t\tif (isDraggable) {\n\t\t\tclasses.push('fc-draggable');\n\t\t}\n\t\tif (isResizable) {\n\t\t\tclasses.push('fc-resizable');\n\t\t}\n\n\t\t// event is currently selected? attach a className.\n\t\tif (view.isEventSelected(seg.event)) {\n\t\t\tclasses.push('fc-selected');\n\t\t}\n\n\t\treturn classes;\n\t},\n\n\n\t// List of classes that were defined by the caller of the API in some way\n\tgetSegCustomClasses: function(seg) {\n\t\tvar event = seg.event;\n\n\t\treturn [].concat(\n\t\t\tevent.className, // guaranteed to be an array\n\t\t\tevent.source ? event.source.className : []\n\t\t);\n\t},\n\n\n\t// Utility for generating event skin-related CSS properties\n\tgetSegSkinCss: function(seg) {\n\t\treturn {\n\t\t\t'background-color': this.getSegBackgroundColor(seg),\n\t\t\t'border-color': this.getSegBorderColor(seg),\n\t\t\tcolor: this.getSegTextColor(seg)\n\t\t};\n\t},\n\n\n\t// Queries for caller-specified color, then falls back to default\n\tgetSegBackgroundColor: function(seg) {\n\t\treturn seg.event.backgroundColor ||\n\t\t\tseg.event.color ||\n\t\t\tthis.getSegDefaultBackgroundColor(seg);\n\t},\n\n\n\tgetSegDefaultBackgroundColor: function(seg) {\n\t\tvar source = seg.event.source || {};\n\n\t\treturn source.backgroundColor ||\n\t\t\tsource.color ||\n\t\t\tthis.view.opt('eventBackgroundColor') ||\n\t\t\tthis.view.opt('eventColor');\n\t},\n\n\n\t// Queries for caller-specified color, then falls back to default\n\tgetSegBorderColor: function(seg) {\n\t\treturn seg.event.borderColor ||\n\t\t\tseg.event.color ||\n\t\t\tthis.getSegDefaultBorderColor(seg);\n\t},\n\n\n\tgetSegDefaultBorderColor: function(seg) {\n\t\tvar source = seg.event.source || {};\n\n\t\treturn source.borderColor ||\n\t\t\tsource.color ||\n\t\t\tthis.view.opt('eventBorderColor') ||\n\t\t\tthis.view.opt('eventColor');\n\t},\n\n\n\t// Queries for caller-specified color, then falls back to default\n\tgetSegTextColor: function(seg) {\n\t\treturn seg.event.textColor ||\n\t\t\tthis.getSegDefaultTextColor(seg);\n\t},\n\n\n\tgetSegDefaultTextColor: function(seg) {\n\t\tvar source = seg.event.source || {};\n\n\t\treturn source.textColor ||\n\t\t\tthis.view.opt('eventTextColor');\n\t},\n\n\n\t/* Converting events -> eventRange -> eventSpan -> eventSegs\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates an array of segments for the given single event\n\t// Can accept an event \"location\" as well (which only has start/end and no allDay)\n\teventToSegs: function(event) {\n\t\treturn this.eventsToSegs([ event ]);\n\t},\n\n\n\teventToSpan: function(event) {\n\t\treturn this.eventToSpans(event)[0];\n\t},\n\n\n\t// Generates spans (always unzoned) for the given event.\n\t// Does not do any inverting for inverse-background events.\n\t// Can accept an event \"location\" as well (which only has start/end and no allDay)\n\teventToSpans: function(event) {\n\t\tvar range = this.eventToRange(event);\n\t\treturn this.eventRangeToSpans(range, event);\n\t},\n\n\n\n\t// Converts an array of event objects into an array of event segment objects.\n\t// A custom `segSliceFunc` may be given for arbitrarily slicing up events.\n\t// Doesn't guarantee an order for the resulting array.\n\teventsToSegs: function(allEvents, segSliceFunc) {\n\t\tvar _this = this;\n\t\tvar eventsById = groupEventsById(allEvents);\n\t\tvar segs = [];\n\n\t\t$.each(eventsById, function(id, events) {\n\t\t\tvar ranges = [];\n\t\t\tvar i;\n\n\t\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t\tranges.push(_this.eventToRange(events[i]));\n\t\t\t}\n\n\t\t\t// inverse-background events (utilize only the first event in calculations)\n\t\t\tif (isInverseBgEvent(events[0])) {\n\t\t\t\tranges = _this.invertRanges(ranges);\n\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\t\t\tsegs.push.apply(segs, // append to\n\t\t\t\t\t\t_this.eventRangeToSegs(ranges[i], events[0], segSliceFunc));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// normal event ranges\n\t\t\telse {\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\t\t\tsegs.push.apply(segs, // append to\n\t\t\t\t\t\t_this.eventRangeToSegs(ranges[i], events[i], segSliceFunc));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the unzoned start/end dates an event appears to occupy\n\t// Can accept an event \"location\" as well (which only has start/end and no allDay)\n\teventToRange: function(event) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar start = event.start.clone().stripZone();\n\t\tvar end = (\n\t\t\t\tevent.end ?\n\t\t\t\t\tevent.end.clone() :\n\t\t\t\t\t// derive the end from the start and allDay. compute allDay if necessary\n\t\t\t\t\tcalendar.getDefaultEventEnd(\n\t\t\t\t\t\tevent.allDay != null ?\n\t\t\t\t\t\t\tevent.allDay :\n\t\t\t\t\t\t\t!event.start.hasTime(),\n\t\t\t\t\t\tevent.start\n\t\t\t\t\t)\n\t\t\t).stripZone();\n\n\t\t// hack: dynamic locale change forgets to upate stored event localed\n\t\tcalendar.localizeMoment(start);\n\t\tcalendar.localizeMoment(end);\n\n\t\treturn { start: start, end: end };\n\t},\n\n\n\t// Given an event's range (unzoned start/end), and the event itself,\n\t// slice into segments (using the segSliceFunc function if specified)\n\teventRangeToSegs: function(range, event, segSliceFunc) {\n\t\tvar spans = this.eventRangeToSpans(range, event);\n\t\tvar segs = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < spans.length; i++) {\n\t\t\tsegs.push.apply(segs, // append to\n\t\t\t\tthis.eventSpanToSegs(spans[i], event, segSliceFunc));\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t// Given an event's unzoned date range, return an array of \"span\" objects.\n\t// Subclasses can override.\n\teventRangeToSpans: function(range, event) {\n\t\treturn [ $.extend({}, range) ]; // copy into a single-item array\n\t},\n\n\n\t// Given an event's span (unzoned start/end and other misc data), and the event itself,\n\t// slices into segments and attaches event-derived properties to them.\n\teventSpanToSegs: function(span, event, segSliceFunc) {\n\t\tvar segs = segSliceFunc ? segSliceFunc(span) : this.spanToSegs(span);\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tseg.event = event;\n\t\t\tseg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned\n\t\t\tseg.eventDurationMS = span.end - span.start;\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.\n\t// SIDE EFFECT: will mutate the given array and will use its date references.\n\tinvertRanges: function(ranges) {\n\t\tvar view = this.view;\n\t\tvar viewStart = view.start.clone(); // need a copy\n\t\tvar viewEnd = view.end.clone(); // need a copy\n\t\tvar inverseRanges = [];\n\t\tvar start = viewStart; // the end of the previous range. the start of the new range\n\t\tvar i, range;\n\n\t\t// ranges need to be in order. required for our date-walking algorithm\n\t\tranges.sort(compareRanges);\n\n\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\trange = ranges[i];\n\n\t\t\t// add the span of time before the event (if there is any)\n\t\t\tif (range.start > start) { // compare millisecond time (skip any ambig logic)\n\t\t\t\tinverseRanges.push({\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: range.start\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstart = range.end;\n\t\t}\n\n\t\t// add the span of time after the last event (if there is any)\n\t\tif (start < viewEnd) { // compare millisecond time (skip any ambig logic)\n\t\t\tinverseRanges.push({\n\t\t\t\tstart: start,\n\t\t\t\tend: viewEnd\n\t\t\t});\n\t\t}\n\n\t\treturn inverseRanges;\n\t},\n\n\n\tsortEventSegs: function(segs) {\n\t\tsegs.sort(proxy(this, 'compareEventSegs'));\n\t},\n\n\n\t// A cmp function for determining which segments should take visual priority\n\tcompareEventSegs: function(seg1, seg2) {\n\t\treturn seg1.eventStartMS - seg2.eventStartMS || // earlier events go first\n\t\t\tseg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first\n\t\t\tseg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)\n\t\t\tcompareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);\n\t}\n\n});\n\n\n/* Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction pluckEventDateProps(event) {\n\treturn {\n\t\tstart: event.start.clone(),\n\t\tend: event.end ? event.end.clone() : null,\n\t\tallDay: event.allDay // keep it the same\n\t};\n}\nFC.pluckEventDateProps = pluckEventDateProps;\n\n\nfunction isBgEvent(event) { // returns true if background OR inverse-background\n\tvar rendering = getEventRendering(event);\n\treturn rendering === 'background' || rendering === 'inverse-background';\n}\nFC.isBgEvent = isBgEvent; // export\n\n\nfunction isInverseBgEvent(event) {\n\treturn getEventRendering(event) === 'inverse-background';\n}\n\n\nfunction getEventRendering(event) {\n\treturn firstDefined((event.source || {}).rendering, event.rendering);\n}\n\n\nfunction groupEventsById(events) {\n\tvar eventsById = {};\n\tvar i, event;\n\n\tfor (i = 0; i < events.length; i++) {\n\t\tevent = events[i];\n\t\t(eventsById[event._id] || (eventsById[event._id] = [])).push(event);\n\t}\n\n\treturn eventsById;\n}\n\n\n// A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier\nfunction compareRanges(range1, range2) {\n\treturn range1.start - range2.start; // earlier ranges go first\n}\n\n\n/* External-Dragging-Element Data\n----------------------------------------------------------------------------------------------------------------------*/\n\n// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.\n// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.\nFC.dataAttrPrefix = '';\n\n// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure\n// to be used for Event Object creation.\n// A defined `.eventProps`, even when empty, indicates that an event should be created.\nfunction getDraggedElMeta(el) {\n\tvar prefix = FC.dataAttrPrefix;\n\tvar eventProps; // properties for creating the event, not related to date/time\n\tvar startTime; // a Duration\n\tvar duration;\n\tvar stick;\n\n\tif (prefix) { prefix += '-'; }\n\teventProps = el.data(prefix + 'event') || null;\n\n\tif (eventProps) {\n\t\tif (typeof eventProps === 'object') {\n\t\t\teventProps = $.extend({}, eventProps); // make a copy\n\t\t}\n\t\telse { // something like 1 or true. still signal event creation\n\t\t\teventProps = {};\n\t\t}\n\n\t\t// pluck special-cased date/time properties\n\t\tstartTime = eventProps.start;\n\t\tif (startTime == null) { startTime = eventProps.time; } // accept 'time' as well\n\t\tduration = eventProps.duration;\n\t\tstick = eventProps.stick;\n\t\tdelete eventProps.start;\n\t\tdelete eventProps.time;\n\t\tdelete eventProps.duration;\n\t\tdelete eventProps.stick;\n\t}\n\n\t// fallback to standalone attribute values for each of the date/time properties\n\tif (startTime == null) { startTime = el.data(prefix + 'start'); }\n\tif (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well\n\tif (duration == null) { duration = el.data(prefix + 'duration'); }\n\tif (stick == null) { stick = el.data(prefix + 'stick'); }\n\n\t// massage into correct data types\n\tstartTime = startTime != null ? moment.duration(startTime) : null;\n\tduration = duration != null ? moment.duration(duration) : null;\n\tstick = Boolean(stick);\n\n\treturn { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };\n}\n\n\n;;\n\n/*\nA set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.\nPrerequisite: the object being mixed into needs to be a *Grid*\n*/\nvar DayTableMixin = FC.DayTableMixin = {\n\n\tbreakOnWeeks: false, // should create a new row for each week?\n\tdayDates: null, // whole-day dates for each column. left to right\n\tdayIndices: null, // for each day from start, the offset\n\tdaysPerRow: null,\n\trowCnt: null,\n\tcolCnt: null,\n\tcolHeadFormat: null,\n\n\n\t// Populates internal variables used for date calculation and rendering\n\tupdateDayTable: function() {\n\t\tvar view = this.view;\n\t\tvar date = this.start.clone();\n\t\tvar dayIndex = -1;\n\t\tvar dayIndices = [];\n\t\tvar dayDates = [];\n\t\tvar daysPerRow;\n\t\tvar firstDay;\n\t\tvar rowCnt;\n\n\t\twhile (date.isBefore(this.end)) { // loop each day from start to end\n\t\t\tif (view.isHiddenDay(date)) {\n\t\t\t\tdayIndices.push(dayIndex + 0.5); // mark that it's between indices\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdayIndex++;\n\t\t\t\tdayIndices.push(dayIndex);\n\t\t\t\tdayDates.push(date.clone());\n\t\t\t}\n\t\t\tdate.add(1, 'days');\n\t\t}\n\n\t\tif (this.breakOnWeeks) {\n\t\t\t// count columns until the day-of-week repeats\n\t\t\tfirstDay = dayDates[0].day();\n\t\t\tfor (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {\n\t\t\t\tif (dayDates[daysPerRow].day() == firstDay) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trowCnt = Math.ceil(dayDates.length / daysPerRow);\n\t\t}\n\t\telse {\n\t\t\trowCnt = 1;\n\t\t\tdaysPerRow = dayDates.length;\n\t\t}\n\n\t\tthis.dayDates = dayDates;\n\t\tthis.dayIndices = dayIndices;\n\t\tthis.daysPerRow = daysPerRow;\n\t\tthis.rowCnt = rowCnt;\n\n\t\tthis.updateDayTableCols();\n\t},\n\n\n\t// Computes and assigned the colCnt property and updates any options that may be computed from it\n\tupdateDayTableCols: function() {\n\t\tthis.colCnt = this.computeColCnt();\n\t\tthis.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();\n\t},\n\n\n\t// Determines how many columns there should be in the table\n\tcomputeColCnt: function() {\n\t\treturn this.daysPerRow;\n\t},\n\n\n\t// Computes the ambiguously-timed moment for the given cell\n\tgetCellDate: function(row, col) {\n\t\treturn this.dayDates[\n\t\t\t\tthis.getCellDayIndex(row, col)\n\t\t\t].clone();\n\t},\n\n\n\t// Computes the ambiguously-timed date range for the given cell\n\tgetCellRange: function(row, col) {\n\t\tvar start = this.getCellDate(row, col);\n\t\tvar end = start.clone().add(1, 'days');\n\n\t\treturn { start: start, end: end };\n\t},\n\n\n\t// Returns the number of day cells, chronologically, from the first of the grid (0-based)\n\tgetCellDayIndex: function(row, col) {\n\t\treturn row * this.daysPerRow + this.getColDayIndex(col);\n\t},\n\n\n\t// Returns the numner of day cells, chronologically, from the first cell in *any given row*\n\tgetColDayIndex: function(col) {\n\t\tif (this.isRTL) {\n\t\t\treturn this.colCnt - 1 - col;\n\t\t}\n\t\telse {\n\t\t\treturn col;\n\t\t}\n\t},\n\n\n\t// Given a date, returns its chronolocial cell-index from the first cell of the grid.\n\t// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n\t// If before the first offset, returns a negative number.\n\t// If after the last offset, returns an offset past the last cell offset.\n\t// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n\tgetDateDayIndex: function(date) {\n\t\tvar dayIndices = this.dayIndices;\n\t\tvar dayOffset = date.diff(this.start, 'days');\n\n\t\tif (dayOffset < 0) {\n\t\t\treturn dayIndices[0] - 1;\n\t\t}\n\t\telse if (dayOffset >= dayIndices.length) {\n\t\t\treturn dayIndices[dayIndices.length - 1] + 1;\n\t\t}\n\t\telse {\n\t\t\treturn dayIndices[dayOffset];\n\t\t}\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined\n\tcomputeColHeadFormat: function() {\n\t\t// if more than one week row, or if there are a lot of columns with not much space,\n\t\t// put just the day numbers will be in each cell\n\t\tif (this.rowCnt > 1 || this.colCnt > 10) {\n\t\t\treturn 'ddd'; // \"Sat\"\n\t\t}\n\t\t// multiple days, so full single date string WON'T be in title text\n\t\telse if (this.colCnt > 1) {\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"\n\t\t}\n\t\t// single day, so full single date string will probably be in title text\n\t\telse {\n\t\t\treturn 'dddd'; // \"Saturday\"\n\t\t}\n\t},\n\n\n\t/* Slicing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Slices up a date range into a segment for every week-row it intersects with\n\tsliceRangeByRow: function(range) {\n\t\tvar daysPerRow = this.daysPerRow;\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\t\tvar segs = [];\n\t\tvar row;\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row\n\t\tvar segFirst, segLast; // inclusive day-index range for segment\n\n\t\tfor (row = 0; row < this.rowCnt; row++) {\n\t\t\trowFirst = row * daysPerRow;\n\t\t\trowLast = rowFirst + daysPerRow - 1;\n\n\t\t\t// intersect segment's offset range with the row's\n\t\t\tsegFirst = Math.max(rangeFirst, rowFirst);\n\t\t\tsegLast = Math.min(rangeLast, rowLast);\n\n\t\t\t// deal with in-between indices\n\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell\n\n\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?\n\t\t\t\tsegs.push({\n\t\t\t\t\trow: row,\n\n\t\t\t\t\t// normalize to start of row\n\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,\n\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,\n\n\t\t\t\t\t// must be matching integers to be the segment's start/end\n\t\t\t\t\tisStart: segFirst === rangeFirst,\n\t\t\t\t\tisEnd: segLast === rangeLast\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t// Slices up a date range into a segment for every day-cell it intersects with.\n\t// TODO: make more DRY with sliceRangeByRow somehow.\n\tsliceRangeByDay: function(range) {\n\t\tvar daysPerRow = this.daysPerRow;\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\t\tvar segs = [];\n\t\tvar row;\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row\n\t\tvar i;\n\t\tvar segFirst, segLast; // inclusive day-index range for segment\n\n\t\tfor (row = 0; row < this.rowCnt; row++) {\n\t\t\trowFirst = row * daysPerRow;\n\t\t\trowLast = rowFirst + daysPerRow - 1;\n\n\t\t\tfor (i = rowFirst; i <= rowLast; i++) {\n\n\t\t\t\t// intersect segment's offset range with the row's\n\t\t\t\tsegFirst = Math.max(rangeFirst, i);\n\t\t\t\tsegLast = Math.min(rangeLast, i);\n\n\t\t\t\t// deal with in-between indices\n\t\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\t\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell\n\n\t\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?\n\t\t\t\t\tsegs.push({\n\t\t\t\t\t\trow: row,\n\n\t\t\t\t\t\t// normalize to start of row\n\t\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,\n\t\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,\n\n\t\t\t\t\t\t// must be matching integers to be the segment's start/end\n\t\t\t\t\t\tisStart: segFirst === rangeFirst,\n\t\t\t\t\t\tisEnd: segLast === rangeLast\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Header Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderHeadHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '' +\n\t\t\t'<div class=\"fc-row ' + view.widgetHeaderClass + '\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\t'<thead>' +\n\t\t\t\t\t\tthis.renderHeadTrHtml() +\n\t\t\t\t\t'</thead>' +\n\t\t\t\t'</table>' +\n\t\t\t'</div>';\n\t},\n\n\n\trenderHeadIntroHtml: function() {\n\t\treturn this.renderIntroHtml(); // fall back to generic\n\t},\n\n\n\trenderHeadTrHtml: function() {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderHeadIntroHtml()) +\n\t\t\t\tthis.renderHeadDateCellsHtml() +\n\t\t\t\t(this.isRTL ? this.renderHeadIntroHtml() : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderHeadDateCellsHtml: function() {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(0, col);\n\t\t\thtmls.push(this.renderHeadDateCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\t// TODO: when internalApiVersion, accept an object for HTML attributes\n\t// (colspan should be no different)\n\trenderHeadDateCellHtml: function(date, colspan, otherAttrs) {\n\t\tvar view = this.view;\n\t\tvar classNames = [\n\t\t\t'fc-day-header',\n\t\t\tview.widgetHeaderClass\n\t\t];\n\n\t\t// if only one row of days, the classNames on the header can represent the specific days beneath\n\t\tif (this.rowCnt === 1) {\n\t\t\tclassNames = classNames.concat(\n\t\t\t\t// includes the day-of-week class\n\t\t\t\t// noThemeHighlight=true (don't highlight the header)\n\t\t\t\tthis.getDayClasses(date, true)\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\tclassNames.push('fc-' + dayIDs[date.day()]); // only add the day-of-week class\n\t\t}\n\n\t\treturn '' +\n            '<th class=\"' + classNames.join(' ') + '\"' +\n\t\t\t\t(this.rowCnt === 1 ?\n\t\t\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' :\n\t\t\t\t\t'') +\n\t\t\t\t(colspan > 1 ?\n\t\t\t\t\t' colspan=\"' + colspan + '\"' :\n\t\t\t\t\t'') +\n\t\t\t\t(otherAttrs ?\n\t\t\t\t\t' ' + otherAttrs :\n\t\t\t\t\t'') +\n\t\t\t\t'>' +\n\t\t\t\t// don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)\n\t\t\t\tview.buildGotoAnchorHtml(\n\t\t\t\t\t{ date: date, forceOff: this.rowCnt > 1 || this.colCnt === 1 },\n\t\t\t\t\thtmlEscape(date.format(this.colHeadFormat)) // inner HTML\n\t\t\t\t) +\n\t\t\t'</th>';\n\t},\n\n\n\t/* Background Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBgTrHtml: function(row) {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderBgIntroHtml(row)) +\n\t\t\t\tthis.renderBgCellsHtml(row) +\n\t\t\t\t(this.isRTL ? this.renderBgIntroHtml(row) : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderBgIntroHtml: function(row) {\n\t\treturn this.renderIntroHtml(); // fall back to generic\n\t},\n\n\n\trenderBgCellsHtml: function(row) {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(row, col);\n\t\t\thtmls.push(this.renderBgCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\trenderBgCellHtml: function(date, otherAttrs) {\n\t\tvar view = this.view;\n\t\tvar classes = this.getDayClasses(date);\n\n\t\tclasses.unshift('fc-day', view.widgetContentClass);\n\n\t\treturn '<td class=\"' + classes.join(' ') + '\"' +\n\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' + // if date has a time, won't format it\n\t\t\t(otherAttrs ?\n\t\t\t\t' ' + otherAttrs :\n\t\t\t\t'') +\n\t\t\t'></td>';\n\t},\n\n\n\t/* Generic\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates the default HTML intro for any row. User classes should override\n\trenderIntroHtml: function() {\n\t},\n\n\n\t// TODO: a generic method for dealing with <tr>, RTL, intro\n\t// when increment internalApiVersion\n\t// wrapTr (scheduler)\n\n\n\t/* Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Applies the generic \"intro\" and \"outro\" HTML to the given cells.\n\t// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.\n\tbookendCells: function(trEl) {\n\t\tvar introHtml = this.renderIntroHtml();\n\n\t\tif (introHtml) {\n\t\t\tif (this.isRTL) {\n\t\t\t\ttrEl.append(introHtml);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttrEl.prepend(introHtml);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n;;\n\n/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {\n\n\tnumbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal\n\tbottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid\n\n\trowEls: null, // set of fake row elements\n\tcellEls: null, // set of whole-day elements comprising the row's background\n\thelperEls: null, // set of cell skeleton elements for rendering the mock event \"helper\"\n\n\trowCoordCache: null,\n\tcolCoordCache: null,\n\n\n\t// Renders the rows and columns into the component's `this.el`, which should already be assigned.\n\t// isRigid determins whether the individual rows should ignore the contents and be a constant height.\n\t// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.\n\trenderDates: function(isRigid) {\n\t\tvar view = this.view;\n\t\tvar rowCnt = this.rowCnt;\n\t\tvar colCnt = this.colCnt;\n\t\tvar html = '';\n\t\tvar row;\n\t\tvar col;\n\n\t\tfor (row = 0; row < rowCnt; row++) {\n\t\t\thtml += this.renderDayRowHtml(row, isRigid);\n\t\t}\n\t\tthis.el.html(html);\n\n\t\tthis.rowEls = this.el.find('.fc-row');\n\t\tthis.cellEls = this.el.find('.fc-day');\n\n\t\tthis.rowCoordCache = new CoordCache({\n\t\t\tels: this.rowEls,\n\t\t\tisVertical: true\n\t\t});\n\t\tthis.colCoordCache = new CoordCache({\n\t\t\tels: this.cellEls.slice(0, this.colCnt), // only the first row\n\t\t\tisHorizontal: true\n\t\t});\n\n\t\t// trigger dayRender with each cell's element\n\t\tfor (row = 0; row < rowCnt; row++) {\n\t\t\tfor (col = 0; col < colCnt; col++) {\n\t\t\t\tview.publiclyTrigger(\n\t\t\t\t\t'dayRender',\n\t\t\t\t\tnull,\n\t\t\t\t\tthis.getCellDate(row, col),\n\t\t\t\t\tthis.getCellEl(row, col)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tunrenderDates: function() {\n\t\tthis.removeSegPopover();\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tvar segs = this.buildBusinessHourSegs(true); // wholeDay=true\n\t\tthis.renderFill('businessHours', segs, 'bgevent');\n\t},\n\n\n\tunrenderBusinessHours: function() {\n\t\tthis.unrenderFill('businessHours');\n\t},\n\n\n\t// Generates the HTML for a single row, which is a div that wraps a table.\n\t// `row` is the row number.\n\trenderDayRowHtml: function(row, isRigid) {\n\t\tvar view = this.view;\n\t\tvar classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];\n\n\t\tif (isRigid) {\n\t\t\tclasses.push('fc-rigid');\n\t\t}\n\n\t\treturn '' +\n\t\t\t'<div class=\"' + classes.join(' ') + '\">' +\n\t\t\t\t'<div class=\"fc-bg\">' +\n\t\t\t\t\t'<table>' +\n\t\t\t\t\t\tthis.renderBgTrHtml(row) +\n\t\t\t\t\t'</table>' +\n\t\t\t\t'</div>' +\n\t\t\t\t'<div class=\"fc-content-skeleton\">' +\n\t\t\t\t\t'<table>' +\n\t\t\t\t\t\t(this.numbersVisible ?\n\t\t\t\t\t\t\t'<thead>' +\n\t\t\t\t\t\t\t\tthis.renderNumberTrHtml(row) +\n\t\t\t\t\t\t\t'</thead>' :\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t) +\n\t\t\t\t\t'</table>' +\n\t\t\t\t'</div>' +\n\t\t\t'</div>';\n\t},\n\n\n\t/* Grid Number Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderNumberTrHtml: function(row) {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +\n\t\t\t\tthis.renderNumberCellsHtml(row) +\n\t\t\t\t(this.isRTL ? this.renderNumberIntroHtml(row) : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderNumberIntroHtml: function(row) {\n\t\treturn this.renderIntroHtml();\n\t},\n\n\n\trenderNumberCellsHtml: function(row) {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(row, col);\n\t\t\thtmls.push(this.renderNumberCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\t// Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n\t// The number row will only exist if either day numbers or week numbers are turned on.\n\trenderNumberCellHtml: function(date) {\n\t\tvar html = '';\n\t\tvar classes;\n\t\tvar weekCalcFirstDoW;\n\n\t\tif (!this.view.dayNumbersVisible && !this.view.cellWeekNumbersVisible) {\n\t\t\t// no numbers in day cell (week number must be along the side)\n\t\t\treturn '<td/>'; //  will create an empty space above events :(\n\t\t}\n\n\t\tclasses = this.getDayClasses(date);\n\t\tclasses.unshift('fc-day-top');\n\n\t\tif (this.view.cellWeekNumbersVisible) {\n\t\t\t// To determine the day of week number change under ISO, we cannot\n\t\t\t// rely on moment.js methods such as firstDayOfWeek() or weekday(),\n\t\t\t// because they rely on the locale's dow (possibly overridden by\n\t\t\t// our firstDay option), which may not be Monday. We cannot change\n\t\t\t// dow, because that would affect the calendar start day as well.\n\t\t\tif (date._locale._fullCalendar_weekCalc === 'ISO') {\n\t\t\t\tweekCalcFirstDoW = 1;  // Monday by ISO 8601 definition\n\t\t\t}\n\t\t\telse {\n\t\t\t\tweekCalcFirstDoW = date._locale.firstDayOfWeek();\n\t\t\t}\n\t\t}\n\n\t\thtml += '<td class=\"' + classes.join(' ') + '\" data-date=\"' + date.format() + '\">';\n\n\t\tif (this.view.cellWeekNumbersVisible && (date.day() == weekCalcFirstDoW)) {\n\t\t\thtml += this.view.buildGotoAnchorHtml(\n\t\t\t\t{ date: date, type: 'week' },\n\t\t\t\t{ 'class': 'fc-week-number' },\n\t\t\t\tdate.format('w') // inner HTML\n\t\t\t);\n\t\t}\n\n\t\tif (this.view.dayNumbersVisible) {\n\t\t\thtml += this.view.buildGotoAnchorHtml(\n\t\t\t\tdate,\n\t\t\t\t{ 'class': 'fc-day-number' },\n\t\t\t\tdate.date() // inner HTML\n\t\t\t);\n\t\t}\n\n\t\thtml += '</td>';\n\n\t\treturn html;\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"\n\t},\n\n\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined\n\tcomputeDisplayEventEnd: function() {\n\t\treturn this.colCnt == 1; // we'll likely have space if there's only one day\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trangeUpdated: function() {\n\t\tthis.updateDayTable();\n\t},\n\n\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments\n\tspanToSegs: function(span) {\n\t\tvar segs = this.sliceRangeByRow(span);\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tif (this.isRTL) {\n\t\t\t\tseg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;\n\t\t\t\tseg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseg.leftCol = seg.firstRowDayIndex;\n\t\t\t\tseg.rightCol = seg.lastRowDayIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Hit System\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tprepareHits: function() {\n\t\tthis.colCoordCache.build();\n\t\tthis.rowCoordCache.build();\n\t\tthis.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.colCoordCache.clear();\n\t\tthis.rowCoordCache.clear();\n\t},\n\n\n\tqueryHit: function(leftOffset, topOffset) {\n\t\tif (this.colCoordCache.isLeftInBounds(leftOffset) && this.rowCoordCache.isTopInBounds(topOffset)) {\n\t\t\tvar col = this.colCoordCache.getHorizontalIndex(leftOffset);\n\t\t\tvar row = this.rowCoordCache.getVerticalIndex(topOffset);\n\n\t\t\tif (row != null && col != null) {\n\t\t\t\treturn this.getCellHit(row, col);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\treturn this.getCellRange(hit.row, hit.col);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.getCellEl(hit.row, hit.col);\n\t},\n\n\n\t/* Cell System\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// FYI: the first column is the leftmost column, regardless of date\n\n\n\tgetCellHit: function(row, col) {\n\t\treturn {\n\t\t\trow: row,\n\t\t\tcol: col,\n\t\t\tcomponent: this, // needed unfortunately :(\n\t\t\tleft: this.colCoordCache.getLeftOffset(col),\n\t\t\tright: this.colCoordCache.getRightOffset(col),\n\t\t\ttop: this.rowCoordCache.getTopOffset(row),\n\t\t\tbottom: this.rowCoordCache.getBottomOffset(row)\n\t\t};\n\t},\n\n\n\tgetCellEl: function(row, col) {\n\t\treturn this.cellEls.eq(row * this.colCnt + col);\n\t},\n\n\n\t/* Event Drag Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods\n\n\n\t// Renders a visual indication of an event or external element being dragged.\n\t// `eventLocation` has zoned start and end (optional)\n\trenderDrag: function(eventLocation, seg) {\n\n\t\t// always render a highlight underneath\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\n\t\t// if a segment from the same calendar but another component is being dragged, render a helper event\n\t\tif (seg && seg.component !== this) {\n\t\t\treturn this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of a hovering event\n\tunrenderDrag: function() {\n\t\tthis.unrenderHighlight();\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Resize Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being resized\n\trenderEventResize: function(eventLocation, seg) {\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\t\treturn this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n\t},\n\n\n\t// Unrenders a visual indication of an event being resized\n\tunrenderEventResize: function() {\n\t\tthis.unrenderHighlight();\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.\n\trenderHelper: function(event, sourceSeg) {\n\t\tvar helperNodes = [];\n\t\tvar segs = this.eventToSegs(event);\n\t\tvar rowStructs;\n\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered\n\t\trowStructs = this.renderSegRows(segs);\n\n\t\t// inject each new event skeleton into each associated row\n\t\tthis.rowEls.each(function(row, rowNode) {\n\t\t\tvar rowEl = $(rowNode); // the .fc-row\n\t\t\tvar skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned\n\t\t\tvar skeletonTop;\n\n\t\t\t// If there is an original segment, match the top position. Otherwise, put it at the row's top level\n\t\t\tif (sourceSeg && sourceSeg.row === row) {\n\t\t\t\tskeletonTop = sourceSeg.el.position().top;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tskeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;\n\t\t\t}\n\n\t\t\tskeletonEl.css('top', skeletonTop)\n\t\t\t\t.find('table')\n\t\t\t\t\t.append(rowStructs[row].tbodyEl);\n\n\t\t\trowEl.append(skeletonEl);\n\t\t\thelperNodes.push(skeletonEl[0]);\n\t\t});\n\n\t\treturn ( // must return the elements rendered\n\t\t\tthis.helperEls = $(helperNodes) // array -> jQuery set\n\t\t);\n\t},\n\n\n\t// Unrenders any visual indication of a mock helper event\n\tunrenderHelper: function() {\n\t\tif (this.helperEls) {\n\t\t\tthis.helperEls.remove();\n\t\t\tthis.helperEls = null;\n\t\t}\n\t},\n\n\n\t/* Fill System (highlight, background events, business hours)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tfillSegTag: 'td', // override the default tag name\n\n\n\t// Renders a set of rectangles over the given segments of days.\n\t// Only returns segments that successfully rendered.\n\trenderFill: function(type, segs, className) {\n\t\tvar nodes = [];\n\t\tvar i, seg;\n\t\tvar skeletonEl;\n\n\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tskeletonEl = this.renderFillRow(type, seg, className);\n\t\t\tthis.rowEls.eq(seg.row).append(skeletonEl);\n\t\t\tnodes.push(skeletonEl[0]);\n\t\t}\n\n\t\tthis.elsByFill[type] = $(nodes);\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n\trenderFillRow: function(type, seg, className) {\n\t\tvar colCnt = this.colCnt;\n\t\tvar startCol = seg.leftCol;\n\t\tvar endCol = seg.rightCol + 1;\n\t\tvar skeletonEl;\n\t\tvar trEl;\n\n\t\tclassName = className || type.toLowerCase();\n\n\t\tskeletonEl = $(\n\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +\n\t\t\t\t'<table><tr/></table>' +\n\t\t\t'</div>'\n\t\t);\n\t\ttrEl = skeletonEl.find('tr');\n\n\t\tif (startCol > 0) {\n\t\t\ttrEl.append('<td colspan=\"' + startCol + '\"/>');\n\t\t}\n\n\t\ttrEl.append(\n\t\t\tseg.el.attr('colspan', endCol - startCol)\n\t\t);\n\n\t\tif (endCol < colCnt) {\n\t\t\ttrEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');\n\t\t}\n\n\t\tthis.bookendCells(trEl);\n\n\t\treturn skeletonEl;\n\t}\n\n});\n\n;;\n\n/* Event-rendering methods for the DayGrid class\n----------------------------------------------------------------------------------------------------------------------*/\n\nDayGrid.mixin({\n\n\trowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering\n\n\n\t// Unrenders all events currently rendered on the grid\n\tunrenderEvents: function() {\n\t\tthis.removeSegPopover(); // removes the \"more..\" events popover\n\t\tGrid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method\n\t},\n\n\n\t// Retrieves all rendered segment objects currently rendered on the grid\n\tgetEventSegs: function() {\n\t\treturn Grid.prototype.getEventSegs.call(this) // get the segments from the super-method\n\t\t\t.concat(this.popoverSegs || []); // append the segments from the \"more...\" popover\n\t},\n\n\n\t// Renders the given background event segments onto the grid\n\trenderBgSegs: function(segs) {\n\n\t\t// don't render timed background events\n\t\tvar allDaySegs = $.grep(segs, function(seg) {\n\t\t\treturn seg.event.allDay;\n\t\t});\n\n\t\treturn Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method\n\t},\n\n\n\t// Renders the given foreground event segments onto the grid\n\trenderFgSegs: function(segs) {\n\t\tvar rowStructs;\n\n\t\t// render an `.el` on each seg\n\t\t// returns a subset of the segs. segs that were actually rendered\n\t\tsegs = this.renderFgSegEls(segs);\n\n\t\trowStructs = this.rowStructs = this.renderSegRows(segs);\n\n\t\t// append to each row's content skeleton\n\t\tthis.rowEls.each(function(i, rowNode) {\n\t\t\t$(rowNode).find('.fc-content-skeleton > table').append(\n\t\t\t\trowStructs[i].tbodyEl\n\t\t\t);\n\t\t});\n\n\t\treturn segs; // return only the segs that were actually rendered\n\t},\n\n\n\t// Unrenders all currently rendered foreground event segments\n\tunrenderFgSegs: function() {\n\t\tvar rowStructs = this.rowStructs || [];\n\t\tvar rowStruct;\n\n\t\twhile ((rowStruct = rowStructs.pop())) {\n\t\t\trowStruct.tbodyEl.remove();\n\t\t}\n\n\t\tthis.rowStructs = null;\n\t},\n\n\n\t// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n\t// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n\t// PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n\trenderSegRows: function(segs) {\n\t\tvar rowStructs = [];\n\t\tvar segRows;\n\t\tvar row;\n\n\t\tsegRows = this.groupSegRows(segs); // group into nested arrays\n\n\t\t// iterate each row of segment groupings\n\t\tfor (row = 0; row < segRows.length; row++) {\n\t\t\trowStructs.push(\n\t\t\t\tthis.renderSegRow(row, segRows[row])\n\t\t\t);\n\t\t}\n\n\t\treturn rowStructs;\n\t},\n\n\n\t// Builds the HTML to be used for the default element for an individual segment\n\tfgSegHtml: function(seg, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar isDraggable = view.isEventDraggable(event);\n\t\tvar isResizableFromStart = !disableResizing && event.allDay &&\n\t\t\tseg.isStart && view.isEventResizableFromStart(event);\n\t\tvar isResizableFromEnd = !disableResizing && event.allDay &&\n\t\t\tseg.isEnd && view.isEventResizableFromEnd(event);\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n\t\tvar skinCss = cssToStr(this.getSegSkinCss(seg));\n\t\tvar timeHtml = '';\n\t\tvar timeText;\n\t\tvar titleHtml;\n\n\t\tclasses.unshift('fc-day-grid-event', 'fc-h-event');\n\n\t\t// Only display a timed events time if it is the starting segment\n\t\tif (seg.isStart) {\n\t\t\ttimeText = this.getEventTimeText(event);\n\t\t\tif (timeText) {\n\t\t\t\ttimeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';\n\t\t\t}\n\t\t}\n\n\t\ttitleHtml =\n\t\t\t'<span class=\"fc-title\">' +\n\t\t\t\t(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height\n\t\t\t'</span>';\n\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +\n\t\t\t\t(event.url ?\n\t\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t(skinCss ?\n\t\t\t\t\t' style=\"' + skinCss + '\"' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'>' +\n\t\t\t\t'<div class=\"fc-content\">' +\n\t\t\t\t\t(this.isRTL ?\n\t\t\t\t\t\ttitleHtml + ' ' + timeHtml : // put a natural space in between\n\t\t\t\t\t\ttimeHtml + ' ' + titleHtml   //\n\t\t\t\t\t\t) +\n\t\t\t\t'</div>' +\n\t\t\t\t(isResizableFromStart ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t(isResizableFromEnd ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'</a>';\n\t},\n\n\n\t// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n\t// the segments. Returns object with a bunch of internal data about how the render was calculated.\n\t// NOTE: modifies rowSegs\n\trenderSegRow: function(row, rowSegs) {\n\t\tvar colCnt = this.colCnt;\n\t\tvar segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n\t\tvar levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n\t\tvar tbody = $('<tbody/>');\n\t\tvar segMatrix = []; // lookup for which segments are rendered into which level+col cells\n\t\tvar cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n\t\tvar loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n\t\tvar i, levelSegs;\n\t\tvar col;\n\t\tvar tr;\n\t\tvar j, seg;\n\t\tvar td;\n\n\t\t// populates empty cells from the current column (`col`) to `endCol`\n\t\tfunction emptyCellsUntil(endCol) {\n\t\t\twhile (col < endCol) {\n\t\t\t\t// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n\t\t\t\ttd = (loneCellMatrix[i - 1] || [])[col];\n\t\t\t\tif (td) {\n\t\t\t\t\ttd.attr(\n\t\t\t\t\t\t'rowspan',\n\t\t\t\t\t\tparseInt(td.attr('rowspan') || 1, 10) + 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttd = $('<td/>');\n\t\t\t\t\ttr.append(td);\n\t\t\t\t}\n\t\t\t\tcellMatrix[i][col] = td;\n\t\t\t\tloneCellMatrix[i][col] = td;\n\t\t\t\tcol++;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < levelCnt; i++) { // iterate through all levels\n\t\t\tlevelSegs = segLevels[i];\n\t\t\tcol = 0;\n\t\t\ttr = $('<tr/>');\n\n\t\t\tsegMatrix.push([]);\n\t\t\tcellMatrix.push([]);\n\t\t\tloneCellMatrix.push([]);\n\n\t\t\t// levelCnt might be 1 even though there are no actual levels. protect against this.\n\t\t\t// this single empty row is useful for styling.\n\t\t\tif (levelSegs) {\n\t\t\t\tfor (j = 0; j < levelSegs.length; j++) { // iterate through segments in level\n\t\t\t\t\tseg = levelSegs[j];\n\n\t\t\t\t\temptyCellsUntil(seg.leftCol);\n\n\t\t\t\t\t// create a container that occupies or more columns. append the event element.\n\t\t\t\t\ttd = $('<td class=\"fc-event-container\"/>').append(seg.el);\n\t\t\t\t\tif (seg.leftCol != seg.rightCol) {\n\t\t\t\t\t\ttd.attr('colspan', seg.rightCol - seg.leftCol + 1);\n\t\t\t\t\t}\n\t\t\t\t\telse { // a single-column segment\n\t\t\t\t\t\tloneCellMatrix[i][col] = td;\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (col <= seg.rightCol) {\n\t\t\t\t\t\tcellMatrix[i][col] = td;\n\t\t\t\t\t\tsegMatrix[i][col] = seg;\n\t\t\t\t\t\tcol++;\n\t\t\t\t\t}\n\n\t\t\t\t\ttr.append(td);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temptyCellsUntil(colCnt); // finish off the row\n\t\t\tthis.bookendCells(tr);\n\t\t\ttbody.append(tr);\n\t\t}\n\n\t\treturn { // a \"rowStruct\"\n\t\t\trow: row, // the row number\n\t\t\ttbodyEl: tbody,\n\t\t\tcellMatrix: cellMatrix,\n\t\t\tsegMatrix: segMatrix,\n\t\t\tsegLevels: segLevels,\n\t\t\tsegs: rowSegs\n\t\t};\n\t},\n\n\n\t// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n\t// NOTE: modifies segs\n\tbuildSegLevels: function(segs) {\n\t\tvar levels = [];\n\t\tvar i, seg;\n\t\tvar j;\n\n\t\t// Give preference to elements with certain criteria, so they have\n\t\t// a chance to be closer to the top.\n\t\tthis.sortEventSegs(segs);\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\n\t\t\t// loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n\t\t\tfor (j = 0; j < levels.length; j++) {\n\t\t\t\tif (!isDaySegCollision(seg, levels[j])) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// `j` now holds the desired subrow index\n\t\t\tseg.level = j;\n\n\t\t\t// create new level array if needed and append segment\n\t\t\t(levels[j] || (levels[j] = [])).push(seg);\n\t\t}\n\n\t\t// order segments left-to-right. very important if calendar is RTL\n\t\tfor (j = 0; j < levels.length; j++) {\n\t\t\tlevels[j].sort(compareDaySegCols);\n\t\t}\n\n\t\treturn levels;\n\t},\n\n\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n\tgroupSegRows: function(segs) {\n\t\tvar segRows = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < this.rowCnt; i++) {\n\t\t\tsegRows.push([]);\n\t\t}\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tsegRows[segs[i].row].push(segs[i]);\n\t\t}\n\n\t\treturn segRows;\n\t}\n\n});\n\n\n// Computes whether two segments' columns collide. They are assumed to be in the same row.\nfunction isDaySegCollision(seg, otherSegs) {\n\tvar i, otherSeg;\n\n\tfor (i = 0; i < otherSegs.length; i++) {\n\t\totherSeg = otherSegs[i];\n\n\t\tif (\n\t\t\totherSeg.leftCol <= seg.rightCol &&\n\t\t\totherSeg.rightCol >= seg.leftCol\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n\n// A cmp function for determining the leftmost event\nfunction compareDaySegCols(a, b) {\n\treturn a.leftCol - b.leftCol;\n}\n\n;;\n\n/* Methods relate to limiting the number events for a given day on a DayGrid\n----------------------------------------------------------------------------------------------------------------------*/\n// NOTE: all the segs being passed around in here are foreground segs\n\nDayGrid.mixin({\n\n\tsegPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible\n\tpopoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible\n\n\n\tremoveSegPopover: function() {\n\t\tif (this.segPopover) {\n\t\t\tthis.segPopover.hide(); // in handler, will call segPopover's removeElement\n\t\t}\n\t},\n\n\n\t// Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n\t// `levelLimit` can be false (don't limit), a number, or true (should be computed).\n\tlimitRows: function(levelLimit) {\n\t\tvar rowStructs = this.rowStructs || [];\n\t\tvar row; // row #\n\t\tvar rowLevelLimit;\n\n\t\tfor (row = 0; row < rowStructs.length; row++) {\n\t\t\tthis.unlimitRow(row);\n\n\t\t\tif (!levelLimit) {\n\t\t\t\trowLevelLimit = false;\n\t\t\t}\n\t\t\telse if (typeof levelLimit === 'number') {\n\t\t\t\trowLevelLimit = levelLimit;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trowLevelLimit = this.computeRowLevelLimit(row);\n\t\t\t}\n\n\t\t\tif (rowLevelLimit !== false) {\n\t\t\t\tthis.limitRow(row, rowLevelLimit);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Computes the number of levels a row will accomodate without going outside its bounds.\n\t// Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n\t// `row` is the row number.\n\tcomputeRowLevelLimit: function(row) {\n\t\tvar rowEl = this.rowEls.eq(row); // the containing \"fake\" row div\n\t\tvar rowHeight = rowEl.height(); // TODO: cache somehow?\n\t\tvar trEls = this.rowStructs[row].tbodyEl.children();\n\t\tvar i, trEl;\n\t\tvar trHeight;\n\n\t\tfunction iterInnerHeights(i, childNode) {\n\t\t\ttrHeight = Math.max(trHeight, $(childNode).outerHeight());\n\t\t}\n\n\t\t// Reveal one level <tr> at a time and stop when we find one out of bounds\n\t\tfor (i = 0; i < trEls.length; i++) {\n\t\t\ttrEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)\n\n\t\t\t// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,\n\t\t\t// so instead, find the tallest inner content element.\n\t\t\ttrHeight = 0;\n\t\t\ttrEl.find('> td > :first-child').each(iterInnerHeights);\n\n\t\t\tif (trEl.position().top + trHeight > rowHeight) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn false; // should not limit at all\n\t},\n\n\n\t// Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n\t// `row` is the row number.\n\t// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n\tlimitRow: function(row, levelLimit) {\n\t\tvar _this = this;\n\t\tvar rowStruct = this.rowStructs[row];\n\t\tvar moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n\t\tvar col = 0; // col #, left-to-right (not chronologically)\n\t\tvar levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n\t\tvar cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row\n\t\tvar limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n\t\tvar i, seg;\n\t\tvar segsBelow; // array of segment objects below `seg` in the current `col`\n\t\tvar totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n\t\tvar colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n\t\tvar td, rowspan;\n\t\tvar segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n\t\tvar j;\n\t\tvar moreTd, moreWrap, moreLink;\n\n\t\t// Iterates through empty level cells and places \"more\" links inside if need be\n\t\tfunction emptyCellsUntil(endCol) { // goes from current `col` to `endCol`\n\t\t\twhile (col < endCol) {\n\t\t\t\tsegsBelow = _this.getCellSegs(row, col, levelLimit);\n\t\t\t\tif (segsBelow.length) {\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][col];\n\t\t\t\t\tmoreLink = _this.renderMoreLink(row, col, segsBelow);\n\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);\n\t\t\t\t\ttd.append(moreWrap);\n\t\t\t\t\tmoreNodes.push(moreWrap[0]);\n\t\t\t\t}\n\t\t\t\tcol++;\n\t\t\t}\n\t\t}\n\n\t\tif (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?\n\t\t\tlevelSegs = rowStruct.segLevels[levelLimit - 1];\n\t\t\tcellMatrix = rowStruct.cellMatrix;\n\n\t\t\tlimitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit\n\t\t\t\t.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array\n\n\t\t\t// iterate though segments in the last allowable level\n\t\t\tfor (i = 0; i < levelSegs.length; i++) {\n\t\t\t\tseg = levelSegs[i];\n\t\t\t\temptyCellsUntil(seg.leftCol); // process empty cells before the segment\n\n\t\t\t\t// determine *all* segments below `seg` that occupy the same columns\n\t\t\t\tcolSegsBelow = [];\n\t\t\t\ttotalSegsBelow = 0;\n\t\t\t\twhile (col <= seg.rightCol) {\n\t\t\t\t\tsegsBelow = this.getCellSegs(row, col, levelLimit);\n\t\t\t\t\tcolSegsBelow.push(segsBelow);\n\t\t\t\t\ttotalSegsBelow += segsBelow.length;\n\t\t\t\t\tcol++;\n\t\t\t\t}\n\n\t\t\t\tif (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell\n\t\t\t\t\trowspan = td.attr('rowspan') || 1;\n\t\t\t\t\tsegMoreNodes = [];\n\n\t\t\t\t\t// make a replacement <td> for each column the segment occupies. will be one for each colspan\n\t\t\t\t\tfor (j = 0; j < colSegsBelow.length; j++) {\n\t\t\t\t\t\tmoreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);\n\t\t\t\t\t\tsegsBelow = colSegsBelow[j];\n\t\t\t\t\t\tmoreLink = this.renderMoreLink(\n\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\tseg.leftCol + j,\n\t\t\t\t\t\t\t[ seg ].concat(segsBelow) // count seg as hidden too\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);\n\t\t\t\t\t\tmoreTd.append(moreWrap);\n\t\t\t\t\t\tsegMoreNodes.push(moreTd[0]);\n\t\t\t\t\t\tmoreNodes.push(moreTd[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\ttd.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements\n\t\t\t\t\tlimitedNodes.push(td[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temptyCellsUntil(this.colCnt); // finish off the level\n\t\t\trowStruct.moreEls = $(moreNodes); // for easy undoing later\n\t\t\trowStruct.limitedEls = $(limitedNodes); // for easy undoing later\n\t\t}\n\t},\n\n\n\t// Reveals all levels and removes all \"more\"-related elements for a grid's row.\n\t// `row` is a row number.\n\tunlimitRow: function(row) {\n\t\tvar rowStruct = this.rowStructs[row];\n\n\t\tif (rowStruct.moreEls) {\n\t\t\trowStruct.moreEls.remove();\n\t\t\trowStruct.moreEls = null;\n\t\t}\n\n\t\tif (rowStruct.limitedEls) {\n\t\t\trowStruct.limitedEls.removeClass('fc-limited');\n\t\t\trowStruct.limitedEls = null;\n\t\t}\n\t},\n\n\n\t// Renders an <a> element that represents hidden event element for a cell.\n\t// Responsible for attaching click handler as well.\n\trenderMoreLink: function(row, col, hiddenSegs) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\n\t\treturn $('<a class=\"fc-more\"/>')\n\t\t\t.text(\n\t\t\t\tthis.getMoreLinkText(hiddenSegs.length)\n\t\t\t)\n\t\t\t.on('click', function(ev) {\n\t\t\t\tvar clickOption = view.opt('eventLimitClick');\n\t\t\t\tvar date = _this.getCellDate(row, col);\n\t\t\t\tvar moreEl = $(this);\n\t\t\t\tvar dayEl = _this.getCellEl(row, col);\n\t\t\t\tvar allSegs = _this.getCellSegs(row, col);\n\n\t\t\t\t// rescope the segments to be within the cell's date\n\t\t\t\tvar reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n\t\t\t\tvar reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n\n\t\t\t\tif (typeof clickOption === 'function') {\n\t\t\t\t\t// the returned value can be an atomic option\n\t\t\t\t\tclickOption = view.publiclyTrigger('eventLimitClick', null, {\n\t\t\t\t\t\tdate: date,\n\t\t\t\t\t\tdayEl: dayEl,\n\t\t\t\t\t\tmoreEl: moreEl,\n\t\t\t\t\t\tsegs: reslicedAllSegs,\n\t\t\t\t\t\thiddenSegs: reslicedHiddenSegs\n\t\t\t\t\t}, ev);\n\t\t\t\t}\n\n\t\t\t\tif (clickOption === 'popover') {\n\t\t\t\t\t_this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n\t\t\t\t}\n\t\t\t\telse if (typeof clickOption === 'string') { // a view name\n\t\t\t\t\tview.calendar.zoomTo(date, clickOption);\n\t\t\t\t}\n\t\t\t});\n\t},\n\n\n\t// Reveals the popover that displays all events within a cell\n\tshowSegPopover: function(row, col, moreLink, segs) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar moreWrap = moreLink.parent(); // the <div> wrapper around the <a>\n\t\tvar topEl; // the element we want to match the top coordinate of\n\t\tvar options;\n\n\t\tif (this.rowCnt == 1) {\n\t\t\ttopEl = view.el; // will cause the popover to cover any sort of header\n\t\t}\n\t\telse {\n\t\t\ttopEl = this.rowEls.eq(row); // will align with top of row\n\t\t}\n\n\t\toptions = {\n\t\t\tclassName: 'fc-more-popover',\n\t\t\tcontent: this.renderSegPopoverContent(row, col, segs),\n\t\t\tparentEl: this.view.el, // attach to root of view. guarantees outside of scrollbars.\n\t\t\ttop: topEl.offset().top,\n\t\t\tautoHide: true, // when the user clicks elsewhere, hide the popover\n\t\t\tviewportConstrain: view.opt('popoverViewportConstrain'),\n\t\t\thide: function() {\n\t\t\t\t// kill everything when the popover is hidden\n\t\t\t\t// notify events to be removed\n\t\t\t\tif (_this.popoverSegs) {\n\t\t\t\t\tvar seg;\n\t\t\t\t\tfor (var i = 0; i < _this.popoverSegs.length; ++i) {\n\t\t\t\t\t\tseg = _this.popoverSegs[i];\n\t\t\t\t\t\tview.publiclyTrigger('eventDestroy', seg.event, seg.event, seg.el);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_this.segPopover.removeElement();\n\t\t\t\t_this.segPopover = null;\n\t\t\t\t_this.popoverSegs = null;\n\t\t\t}\n\t\t};\n\n\t\t// Determine horizontal coordinate.\n\t\t// We use the moreWrap instead of the <td> to avoid border confusion.\n\t\tif (this.isRTL) {\n\t\t\toptions.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border\n\t\t}\n\t\telse {\n\t\t\toptions.left = moreWrap.offset().left - 1; // -1 to be over cell border\n\t\t}\n\n\t\tthis.segPopover = new Popover(options);\n\t\tthis.segPopover.show();\n\n\t\t// the popover doesn't live within the grid's container element, and thus won't get the event\n\t\t// delegated-handlers for free. attach event-related handlers to the popover.\n\t\tthis.bindSegHandlersToEl(this.segPopover.el);\n\t},\n\n\n\t// Builds the inner DOM contents of the segment popover\n\trenderSegPopoverContent: function(row, col, segs) {\n\t\tvar view = this.view;\n\t\tvar isTheme = view.opt('theme');\n\t\tvar title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));\n\t\tvar content = $(\n\t\t\t'<div class=\"fc-header ' + view.widgetHeaderClass + '\">' +\n\t\t\t\t'<span class=\"fc-close ' +\n\t\t\t\t\t(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +\n\t\t\t\t'\"></span>' +\n\t\t\t\t'<span class=\"fc-title\">' +\n\t\t\t\t\thtmlEscape(title) +\n\t\t\t\t'</span>' +\n\t\t\t\t'<div class=\"fc-clear\"/>' +\n\t\t\t'</div>' +\n\t\t\t'<div class=\"fc-body ' + view.widgetContentClass + '\">' +\n\t\t\t\t'<div class=\"fc-event-container\"></div>' +\n\t\t\t'</div>'\n\t\t);\n\t\tvar segContainer = content.find('.fc-event-container');\n\t\tvar i;\n\n\t\t// render each seg's `el` and only return the visible segs\n\t\tsegs = this.renderFgSegEls(segs, true); // disableResizing=true\n\t\tthis.popoverSegs = segs;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\n\t\t\t// because segments in the popover are not part of a grid coordinate system, provide a hint to any\n\t\t\t// grids that want to do drag-n-drop about which cell it came from\n\t\t\tthis.prepareHits();\n\t\t\tsegs[i].hit = this.getCellHit(row, col);\n\t\t\tthis.releaseHits();\n\n\t\t\tsegContainer.append(segs[i].el);\n\t\t}\n\n\t\treturn content;\n\t},\n\n\n\t// Given the events within an array of segment objects, reslice them to be in a single day\n\tresliceDaySegs: function(segs, dayDate) {\n\n\t\t// build an array of the original events\n\t\tvar events = $.map(segs, function(seg) {\n\t\t\treturn seg.event;\n\t\t});\n\n\t\tvar dayStart = dayDate.clone();\n\t\tvar dayEnd = dayStart.clone().add(1, 'days');\n\t\tvar dayRange = { start: dayStart, end: dayEnd };\n\n\t\t// slice the events with a custom slicing function\n\t\tsegs = this.eventsToSegs(\n\t\t\tevents,\n\t\t\tfunction(range) {\n\t\t\t\tvar seg = intersectRanges(range, dayRange); // undefind if no intersection\n\t\t\t\treturn seg ? [ seg ] : []; // must return an array of segments\n\t\t\t}\n\t\t);\n\n\t\t// force an order because eventsToSegs doesn't guarantee one\n\t\tthis.sortEventSegs(segs);\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the text that should be inside a \"more\" link, given the number of events it represents\n\tgetMoreLinkText: function(num) {\n\t\tvar opt = this.view.opt('eventLimitText');\n\n\t\tif (typeof opt === 'function') {\n\t\t\treturn opt(num);\n\t\t}\n\t\telse {\n\t\t\treturn '+' + num + ' ' + opt;\n\t\t}\n\t},\n\n\n\t// Returns segments within a given cell.\n\t// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n\tgetCellSegs: function(row, col, startLevel) {\n\t\tvar segMatrix = this.rowStructs[row].segMatrix;\n\t\tvar level = startLevel || 0;\n\t\tvar segs = [];\n\t\tvar seg;\n\n\t\twhile (level < segMatrix.length) {\n\t\t\tseg = segMatrix[level][col];\n\t\t\tif (seg) {\n\t\t\t\tsegs.push(seg);\n\t\t\t}\n\t\t\tlevel++;\n\t\t}\n\n\t\treturn segs;\n\t}\n\n});\n\n;;\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// We mixin DayTable, even though there is only a single row of days\n\nvar TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {\n\n\tslotDuration: null, // duration of a \"slot\", a distinct time segment on given day, visualized by lines\n\tsnapDuration: null, // granularity of time for dragging and selecting\n\tsnapsPerSlot: null,\n\tminTime: null, // Duration object that denotes the first visible time of any given day\n\tmaxTime: null, // Duration object that denotes the exclusive visible end time of any given day\n\tlabelFormat: null, // formatting string for times running along vertical axis\n\tlabelInterval: null, // duration of how often a label should be displayed for a slot\n\n\tcolEls: null, // cells elements in the day-row background\n\tslatContainerEl: null, // div that wraps all the slat rows\n\tslatEls: null, // elements running horizontally across all columns\n\tnowIndicatorEls: null,\n\n\tcolCoordCache: null,\n\tslatCoordCache: null,\n\n\n\tconstructor: function() {\n\t\tGrid.apply(this, arguments); // call the super-constructor\n\n\t\tthis.processOptions();\n\t},\n\n\n\t// Renders the time grid into `this.el`, which should already be assigned.\n\t// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.\n\trenderDates: function() {\n\t\tthis.el.html(this.renderHtml());\n\t\tthis.colEls = this.el.find('.fc-day');\n\t\tthis.slatContainerEl = this.el.find('.fc-slats');\n\t\tthis.slatEls = this.slatContainerEl.find('tr');\n\n\t\tthis.colCoordCache = new CoordCache({\n\t\t\tels: this.colEls,\n\t\t\tisHorizontal: true\n\t\t});\n\t\tthis.slatCoordCache = new CoordCache({\n\t\t\tels: this.slatEls,\n\t\t\tisVertical: true\n\t\t});\n\n\t\tthis.renderContentSkeleton();\n\t},\n\n\n\t// Renders the basic HTML skeleton for the grid\n\trenderHtml: function() {\n\t\treturn '' +\n\t\t\t'<div class=\"fc-bg\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\tthis.renderBgTrHtml(0) + // row=0\n\t\t\t\t'</table>' +\n\t\t\t'</div>' +\n\t\t\t'<div class=\"fc-slats\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\tthis.renderSlatRowHtml() +\n\t\t\t\t'</table>' +\n\t\t\t'</div>';\n\t},\n\n\n\t// Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n\trenderSlatRowHtml: function() {\n\t\tvar view = this.view;\n\t\tvar isRTL = this.isRTL;\n\t\tvar html = '';\n\t\tvar slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations\n\t\tvar slotDate; // will be on the view's first day, but we only care about its time\n\t\tvar isLabeled;\n\t\tvar axisHtml;\n\n\t\t// Calculate the time for each slot\n\t\twhile (slotTime < this.maxTime) {\n\t\t\tslotDate = this.start.clone().time(slotTime);\n\t\t\tisLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));\n\n\t\t\taxisHtml =\n\t\t\t\t'<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t\t(isLabeled ?\n\t\t\t\t\t\t'<span>' + // for matchCellWidths\n\t\t\t\t\t\t\thtmlEscape(slotDate.format(this.labelFormat)) +\n\t\t\t\t\t\t'</span>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t'</td>';\n\n\t\t\thtml +=\n\t\t\t\t'<tr data-time=\"' + slotDate.format('HH:mm:ss') + '\"' +\n\t\t\t\t\t(isLabeled ? '' : ' class=\"fc-minor\"') +\n\t\t\t\t\t'>' +\n\t\t\t\t\t(!isRTL ? axisHtml : '') +\n\t\t\t\t\t'<td class=\"' + view.widgetContentClass + '\"/>' +\n\t\t\t\t\t(isRTL ? axisHtml : '') +\n\t\t\t\t\"</tr>\";\n\n\t\t\tslotTime.add(this.slotDuration);\n\t\t}\n\n\t\treturn html;\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Parses various options into properties of this object\n\tprocessOptions: function() {\n\t\tvar view = this.view;\n\t\tvar slotDuration = view.opt('slotDuration');\n\t\tvar snapDuration = view.opt('snapDuration');\n\t\tvar input;\n\n\t\tslotDuration = moment.duration(slotDuration);\n\t\tsnapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;\n\n\t\tthis.slotDuration = slotDuration;\n\t\tthis.snapDuration = snapDuration;\n\t\tthis.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?\n\n\t\tthis.minResizeDuration = snapDuration; // hack\n\n\t\tthis.minTime = moment.duration(view.opt('minTime'));\n\t\tthis.maxTime = moment.duration(view.opt('maxTime'));\n\n\t\t// might be an array value (for TimelineView).\n\t\t// if so, getting the most granular entry (the last one probably).\n\t\tinput = view.opt('slotLabelFormat');\n\t\tif ($.isArray(input)) {\n\t\t\tinput = input[input.length - 1];\n\t\t}\n\n\t\tthis.labelFormat =\n\t\t\tinput ||\n\t\t\tview.opt('smallTimeFormat'); // the computed default\n\n\t\tinput = view.opt('slotLabelInterval');\n\t\tthis.labelInterval = input ?\n\t\t\tmoment.duration(input) :\n\t\t\tthis.computeLabelInterval(slotDuration);\n\t},\n\n\n\t// Computes an automatic value for slotLabelInterval\n\tcomputeLabelInterval: function(slotDuration) {\n\t\tvar i;\n\t\tvar labelInterval;\n\t\tvar slotsPerLabel;\n\n\t\t// find the smallest stock label interval that results in more than one slots-per-label\n\t\tfor (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n\t\t\tlabelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);\n\t\t\tslotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);\n\t\t\tif (isInt(slotsPerLabel) && slotsPerLabel > 1) {\n\t\t\t\treturn labelInterval;\n\t\t\t}\n\t\t}\n\n\t\treturn moment.duration(slotDuration); // fall back. clone\n\t},\n\n\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)\n\t},\n\n\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined\n\tcomputeDisplayEventEnd: function() {\n\t\treturn true;\n\t},\n\n\n\t/* Hit System\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tprepareHits: function() {\n\t\tthis.colCoordCache.build();\n\t\tthis.slatCoordCache.build();\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.colCoordCache.clear();\n\t\t// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop\n\t},\n\n\n\tqueryHit: function(leftOffset, topOffset) {\n\t\tvar snapsPerSlot = this.snapsPerSlot;\n\t\tvar colCoordCache = this.colCoordCache;\n\t\tvar slatCoordCache = this.slatCoordCache;\n\n\t\tif (colCoordCache.isLeftInBounds(leftOffset) && slatCoordCache.isTopInBounds(topOffset)) {\n\t\t\tvar colIndex = colCoordCache.getHorizontalIndex(leftOffset);\n\t\t\tvar slatIndex = slatCoordCache.getVerticalIndex(topOffset);\n\n\t\t\tif (colIndex != null && slatIndex != null) {\n\t\t\t\tvar slatTop = slatCoordCache.getTopOffset(slatIndex);\n\t\t\t\tvar slatHeight = slatCoordCache.getHeight(slatIndex);\n\t\t\t\tvar partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1\n\t\t\t\tvar localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\t\t\t\tvar snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n\t\t\t\tvar snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;\n\t\t\t\tvar snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;\n\n\t\t\t\treturn {\n\t\t\t\t\tcol: colIndex,\n\t\t\t\t\tsnap: snapIndex,\n\t\t\t\t\tcomponent: this, // needed unfortunately :(\n\t\t\t\t\tleft: colCoordCache.getLeftOffset(colIndex),\n\t\t\t\t\tright: colCoordCache.getRightOffset(colIndex),\n\t\t\t\t\ttop: snapTop,\n\t\t\t\t\tbottom: snapBottom\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\tvar start = this.getCellDate(0, hit.col); // row=0\n\t\tvar time = this.computeSnapTime(hit.snap); // pass in the snap-index\n\t\tvar end;\n\n\t\tstart.time(time);\n\t\tend = start.clone().add(this.snapDuration);\n\n\t\treturn { start: start, end: end };\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.colEls.eq(hit.col);\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trangeUpdated: function() {\n\t\tthis.updateDayTable();\n\t},\n\n\n\t// Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day\n\tcomputeSnapTime: function(snapIndex) {\n\t\treturn moment.duration(this.minTime + this.snapDuration * snapIndex);\n\t},\n\n\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments\n\tspanToSegs: function(span) {\n\t\tvar segs = this.sliceRangeByTimes(span);\n\t\tvar i;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tif (this.isRTL) {\n\t\t\t\tsegs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsegs[i].col = segs[i].dayIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\tsliceRangeByTimes: function(range) {\n\t\tvar segs = [];\n\t\tvar seg;\n\t\tvar dayIndex;\n\t\tvar dayDate;\n\t\tvar dayRange;\n\n\t\tfor (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {\n\t\t\tdayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?\n\t\t\tdayRange = {\n\t\t\t\tstart: dayDate.clone().time(this.minTime),\n\t\t\t\tend: dayDate.clone().time(this.maxTime)\n\t\t\t};\n\t\t\tseg = intersectRanges(range, dayRange); // both will be ambig timezone\n\t\t\tif (seg) {\n\t\t\t\tseg.dayIndex = dayIndex;\n\t\t\t\tsegs.push(seg);\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Coordinates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tupdateSize: function(isResize) { // NOT a standard Grid method\n\t\tthis.slatCoordCache.build();\n\n\t\tif (isResize) {\n\t\t\tthis.updateSegVerticals(\n\t\t\t\t[].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || [])\n\t\t\t);\n\t\t}\n\t},\n\n\n\tgetTotalSlatHeight: function() {\n\t\treturn this.slatContainerEl.outerHeight();\n\t},\n\n\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given date.\n\t// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\tcomputeDateTop: function(date, startOfDayDate) {\n\t\treturn this.computeTimeTop(\n\t\t\tmoment.duration(\n\t\t\t\tdate - startOfDayDate.clone().stripTime()\n\t\t\t)\n\t\t);\n\t},\n\n\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n\tcomputeTimeTop: function(time) {\n\t\tvar len = this.slatEls.length;\n\t\tvar slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered\n\t\tvar slatIndex;\n\t\tvar slatRemainder;\n\n\t\t// compute a floating-point number for how many slats should be progressed through.\n\t\t// from 0 to number of slats (inclusive)\n\t\t// constrained because minTime/maxTime might be customized.\n\t\tslatCoverage = Math.max(0, slatCoverage);\n\t\tslatCoverage = Math.min(len, slatCoverage);\n\n\t\t// an integer index of the furthest whole slat\n\t\t// from 0 to number slats (*exclusive*, so len-1)\n\t\tslatIndex = Math.floor(slatCoverage);\n\t\tslatIndex = Math.min(slatIndex, len - 1);\n\n\t\t// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n\t\t// could be 1.0 if slatCoverage is covering *all* the slots\n\t\tslatRemainder = slatCoverage - slatIndex;\n\n\t\treturn this.slatCoordCache.getTopPosition(slatIndex) +\n\t\t\tthis.slatCoordCache.getHeight(slatIndex) * slatRemainder;\n\t},\n\n\n\n\t/* Event Drag Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being dragged over the specified date(s).\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(eventLocation, seg) {\n\n\t\tif (seg) { // if there is event information for this drag, render a helper event\n\n\t\t\t// returns mock event elements\n\t\t\t// signal that a helper has been rendered\n\t\t\treturn this.renderEventLocationHelper(eventLocation, seg);\n\t\t}\n\t\telse {\n\t\t\t// otherwise, just render a highlight\n\t\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of an event being dragged\n\tunrenderDrag: function() {\n\t\tthis.unrenderHelper();\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t/* Event Resize Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being resized\n\trenderEventResize: function(eventLocation, seg) {\n\t\treturn this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n\t},\n\n\n\t// Unrenders any visual indication of an event being resized\n\tunrenderEventResize: function() {\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)\n\trenderHelper: function(event, sourceSeg) {\n\t\treturn this.renderHelperSegs(this.eventToSegs(event), sourceSeg); // returns mock event elements\n\t},\n\n\n\t// Unrenders any mock helper event\n\tunrenderHelper: function() {\n\t\tthis.unrenderHelperSegs();\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBusinessHours: function() {\n\t\tthis.renderBusinessSegs(\n\t\t\tthis.buildBusinessHourSegs()\n\t\t);\n\t},\n\n\n\tunrenderBusinessHours: function() {\n\t\tthis.unrenderBusinessSegs();\n\t},\n\n\n\t/* Now Indicator\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tgetNowIndicatorUnit: function() {\n\t\treturn 'minute'; // will refresh on the minute\n\t},\n\n\n\trenderNowIndicator: function(date) {\n\t\t// seg system might be overkill, but it handles scenario where line needs to be rendered\n\t\t//  more than once because of columns with the same date (resources columns for example)\n\t\tvar segs = this.spanToSegs({ start: date, end: date });\n\t\tvar top = this.computeDateTop(date, date);\n\t\tvar nodes = [];\n\t\tvar i;\n\n\t\t// render lines within the columns\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tnodes.push($('<div class=\"fc-now-indicator fc-now-indicator-line\"></div>')\n\t\t\t\t.css('top', top)\n\t\t\t\t.appendTo(this.colContainerEls.eq(segs[i].col))[0]);\n\t\t}\n\n\t\t// render an arrow over the axis\n\t\tif (segs.length > 0) { // is the current time in view?\n\t\t\tnodes.push($('<div class=\"fc-now-indicator fc-now-indicator-arrow\"></div>')\n\t\t\t\t.css('top', top)\n\t\t\t\t.appendTo(this.el.find('.fc-content-skeleton'))[0]);\n\t\t}\n\n\t\tthis.nowIndicatorEls = $(nodes);\n\t},\n\n\n\tunrenderNowIndicator: function() {\n\t\tif (this.nowIndicatorEls) {\n\t\t\tthis.nowIndicatorEls.remove();\n\t\t\tthis.nowIndicatorEls = null;\n\t\t}\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n\trenderSelection: function(span) {\n\t\tif (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered\n\n\t\t\t// normally acceps an eventLocation, span has a start/end, which is good enough\n\t\t\tthis.renderEventLocationHelper(span);\n\t\t}\n\t\telse {\n\t\t\tthis.renderHighlight(span);\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of a selection\n\tunrenderSelection: function() {\n\t\tthis.unrenderHelper();\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t/* Highlight\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderHighlight: function(span) {\n\t\tthis.renderHighlightSegs(this.spanToSegs(span));\n\t},\n\n\n\tunrenderHighlight: function() {\n\t\tthis.unrenderHighlightSegs();\n\t}\n\n});\n\n;;\n\n/* Methods for rendering SEGMENTS, pieces of content that live on the view\n ( this file is no longer just for events )\n----------------------------------------------------------------------------------------------------------------------*/\n\nTimeGrid.mixin({\n\n\tcolContainerEls: null, // containers for each column\n\n\t// inner-containers for each column where different types of segs live\n\tfgContainerEls: null,\n\tbgContainerEls: null,\n\thelperContainerEls: null,\n\thighlightContainerEls: null,\n\tbusinessContainerEls: null,\n\n\t// arrays of different types of displayed segments\n\tfgSegs: null,\n\tbgSegs: null,\n\thelperSegs: null,\n\thighlightSegs: null,\n\tbusinessSegs: null,\n\n\n\t// Renders the DOM that the view's content will live in\n\trenderContentSkeleton: function() {\n\t\tvar cellHtml = '';\n\t\tvar i;\n\t\tvar skeletonEl;\n\n\t\tfor (i = 0; i < this.colCnt; i++) {\n\t\t\tcellHtml +=\n\t\t\t\t'<td>' +\n\t\t\t\t\t'<div class=\"fc-content-col\">' +\n\t\t\t\t\t\t'<div class=\"fc-event-container fc-helper-container\"></div>' +\n\t\t\t\t\t\t'<div class=\"fc-event-container\"></div>' +\n\t\t\t\t\t\t'<div class=\"fc-highlight-container\"></div>' +\n\t\t\t\t\t\t'<div class=\"fc-bgevent-container\"></div>' +\n\t\t\t\t\t\t'<div class=\"fc-business-container\"></div>' +\n\t\t\t\t\t'</div>' +\n\t\t\t\t'</td>';\n\t\t}\n\n\t\tskeletonEl = $(\n\t\t\t'<div class=\"fc-content-skeleton\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\t'<tr>' + cellHtml + '</tr>' +\n\t\t\t\t'</table>' +\n\t\t\t'</div>'\n\t\t);\n\n\t\tthis.colContainerEls = skeletonEl.find('.fc-content-col');\n\t\tthis.helperContainerEls = skeletonEl.find('.fc-helper-container');\n\t\tthis.fgContainerEls = skeletonEl.find('.fc-event-container:not(.fc-helper-container)');\n\t\tthis.bgContainerEls = skeletonEl.find('.fc-bgevent-container');\n\t\tthis.highlightContainerEls = skeletonEl.find('.fc-highlight-container');\n\t\tthis.businessContainerEls = skeletonEl.find('.fc-business-container');\n\n\t\tthis.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level\n\t\tthis.el.append(skeletonEl);\n\t},\n\n\n\t/* Foreground Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderFgSegs: function(segs) {\n\t\tsegs = this.renderFgSegsIntoContainers(segs, this.fgContainerEls);\n\t\tthis.fgSegs = segs;\n\t\treturn segs; // needed for Grid::renderEvents\n\t},\n\n\n\tunrenderFgSegs: function() {\n\t\tthis.unrenderNamedSegs('fgSegs');\n\t},\n\n\n\t/* Foreground Helper Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderHelperSegs: function(segs, sourceSeg) {\n\t\tvar helperEls = [];\n\t\tvar i, seg;\n\t\tvar sourceEl;\n\n\t\tsegs = this.renderFgSegsIntoContainers(segs, this.helperContainerEls);\n\n\t\t// Try to make the segment that is in the same row as sourceSeg look the same\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tif (sourceSeg && sourceSeg.col === seg.col) {\n\t\t\t\tsourceEl = sourceSeg.el;\n\t\t\t\tseg.el.css({\n\t\t\t\t\tleft: sourceEl.css('left'),\n\t\t\t\t\tright: sourceEl.css('right'),\n\t\t\t\t\t'margin-left': sourceEl.css('margin-left'),\n\t\t\t\t\t'margin-right': sourceEl.css('margin-right')\n\t\t\t\t});\n\t\t\t}\n\t\t\thelperEls.push(seg.el[0]);\n\t\t}\n\n\t\tthis.helperSegs = segs;\n\n\t\treturn $(helperEls); // must return rendered helpers\n\t},\n\n\n\tunrenderHelperSegs: function() {\n\t\tthis.unrenderNamedSegs('helperSegs');\n\t},\n\n\n\t/* Background Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBgSegs: function(segs) {\n\t\tsegs = this.renderFillSegEls('bgEvent', segs); // TODO: old fill system\n\t\tthis.updateSegVerticals(segs);\n\t\tthis.attachSegsByCol(this.groupSegsByCol(segs), this.bgContainerEls);\n\t\tthis.bgSegs = segs;\n\t\treturn segs; // needed for Grid::renderEvents\n\t},\n\n\n\tunrenderBgSegs: function() {\n\t\tthis.unrenderNamedSegs('bgSegs');\n\t},\n\n\n\t/* Highlight\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderHighlightSegs: function(segs) {\n\t\tsegs = this.renderFillSegEls('highlight', segs); // TODO: old fill system\n\t\tthis.updateSegVerticals(segs);\n\t\tthis.attachSegsByCol(this.groupSegsByCol(segs), this.highlightContainerEls);\n\t\tthis.highlightSegs = segs;\n\t},\n\n\n\tunrenderHighlightSegs: function() {\n\t\tthis.unrenderNamedSegs('highlightSegs');\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBusinessSegs: function(segs) {\n\t\tsegs = this.renderFillSegEls('businessHours', segs); // TODO: old fill system\n\t\tthis.updateSegVerticals(segs);\n\t\tthis.attachSegsByCol(this.groupSegsByCol(segs), this.businessContainerEls);\n\t\tthis.businessSegs = segs;\n\t},\n\n\n\tunrenderBusinessSegs: function() {\n\t\tthis.unrenderNamedSegs('businessSegs');\n\t},\n\n\n\t/* Seg Rendering Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n\tgroupSegsByCol: function(segs) {\n\t\tvar segsByCol = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < this.colCnt; i++) {\n\t\t\tsegsByCol.push([]);\n\t\t}\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tsegsByCol[segs[i].col].push(segs[i]);\n\t\t}\n\n\t\treturn segsByCol;\n\t},\n\n\n\t// Given segments grouped by column, insert the segments' elements into a parallel array of container\n\t// elements, each living within a column.\n\tattachSegsByCol: function(segsByCol, containerEls) {\n\t\tvar col;\n\t\tvar segs;\n\t\tvar i;\n\n\t\tfor (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n\t\t\tsegs = segsByCol[col];\n\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\tcontainerEls.eq(col).append(segs[i].el);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Given the name of a property of `this` object, assumed to be an array of segments,\n\t// loops through each segment and removes from DOM. Will null-out the property afterwards.\n\tunrenderNamedSegs: function(propName) {\n\t\tvar segs = this[propName];\n\t\tvar i;\n\n\t\tif (segs) {\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\tsegs[i].el.remove();\n\t\t\t}\n\t\t\tthis[propName] = null;\n\t\t}\n\t},\n\n\n\n\t/* Foreground Event Rendering Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Given an array of foreground segments, render a DOM element for each, computes position,\n\t// and attaches to the column inner-container elements.\n\trenderFgSegsIntoContainers: function(segs, containerEls) {\n\t\tvar segsByCol;\n\t\tvar col;\n\n\t\tsegs = this.renderFgSegEls(segs); // will call fgSegHtml\n\t\tsegsByCol = this.groupSegsByCol(segs);\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tthis.updateFgSegCoords(segsByCol[col]);\n\t\t}\n\n\t\tthis.attachSegsByCol(segsByCol, containerEls);\n\n\t\treturn segs;\n\t},\n\n\n\t// Renders the HTML for a single event segment's default rendering\n\tfgSegHtml: function(seg, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar isDraggable = view.isEventDraggable(event);\n\t\tvar isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);\n\t\tvar isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n\t\tvar skinCss = cssToStr(this.getSegSkinCss(seg));\n\t\tvar timeText;\n\t\tvar fullTimeText; // more verbose time text. for the print stylesheet\n\t\tvar startTimeText; // just the start time text\n\n\t\tclasses.unshift('fc-time-grid-event', 'fc-v-event');\n\n\t\tif (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...\n\t\t\t// Don't display time text on segments that run entirely through a day.\n\t\t\t// That would appear as midnight-midnight and would look dumb.\n\t\t\t// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n\t\t\tif (seg.isStart || seg.isEnd) {\n\t\t\t\ttimeText = this.getEventTimeText(seg);\n\t\t\t\tfullTimeText = this.getEventTimeText(seg, 'LT');\n\t\t\t\tstartTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false\n\t\t\t}\n\t\t} else {\n\t\t\t// Display the normal time text for the *event's* times\n\t\t\ttimeText = this.getEventTimeText(event);\n\t\t\tfullTimeText = this.getEventTimeText(event, 'LT');\n\t\t\tstartTimeText = this.getEventTimeText(event, null, false); // displayEnd=false\n\t\t}\n\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +\n\t\t\t(event.url ?\n\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :\n\t\t\t\t''\n\t\t\t\t) +\n\t\t\t(skinCss ?\n\t\t\t\t' style=\"' + skinCss + '\"' :\n\t\t\t\t''\n\t\t\t\t) +\n\t\t\t'>' +\n\t\t\t\t'<div class=\"fc-content\">' +\n\t\t\t\t\t(timeText ?\n\t\t\t\t\t\t'<div class=\"fc-time\"' +\n\t\t\t\t\t\t' data-start=\"' + htmlEscape(startTimeText) + '\"' +\n\t\t\t\t\t\t' data-full=\"' + htmlEscape(fullTimeText) + '\"' +\n\t\t\t\t\t\t'>' +\n\t\t\t\t\t\t\t'<span>' + htmlEscape(timeText) + '</span>' +\n\t\t\t\t\t\t'</div>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t\t(event.title ?\n\t\t\t\t\t\t'<div class=\"fc-title\">' +\n\t\t\t\t\t\t\thtmlEscape(event.title) +\n\t\t\t\t\t\t'</div>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t'</div>' +\n\t\t\t\t'<div class=\"fc-bg\"/>' +\n\t\t\t\t/* TODO: write CSS for this\n\t\t\t\t(isResizableFromStart ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t*/\n\t\t\t\t(isResizableFromEnd ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'</a>';\n\t},\n\n\n\t/* Seg Position Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Refreshes the CSS top/bottom coordinates for each segment element.\n\t// Works when called after initial render, after a window resize/zoom for example.\n\tupdateSegVerticals: function(segs) {\n\t\tthis.computeSegVerticals(segs);\n\t\tthis.assignSegVerticals(segs);\n\t},\n\n\n\t// For each segment in an array, computes and assigns its top and bottom properties\n\tcomputeSegVerticals: function(segs) {\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tseg.top = this.computeDateTop(seg.start, seg.start);\n\t\t\tseg.bottom = this.computeDateTop(seg.end, seg.start);\n\t\t}\n\t},\n\n\n\t// Given segments that already have their top/bottom properties computed, applies those values to\n\t// the segments' elements.\n\tassignSegVerticals: function(segs) {\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tseg.el.css(this.generateSegVerticalCss(seg));\n\t\t}\n\t},\n\n\n\t// Generates an object with CSS properties for the top/bottom coordinates of a segment element\n\tgenerateSegVerticalCss: function(seg) {\n\t\treturn {\n\t\t\ttop: seg.top,\n\t\t\tbottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\t\t};\n\t},\n\n\n\t/* Foreground Event Positioning Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Given segments that are assumed to all live in the *same column*,\n\t// compute their verical/horizontal coordinates and assign to their elements.\n\tupdateFgSegCoords: function(segs) {\n\t\tthis.computeSegVerticals(segs); // horizontals relies on this\n\t\tthis.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array\n\t\tthis.assignSegVerticals(segs);\n\t\tthis.assignFgSegHorizontals(segs);\n\t},\n\n\n\t// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n\t// NOTE: Also reorders the given array by date!\n\tcomputeFgSegHorizontals: function(segs) {\n\t\tvar levels;\n\t\tvar level0;\n\t\tvar i;\n\n\t\tthis.sortEventSegs(segs); // order by certain criteria\n\t\tlevels = buildSlotSegLevels(segs);\n\t\tcomputeForwardSlotSegs(levels);\n\n\t\tif ((level0 = levels[0])) {\n\n\t\t\tfor (i = 0; i < level0.length; i++) {\n\t\t\t\tcomputeSlotSegPressures(level0[i]);\n\t\t\t}\n\n\t\t\tfor (i = 0; i < level0.length; i++) {\n\t\t\t\tthis.computeFgSegForwardBack(level0[i], 0, 0);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n\t// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n\t// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n\t//\n\t// The segment might be part of a \"series\", which means consecutive segments with the same pressure\n\t// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n\t// segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n\t// coordinate of the first segment in the series.\n\tcomputeFgSegForwardBack: function(seg, seriesBackwardPressure, seriesBackwardCoord) {\n\t\tvar forwardSegs = seg.forwardSegs;\n\t\tvar i;\n\n\t\tif (seg.forwardCoord === undefined) { // not already computed\n\n\t\t\tif (!forwardSegs.length) {\n\n\t\t\t\t// if there are no forward segments, this segment should butt up against the edge\n\t\t\t\tseg.forwardCoord = 1;\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// sort highest pressure first\n\t\t\t\tthis.sortForwardSegs(forwardSegs);\n\n\t\t\t\t// this segment's forwardCoord will be calculated from the backwardCoord of the\n\t\t\t\t// highest-pressure forward segment.\n\t\t\t\tthis.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n\t\t\t\tseg.forwardCoord = forwardSegs[0].backwardCoord;\n\t\t\t}\n\n\t\t\t// calculate the backwardCoord from the forwardCoord. consider the series\n\t\t\tseg.backwardCoord = seg.forwardCoord -\n\t\t\t\t(seg.forwardCoord - seriesBackwardCoord) / // available width for series\n\t\t\t\t(seriesBackwardPressure + 1); // # of segments in the series\n\n\t\t\t// use this segment's coordinates to computed the coordinates of the less-pressurized\n\t\t\t// forward segments\n\t\t\tfor (i=0; i<forwardSegs.length; i++) {\n\t\t\t\tthis.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tsortForwardSegs: function(forwardSegs) {\n\t\tforwardSegs.sort(proxy(this, 'compareForwardSegs'));\n\t},\n\n\n\t// A cmp function for determining which forward segment to rely on more when computing coordinates.\n\tcompareForwardSegs: function(seg1, seg2) {\n\t\t// put higher-pressure first\n\t\treturn seg2.forwardPressure - seg1.forwardPressure ||\n\t\t\t// put segments that are closer to initial edge first (and favor ones with no coords yet)\n\t\t\t(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||\n\t\t\t// do normal sorting...\n\t\t\tthis.compareEventSegs(seg1, seg2);\n\t},\n\n\n\t// Given foreground event segments that have already had their position coordinates computed,\n\t// assigns position-related CSS values to their elements.\n\tassignFgSegHorizontals: function(segs) {\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tseg.el.css(this.generateFgSegHorizontalCss(seg));\n\n\t\t\t// if the height is short, add a className for alternate styling\n\t\t\tif (seg.bottom - seg.top < 30) {\n\t\t\t\tseg.el.addClass('fc-short');\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Generates an object with CSS properties/values that should be applied to an event segment element.\n\t// Contains important positioning-related properties that should be applied to any event element, customized or not.\n\tgenerateFgSegHorizontalCss: function(seg) {\n\t\tvar shouldOverlap = this.view.opt('slotEventOverlap');\n\t\tvar backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\t\tvar forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\t\tvar props = this.generateSegVerticalCss(seg); // get top/bottom first\n\t\tvar left; // amount of space from left edge, a fraction of the total width\n\t\tvar right; // amount of space from right edge, a fraction of the total width\n\n\t\tif (shouldOverlap) {\n\t\t\t// double the width, but don't go beyond the maximum forward coordinate (1.0)\n\t\t\tforwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n\t\t}\n\n\t\tif (this.isRTL) {\n\t\t\tleft = 1 - forwardCoord;\n\t\t\tright = backwardCoord;\n\t\t}\n\t\telse {\n\t\t\tleft = backwardCoord;\n\t\t\tright = 1 - forwardCoord;\n\t\t}\n\n\t\tprops.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\t\tprops.left = left * 100 + '%';\n\t\tprops.right = right * 100 + '%';\n\n\t\tif (shouldOverlap && seg.forwardPressure) {\n\t\t\t// add padding to the edge so that forward stacked events don't cover the resizer's icon\n\t\t\tprops[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n\t\t}\n\n\t\treturn props;\n\t}\n\n});\n\n\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs) {\n\tvar levels = [];\n\tvar i, seg;\n\tvar j;\n\n\tfor (i=0; i<segs.length; i++) {\n\t\tseg = segs[i];\n\n\t\t// go through all the levels and stop on the first level where there are no collisions\n\t\tfor (j=0; j<levels.length; j++) {\n\t\t\tif (!computeSlotSegCollisions(seg, levels[j]).length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tseg.level = j;\n\n\t\t(levels[j] || (levels[j] = [])).push(seg);\n\t}\n\n\treturn levels;\n}\n\n\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n\tvar i, level;\n\tvar j, seg;\n\tvar k;\n\n\tfor (i=0; i<levels.length; i++) {\n\t\tlevel = levels[i];\n\n\t\tfor (j=0; j<level.length; j++) {\n\t\t\tseg = level[j];\n\n\t\t\tseg.forwardSegs = [];\n\t\t\tfor (k=i+1; k<levels.length; k++) {\n\t\t\t\tcomputeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg) {\n\tvar forwardSegs = seg.forwardSegs;\n\tvar forwardPressure = 0;\n\tvar i, forwardSeg;\n\n\tif (seg.forwardPressure === undefined) { // not already computed\n\n\t\tfor (i=0; i<forwardSegs.length; i++) {\n\t\t\tforwardSeg = forwardSegs[i];\n\n\t\t\t// figure out the child's maximum forward path\n\t\t\tcomputeSlotSegPressures(forwardSeg);\n\n\t\t\t// either use the existing maximum, or use the child's forward pressure\n\t\t\t// plus one (for the forwardSeg itself)\n\t\t\tforwardPressure = Math.max(\n\t\t\t\tforwardPressure,\n\t\t\t\t1 + forwardSeg.forwardPressure\n\t\t\t);\n\t\t}\n\n\t\tseg.forwardPressure = forwardPressure;\n\t}\n}\n\n\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n\tresults = results || [];\n\n\tfor (var i=0; i<otherSegs.length; i++) {\n\t\tif (isSlotSegCollision(seg, otherSegs[i])) {\n\t\t\tresults.push(otherSegs[i]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\n\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1, seg2) {\n\treturn seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\n\n;;\n\n/* An abstract class from which other views inherit from\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar View = FC.View = Class.extend(EmitterMixin, ListenerMixin, {\n\n\ttype: null, // subclass' view name (string)\n\tname: null, // deprecated. use `type` instead\n\ttitle: null, // the text that will be displayed in the header's title\n\n\tcalendar: null, // owner Calendar object\n\toptions: null, // hash containing all options. already merged with view-specific-options\n\tel: null, // the view's containing element. set by Calendar\n\n\tisDateSet: false,\n\tisDateRendered: false,\n\tdateRenderQueue: null,\n\n\tisEventsBound: false,\n\tisEventsSet: false,\n\tisEventsRendered: false,\n\teventRenderQueue: null,\n\n\t// range the view is actually displaying (moments)\n\tstart: null,\n\tend: null, // exclusive\n\n\t// range the view is formally responsible for (moments)\n\t// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates\n\tintervalStart: null,\n\tintervalEnd: null, // exclusive\n\tintervalDuration: null,\n\tintervalUnit: null, // name of largest unit being displayed, like \"month\" or \"week\"\n\n\tisRTL: false,\n\tisSelected: false, // boolean whether a range of time is user-selected or not\n\tselectedEvent: null,\n\n\teventOrderSpecs: null, // criteria for ordering events when they have same date/time\n\n\t// classNames styled by jqui themes\n\twidgetHeaderClass: null,\n\twidgetContentClass: null,\n\thighlightStateClass: null,\n\n\t// for date utils, computed from options\n\tnextDayThreshold: null,\n\tisHiddenDayHash: null,\n\n\t// now indicator\n\tisNowIndicatorRendered: null,\n\tinitialNowDate: null, // result first getNow call\n\tinitialNowQueriedMs: null, // ms time the getNow was called\n\tnowIndicatorTimeoutID: null, // for refresh timing of now indicator\n\tnowIndicatorIntervalID: null, // \"\n\n\n\tconstructor: function(calendar, type, options, intervalDuration) {\n\n\t\tthis.calendar = calendar;\n\t\tthis.type = this.name = type; // .name is deprecated\n\t\tthis.options = options;\n\t\tthis.intervalDuration = intervalDuration || moment.duration(1, 'day');\n\n\t\tthis.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));\n\t\tthis.initThemingProps();\n\t\tthis.initHiddenDays();\n\t\tthis.isRTL = this.opt('isRTL');\n\n\t\tthis.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));\n\n\t\tthis.dateRenderQueue = new TaskQueue();\n\t\tthis.eventRenderQueue = new TaskQueue(this.opt('eventRenderWait'));\n\n\t\tthis.initialize();\n\t},\n\n\n\t// A good place for subclasses to initialize member variables\n\tinitialize: function() {\n\t\t// subclasses can implement\n\t},\n\n\n\t// Retrieves an option with the given name\n\topt: function(name) {\n\t\treturn this.options[name];\n\t},\n\n\n\t// Triggers handlers that are view-related. Modifies args before passing to calendar.\n\tpubliclyTrigger: function(name, thisObj) { // arguments beyond thisObj are passed along\n\t\tvar calendar = this.calendar;\n\n\t\treturn calendar.publiclyTrigger.apply(\n\t\t\tcalendar,\n\t\t\t[name, thisObj || this].concat(\n\t\t\t\tArray.prototype.slice.call(arguments, 2), // arguments beyond thisObj\n\t\t\t\t[ this ] // always make the last argument a reference to the view. TODO: deprecate\n\t\t\t)\n\t\t);\n\t},\n\n\n\t// Returns a proxy of the given promise that will be rejected if the given event fires\n\t// before the promise resolves.\n\trejectOn: function(eventName, promise) {\n\t\tvar _this = this;\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\t_this.one(eventName, reject);\n\n\t\t\tfunction cleanup() {\n\t\t\t\t_this.off(eventName, reject);\n\t\t\t}\n\n\t\t\tpromise.then(function(res) { // success\n\t\t\t\tcleanup();\n\t\t\t\tresolve(res);\n\t\t\t}, function() { // failure\n\t\t\t\tcleanup();\n\t\t\t\treject();\n\t\t\t});\n\t\t});\n\t},\n\n\n\t/* Date Computation\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Updates all internal dates for displaying the given unzoned range.\n\tsetRange: function(range) {\n\t\t$.extend(this, range); // assigns every property to this object's member variables\n\t\tthis.updateTitle();\n\t},\n\n\n\t// Given a single current unzoned date, produce information about what range to display.\n\t// Subclasses can override. Must return all properties.\n\tcomputeRange: function(date) {\n\t\tvar intervalUnit = computeIntervalUnit(this.intervalDuration);\n\t\tvar intervalStart = date.clone().startOf(intervalUnit);\n\t\tvar intervalEnd = intervalStart.clone().add(this.intervalDuration);\n\t\tvar start, end;\n\n\t\t// normalize the range's time-ambiguity\n\t\tif (/year|month|week|day/.test(intervalUnit)) { // whole-days?\n\t\t\tintervalStart.stripTime();\n\t\t\tintervalEnd.stripTime();\n\t\t}\n\t\telse { // needs to have a time?\n\t\t\tif (!intervalStart.hasTime()) {\n\t\t\t\tintervalStart = this.calendar.time(0); // give 00:00 time\n\t\t\t}\n\t\t\tif (!intervalEnd.hasTime()) {\n\t\t\t\tintervalEnd = this.calendar.time(0); // give 00:00 time\n\t\t\t}\n\t\t}\n\n\t\tstart = intervalStart.clone();\n\t\tstart = this.skipHiddenDays(start);\n\t\tend = intervalEnd.clone();\n\t\tend = this.skipHiddenDays(end, -1, true); // exclusively move backwards\n\n\t\treturn {\n\t\t\tintervalUnit: intervalUnit,\n\t\t\tintervalStart: intervalStart,\n\t\t\tintervalEnd: intervalEnd,\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t},\n\n\n\t// Computes the new date when the user hits the prev button, given the current date\n\tcomputePrevDate: function(date) {\n\t\treturn this.massageCurrentDate(\n\t\t\tdate.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1\n\t\t);\n\t},\n\n\n\t// Computes the new date when the user hits the next button, given the current date\n\tcomputeNextDate: function(date) {\n\t\treturn this.massageCurrentDate(\n\t\t\tdate.clone().startOf(this.intervalUnit).add(this.intervalDuration)\n\t\t);\n\t},\n\n\n\t// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely\n\t// visible. `direction` is optional and indicates which direction the current date was being\n\t// incremented or decremented (1 or -1).\n\tmassageCurrentDate: function(date, direction) {\n\t\tif (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller\n\t\t\tif (this.isHiddenDay(date)) {\n\t\t\t\tdate = this.skipHiddenDays(date, direction);\n\t\t\t\tdate.startOf('day');\n\t\t\t}\n\t\t}\n\n\t\treturn date;\n\t},\n\n\n\t/* Title and Date Formatting\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the view's title property to the most updated computed value\n\tupdateTitle: function() {\n\t\tthis.title = this.computeTitle();\n\t\tthis.calendar.setToolbarsTitle(this.title);\n\t},\n\n\n\t// Computes what the title at the top of the calendar should be for this view\n\tcomputeTitle: function() {\n\t\treturn this.formatRange(\n\t\t\t{\n\t\t\t\t// in case intervalStart/End has a time, make sure timezone is correct\n\t\t\t\tstart: this.calendar.applyTimezone(this.intervalStart),\n\t\t\t\tend: this.calendar.applyTimezone(this.intervalEnd)\n\t\t\t},\n\t\t\tthis.opt('titleFormat') || this.computeTitleFormat(),\n\t\t\tthis.opt('titleRangeSeparator')\n\t\t);\n\t},\n\n\n\t// Generates the format string that should be used to generate the title for the current date range.\n\t// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\n\tcomputeTitleFormat: function() {\n\t\tif (this.intervalUnit == 'year') {\n\t\t\treturn 'YYYY';\n\t\t}\n\t\telse if (this.intervalUnit == 'month') {\n\t\t\treturn this.opt('monthYearFormat'); // like \"September 2014\"\n\t\t}\n\t\telse if (this.intervalDuration.as('days') > 1) {\n\t\t\treturn 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n\t\t}\n\t\telse {\n\t\t\treturn 'LL'; // one day. longer, like \"September 9 2014\"\n\t\t}\n\t},\n\n\n\t// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.\n\t// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.\n\t// The timezones of the dates within `range` will be respected.\n\tformatRange: function(range, formatStr, separator) {\n\t\tvar end = range.end;\n\n\t\tif (!end.hasTime()) { // all-day?\n\t\t\tend = end.clone().subtract(1); // convert to inclusive. last ms of previous day\n\t\t}\n\n\t\treturn formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));\n\t},\n\n\n\tgetAllDayHtml: function() {\n\t\treturn this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'));\n\t},\n\n\n\t/* Navigation\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates HTML for an anchor to another view into the calendar.\n\t// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.\n\t// `gotoOptions` can either be a moment input, or an object with the form:\n\t// { date, type, forceOff }\n\t// `type` is a view-type like \"day\" or \"week\". default value is \"day\".\n\t// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.\n\tbuildGotoAnchorHtml: function(gotoOptions, attrs, innerHtml) {\n\t\tvar date, type, forceOff;\n\t\tvar finalOptions;\n\n\t\tif ($.isPlainObject(gotoOptions)) {\n\t\t\tdate = gotoOptions.date;\n\t\t\ttype = gotoOptions.type;\n\t\t\tforceOff = gotoOptions.forceOff;\n\t\t}\n\t\telse {\n\t\t\tdate = gotoOptions; // a single moment input\n\t\t}\n\t\tdate = FC.moment(date); // if a string, parse it\n\n\t\tfinalOptions = { // for serialization into the link\n\t\t\tdate: date.format('YYYY-MM-DD'),\n\t\t\ttype: type || 'day'\n\t\t};\n\n\t\tif (typeof attrs === 'string') {\n\t\t\tinnerHtml = attrs;\n\t\t\tattrs = null;\n\t\t}\n\n\t\tattrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space\n\t\tinnerHtml = innerHtml || '';\n\n\t\tif (!forceOff && this.opt('navLinks')) {\n\t\t\treturn '<a' + attrs +\n\t\t\t\t' data-goto=\"' + htmlEscape(JSON.stringify(finalOptions)) + '\">' +\n\t\t\t\tinnerHtml +\n\t\t\t\t'</a>';\n\t\t}\n\t\telse {\n\t\t\treturn '<span' + attrs + '>' +\n\t\t\t\tinnerHtml +\n\t\t\t\t'</span>';\n\t\t}\n\t},\n\n\n\t// Rendering Non-date-related Content\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// Sets the container element that the view should render inside of, does global DOM-related initializations,\n\t// and renders all the non-date-related content inside.\n\tsetElement: function(el) {\n\t\tthis.el = el;\n\t\tthis.bindGlobalHandlers();\n\t\tthis.renderSkeleton();\n\t},\n\n\n\t// Removes the view's container element from the DOM, clearing any content beforehand.\n\t// Undoes any other DOM-related attachments.\n\tremoveElement: function() {\n\t\tthis.unsetDate();\n\t\tthis.unrenderSkeleton();\n\n\t\tthis.unbindGlobalHandlers();\n\n\t\tthis.el.remove();\n\t\t// NOTE: don't null-out this.el in case the View was destroyed within an API callback.\n\t\t// We don't null-out the View's other jQuery element references upon destroy,\n\t\t//  so we shouldn't kill this.el either.\n\t},\n\n\n\t// Renders the basic structure of the view before any content is rendered\n\trenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders the basic structure of the view\n\tunrenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Date Setting/Unsetting\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tsetDate: function(date) {\n\t\tvar isReset = this.isDateSet;\n\n\t\tthis.isDateSet = true;\n\t\tthis.handleDate(date, isReset);\n\t\tthis.trigger(isReset ? 'dateReset' : 'dateSet', date);\n\t},\n\n\n\tunsetDate: function() {\n\t\tif (this.isDateSet) {\n\t\t\tthis.isDateSet = false;\n\t\t\tthis.handleDateUnset();\n\t\t\tthis.trigger('dateUnset');\n\t\t}\n\t},\n\n\n\t// Date Handling\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\thandleDate: function(date, isReset) {\n\t\tvar _this = this;\n\n\t\tthis.unbindEvents(); // will do nothing if not already bound\n\t\tthis.requestDateRender(date).then(function() {\n\t\t\t// wish we could start earlier, but setRange/computeRange needs to execute first\n\t\t\t_this.bindEvents(); // will request events\n\t\t});\n\t},\n\n\n\thandleDateUnset: function() {\n\t\tthis.unbindEvents();\n\t\tthis.requestDateUnrender();\n\t},\n\n\n\t// Date Render Queuing\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// if date not specified, uses current\n\trequestDateRender: function(date) {\n\t\tvar _this = this;\n\n\t\treturn this.dateRenderQueue.add(function() {\n\t\t\treturn _this.executeDateRender(date);\n\t\t});\n\t},\n\n\n\trequestDateUnrender: function() {\n\t\tvar _this = this;\n\n\t\treturn this.dateRenderQueue.add(function() {\n\t\t\treturn _this.executeDateUnrender();\n\t\t});\n\t},\n\n\n\t// Date High-level Rendering\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// if date not specified, uses current\n\texecuteDateRender: function(date) {\n\t\tvar _this = this;\n\n\t\t// if rendering a new date, reset scroll to initial state (scrollTime)\n\t\tif (date) {\n\t\t\tthis.captureInitialScroll();\n\t\t}\n\t\telse {\n\t\t\tthis.captureScroll(); // a rerender of the current date\n\t\t}\n\n\t\tthis.freezeHeight();\n\n\t\treturn this.executeDateUnrender().then(function() {\n\n\t\t\tif (date) {\n\t\t\t\t_this.setRange(_this.computeRange(date));\n\t\t\t}\n\n\t\t\tif (_this.render) {\n\t\t\t\t_this.render(); // TODO: deprecate\n\t\t\t}\n\n\t\t\t_this.renderDates();\n\t\t\t_this.updateSize();\n\t\t\t_this.renderBusinessHours(); // might need coordinates, so should go after updateSize()\n\t\t\t_this.startNowIndicator();\n\n\t\t\t_this.thawHeight();\n\t\t\t_this.releaseScroll();\n\n\t\t\t_this.isDateRendered = true;\n\t\t\t_this.onDateRender();\n\t\t\t_this.trigger('dateRender');\n\t\t});\n\t},\n\n\n\texecuteDateUnrender: function() {\n\t\tvar _this = this;\n\n\t\tif (_this.isDateRendered) {\n\t\t\treturn this.requestEventsUnrender().then(function() {\n\n\t\t\t\t_this.unselect();\n\t\t\t\t_this.stopNowIndicator();\n\t\t\t\t_this.triggerUnrender();\n\t\t\t\t_this.unrenderBusinessHours();\n\t\t\t\t_this.unrenderDates();\n\n\t\t\t\tif (_this.destroy) {\n\t\t\t\t\t_this.destroy(); // TODO: deprecate\n\t\t\t\t}\n\n\t\t\t\t_this.isDateRendered = false;\n\t\t\t\t_this.trigger('dateUnrender');\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t},\n\n\n\t// Date Rendering Triggers\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tonDateRender: function() {\n\t\tthis.triggerRender();\n\t},\n\n\n\t// Date Low-level Rendering\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// date-cell content only\n\trenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// date-cell content only\n\tunrenderDates: function() {\n\t\t// subclasses should override\n\t},\n\n\n\t// Misc view rendering utils\n\t// -------------------------\n\n\n\t// Signals that the view's content has been rendered\n\ttriggerRender: function() {\n\t\tthis.publiclyTrigger('viewRender', this, this, this.el);\n\t},\n\n\n\t// Signals that the view's content is about to be unrendered\n\ttriggerUnrender: function() {\n\t\tthis.publiclyTrigger('viewDestroy', this, this, this.el);\n\t},\n\n\n\t// Binds DOM handlers to elements that reside outside the view container, such as the document\n\tbindGlobalHandlers: function() {\n\t\tthis.listenTo($(document), 'mousedown', this.handleDocumentMousedown);\n\t\tthis.listenTo($(document), 'touchstart', this.processUnselect);\n\t},\n\n\n\t// Unbinds DOM handlers from elements that reside outside the view container\n\tunbindGlobalHandlers: function() {\n\t\tthis.stopListeningTo($(document));\n\t},\n\n\n\t// Initializes internal variables related to theming\n\tinitThemingProps: function() {\n\t\tvar tm = this.opt('theme') ? 'ui' : 'fc';\n\n\t\tthis.widgetHeaderClass = tm + '-widget-header';\n\t\tthis.widgetContentClass = tm + '-widget-content';\n\t\tthis.highlightStateClass = tm + '-state-highlight';\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders business-hours onto the view. Assumes updateSize has already been called.\n\trenderBusinessHours: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders previously-rendered business-hours\n\tunrenderBusinessHours: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Now Indicator\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Immediately render the current time indicator and begins re-rendering it at an interval,\n\t// which is defined by this.getNowIndicatorUnit().\n\t// TODO: somehow do this for the current whole day's background too\n\tstartNowIndicator: function() {\n\t\tvar _this = this;\n\t\tvar unit;\n\t\tvar update;\n\t\tvar delay; // ms wait value\n\n\t\tif (this.opt('nowIndicator')) {\n\t\t\tunit = this.getNowIndicatorUnit();\n\t\t\tif (unit) {\n\t\t\t\tupdate = proxy(this, 'updateNowIndicator'); // bind to `this`\n\n\t\t\t\tthis.initialNowDate = this.calendar.getNow();\n\t\t\t\tthis.initialNowQueriedMs = +new Date();\n\t\t\t\tthis.renderNowIndicator(this.initialNowDate);\n\t\t\t\tthis.isNowIndicatorRendered = true;\n\n\t\t\t\t// wait until the beginning of the next interval\n\t\t\t\tdelay = this.initialNowDate.clone().startOf(unit).add(1, unit) - this.initialNowDate;\n\t\t\t\tthis.nowIndicatorTimeoutID = setTimeout(function() {\n\t\t\t\t\t_this.nowIndicatorTimeoutID = null;\n\t\t\t\t\tupdate();\n\t\t\t\t\tdelay = +moment.duration(1, unit);\n\t\t\t\t\tdelay = Math.max(100, delay); // prevent too frequent\n\t\t\t\t\t_this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// rerenders the now indicator, computing the new current time from the amount of time that has passed\n\t// since the initial getNow call.\n\tupdateNowIndicator: function() {\n\t\tif (this.isNowIndicatorRendered) {\n\t\t\tthis.unrenderNowIndicator();\n\t\t\tthis.renderNowIndicator(\n\t\t\t\tthis.initialNowDate.clone().add(new Date() - this.initialNowQueriedMs) // add ms\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// Immediately unrenders the view's current time indicator and stops any re-rendering timers.\n\t// Won't cause side effects if indicator isn't rendered.\n\tstopNowIndicator: function() {\n\t\tif (this.isNowIndicatorRendered) {\n\n\t\t\tif (this.nowIndicatorTimeoutID) {\n\t\t\t\tclearTimeout(this.nowIndicatorTimeoutID);\n\t\t\t\tthis.nowIndicatorTimeoutID = null;\n\t\t\t}\n\t\t\tif (this.nowIndicatorIntervalID) {\n\t\t\t\tclearTimeout(this.nowIndicatorIntervalID);\n\t\t\t\tthis.nowIndicatorIntervalID = null;\n\t\t\t}\n\n\t\t\tthis.unrenderNowIndicator();\n\t\t\tthis.isNowIndicatorRendered = false;\n\t\t}\n\t},\n\n\n\t// Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator\n\t// should be refreshed. If something falsy is returned, no time indicator is rendered at all.\n\tgetNowIndicatorUnit: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Renders a current time indicator at the given datetime\n\trenderNowIndicator: function(date) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Undoes the rendering actions from renderNowIndicator\n\tunrenderNowIndicator: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Refreshes anything dependant upon sizing of the container element of the grid\n\tupdateSize: function(isResize) {\n\n\t\tif (isResize) {\n\t\t\tthis.captureScroll();\n\t\t}\n\n\t\tthis.updateHeight(isResize);\n\t\tthis.updateWidth(isResize);\n\t\tthis.updateNowIndicator();\n\n\t\tif (isResize) {\n\t\t\tthis.releaseScroll();\n\t\t}\n\t},\n\n\n\t// Refreshes the horizontal dimensions of the calendar\n\tupdateWidth: function(isResize) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Refreshes the vertical dimensions of the calendar\n\tupdateHeight: function(isResize) {\n\t\tvar calendar = this.calendar; // we poll the calendar for height information\n\n\t\tthis.setHeight(\n\t\t\tcalendar.getSuggestedViewHeight(),\n\t\t\tcalendar.isHeightAuto()\n\t\t);\n\t},\n\n\n\t// Updates the vertical dimensions of the calendar to the specified height.\n\t// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.\n\tsetHeight: function(height, isAuto) {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Scroller\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tcapturedScroll: null,\n\tcapturedScrollDepth: 0,\n\n\n\tcaptureScroll: function() {\n\t\tif (!(this.capturedScrollDepth++)) {\n\t\t\tthis.capturedScroll = this.isDateRendered ? this.queryScroll() : {}; // require a render first\n\t\t\treturn true; // root?\n\t\t}\n\t\treturn false;\n\t},\n\n\n\tcaptureInitialScroll: function(forcedScroll) {\n\t\tif (this.captureScroll()) { // root?\n\t\t\tthis.capturedScroll.isInitial = true;\n\n\t\t\tif (forcedScroll) {\n\t\t\t\t$.extend(this.capturedScroll, forcedScroll);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.capturedScroll.isComputed = true;\n\t\t\t}\n\t\t}\n\t},\n\n\n\treleaseScroll: function() {\n\t\tvar scroll = this.capturedScroll;\n\t\tvar isRoot = this.discardScroll();\n\n\t\tif (scroll.isComputed) {\n\t\t\tif (isRoot) {\n\t\t\t\t// only compute initial scroll if it will actually be used (is the root capture)\n\t\t\t\t$.extend(scroll, this.computeInitialScroll());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tscroll = null; // scroll couldn't be computed. don't apply it to the DOM\n\t\t\t}\n\t\t}\n\n\t\tif (scroll) {\n\t\t\t// we act immediately on a releaseScroll operation, as opposed to captureScroll.\n\t\t\t// if capture/release wraps a render operation that screws up the scroll,\n\t\t\t// we still want to restore it a good state after, regardless of depth.\n\n\t\t\tif (scroll.isInitial) {\n\t\t\t\tthis.hardSetScroll(scroll); // outsmart how browsers set scroll on initial DOM\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setScroll(scroll);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tdiscardScroll: function() {\n\t\tif (!(--this.capturedScrollDepth)) {\n\t\t\tthis.capturedScroll = null;\n\t\t\treturn true; // root?\n\t\t}\n\t\treturn false;\n\t},\n\n\n\tcomputeInitialScroll: function() {\n\t\treturn {};\n\t},\n\n\n\tqueryScroll: function() {\n\t\treturn {};\n\t},\n\n\n\thardSetScroll: function(scroll) {\n\t\tvar _this = this;\n\t\tvar exec = function() { _this.setScroll(scroll); };\n\t\texec();\n\t\tsetTimeout(exec, 0); // to surely clear the browser's initial scroll for the DOM\n\t},\n\n\n\tsetScroll: function(scroll) {\n\t},\n\n\n\t/* Height Freezing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tfreezeHeight: function() {\n\t\tthis.calendar.freezeContentHeight();\n\t},\n\n\n\tthawHeight: function() {\n\t\tthis.calendar.thawContentHeight();\n\t},\n\n\n\t// Event Binding/Unbinding\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tbindEvents: function() {\n\t\tvar _this = this;\n\n\t\tif (!this.isEventsBound) {\n\t\t\tthis.isEventsBound = true;\n\t\t\tthis.rejectOn('eventsUnbind', this.requestEvents()).then(function(events) { // TODO: test rejection\n\t\t\t\t_this.listenTo(_this.calendar, 'eventsReset', _this.setEvents);\n\t\t\t\t_this.setEvents(events);\n\t\t\t});\n\t\t}\n\t},\n\n\n\tunbindEvents: function() {\n\t\tif (this.isEventsBound) {\n\t\t\tthis.isEventsBound = false;\n\t\t\tthis.stopListeningTo(this.calendar, 'eventsReset');\n\t\t\tthis.unsetEvents();\n\t\t\tthis.trigger('eventsUnbind');\n\t\t}\n\t},\n\n\n\t// Event Setting/Unsetting\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tsetEvents: function(events) {\n\t\tvar isReset = this.isEventSet;\n\n\t\tthis.isEventsSet = true;\n\t\tthis.handleEvents(events, isReset);\n\t\tthis.trigger(isReset ? 'eventsReset' : 'eventsSet', events);\n\t},\n\n\n\tunsetEvents: function() {\n\t\tif (this.isEventsSet) {\n\t\t\tthis.isEventsSet = false;\n\t\t\tthis.handleEventsUnset();\n\t\t\tthis.trigger('eventsUnset');\n\t\t}\n\t},\n\n\n\twhenEventsSet: function() {\n\t\tvar _this = this;\n\n\t\tif (this.isEventsSet) {\n\t\t\treturn Promise.resolve(this.getCurrentEvents());\n\t\t}\n\t\telse {\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\t_this.one('eventsSet', resolve);\n\t\t\t});\n\t\t}\n\t},\n\n\n\t// Event Handling\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\thandleEvents: function(events, isReset) {\n\t\tthis.requestEventsRender(events);\n\t},\n\n\n\thandleEventsUnset: function() {\n\t\tthis.requestEventsUnrender();\n\t},\n\n\n\t// Event Render Queuing\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// assumes any previous event renders have been cleared already\n\trequestEventsRender: function(events) {\n\t\tvar _this = this;\n\n\t\treturn this.eventRenderQueue.add(function() { // might not return a promise if debounced!? bad\n\t\t\treturn _this.executeEventsRender(events);\n\t\t});\n\t},\n\n\n\trequestEventsUnrender: function() {\n\t\tvar _this = this;\n\n\t\tif (this.isEventsRendered) {\n\t\t\treturn this.eventRenderQueue.addQuickly(function() {\n\t\t\t\treturn _this.executeEventsUnrender();\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t},\n\n\n\trequestCurrentEventsRender: function() {\n\t\tif (this.isEventsSet) {\n\t\t\tthis.requestEventsRender(this.getCurrentEvents());\n\t\t}\n\t\telse {\n\t\t\treturn Promise.reject();\n\t\t}\n\t},\n\n\n\t// Event High-level Rendering\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\texecuteEventsRender: function(events) {\n\t\tvar _this = this;\n\n\t\tthis.captureScroll();\n\t\tthis.freezeHeight();\n\n\t\treturn this.executeEventsUnrender().then(function() {\n\t\t\t_this.renderEvents(events);\n\n\t\t\t_this.thawHeight();\n\t\t\t_this.releaseScroll();\n\n\t\t\t_this.isEventsRendered = true;\n\t\t\t_this.onEventsRender();\n\t\t\t_this.trigger('eventsRender');\n\t\t});\n\t},\n\n\n\texecuteEventsUnrender: function() {\n\t\tif (this.isEventsRendered) {\n\t\t\tthis.onBeforeEventsUnrender();\n\n\t\t\tthis.captureScroll();\n\t\t\tthis.freezeHeight();\n\n\t\t\tif (this.destroyEvents) {\n\t\t\t\tthis.destroyEvents(); // TODO: deprecate\n\t\t\t}\n\n\t\t\tthis.unrenderEvents();\n\n\t\t\tthis.thawHeight();\n\t\t\tthis.releaseScroll();\n\n\t\t\tthis.isEventsRendered = false;\n\t\t\tthis.trigger('eventsUnrender');\n\t\t}\n\n\t\treturn Promise.resolve(); // always synchronous\n\t},\n\n\n\t// Event Rendering Triggers\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// Signals that all events have been rendered\n\tonEventsRender: function() {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tthis.publiclyTrigger('eventAfterRender', seg.event, seg.event, seg.el);\n\t\t});\n\t\tthis.publiclyTrigger('eventAfterAllRender');\n\t},\n\n\n\t// Signals that all event elements are about to be removed\n\tonBeforeEventsUnrender: function() {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tthis.publiclyTrigger('eventDestroy', seg.event, seg.event, seg.el);\n\t\t});\n\t},\n\n\n\t// Event Low-level Rendering\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// Renders the events onto the view.\n\trenderEvents: function(events) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Removes event elements from the view.\n\tunrenderEvents: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Event Data Access\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\trequestEvents: function() {\n\t\treturn this.calendar.requestEvents(this.start, this.end);\n\t},\n\n\n\tgetCurrentEvents: function() {\n\t\treturn this.calendar.getPrunedEventCache();\n\t},\n\n\n\t// Event Rendering Utils\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t// Given an event and the default element used for rendering, returns the element that should actually be used.\n\t// Basically runs events and elements through the eventRender hook.\n\tresolveEventEl: function(event, el) {\n\t\tvar custom = this.publiclyTrigger('eventRender', event, event, el);\n\n\t\tif (custom === false) { // means don't render at all\n\t\t\tel = null;\n\t\t}\n\t\telse if (custom && custom !== true) {\n\t\t\tel = $(custom);\n\t\t}\n\n\t\treturn el;\n\t},\n\n\n\t// Hides all rendered event segments linked to the given event\n\tshowEvent: function(event) {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tseg.el.css('visibility', '');\n\t\t}, event);\n\t},\n\n\n\t// Shows all rendered event segments linked to the given event\n\thideEvent: function(event) {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tseg.el.css('visibility', 'hidden');\n\t\t}, event);\n\t},\n\n\n\t// Iterates through event segments that have been rendered (have an el). Goes through all by default.\n\t// If the optional `event` argument is specified, only iterates through segments linked to that event.\n\t// The `this` value of the callback function will be the view.\n\trenderedEventSegEach: function(func, event) {\n\t\tvar segs = this.getEventSegs();\n\t\tvar i;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tif (!event || segs[i].event._id === event._id) {\n\t\t\t\tif (segs[i].el) {\n\t\t\t\t\tfunc.call(this, segs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Retrieves all the rendered segment objects for the view\n\tgetEventSegs: function() {\n\t\t// subclasses must implement\n\t\treturn [];\n\t},\n\n\n\t/* Event Drag-n-Drop\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes if the given event is allowed to be dragged by the user\n\tisEventDraggable: function(event) {\n\t\treturn this.isEventStartEditable(event);\n\t},\n\n\n\tisEventStartEditable: function(event) {\n\t\treturn firstDefined(\n\t\t\tevent.startEditable,\n\t\t\t(event.source || {}).startEditable,\n\t\t\tthis.opt('eventStartEditable'),\n\t\t\tthis.isEventGenerallyEditable(event)\n\t\t);\n\t},\n\n\n\tisEventGenerallyEditable: function(event) {\n\t\treturn firstDefined(\n\t\t\tevent.editable,\n\t\t\t(event.source || {}).editable,\n\t\t\tthis.opt('editable')\n\t\t);\n\t},\n\n\n\t// Must be called when an event in the view is dropped onto new location.\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n\treportEventDrop: function(event, dropLocation, largeUnit, el, ev) {\n\t\tvar calendar = this.calendar;\n\t\tvar mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);\n\t\tvar undoFunc = function() {\n\t\t\tmutateResult.undo();\n\t\t\tcalendar.reportEventChange();\n\t\t};\n\n\t\tthis.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);\n\t\tcalendar.reportEventChange(); // will rerender events\n\t},\n\n\n\t// Triggers event-drop handlers that have subscribed via the API\n\ttriggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {\n\t\tthis.publiclyTrigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy\n\t},\n\n\n\t/* External Element Drag-n-Drop\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.\n\t// `meta` is the parsed data that has been embedded into the dragging event.\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n\treportExternalDrop: function(meta, dropLocation, el, ev, ui) {\n\t\tvar eventProps = meta.eventProps;\n\t\tvar eventInput;\n\t\tvar event;\n\n\t\t// Try to build an event object and render it. TODO: decouple the two\n\t\tif (eventProps) {\n\t\t\teventInput = $.extend({}, eventProps, dropLocation);\n\t\t\tevent = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array\n\t\t}\n\n\t\tthis.triggerExternalDrop(event, dropLocation, el, ev, ui);\n\t},\n\n\n\t// Triggers external-drop handlers that have subscribed via the API\n\ttriggerExternalDrop: function(event, dropLocation, el, ev, ui) {\n\n\t\t// trigger 'drop' regardless of whether element represents an event\n\t\tthis.publiclyTrigger('drop', el[0], dropLocation.start, ev, ui);\n\n\t\tif (event) {\n\t\t\tthis.publiclyTrigger('eventReceive', null, event); // signal an external event landed\n\t\t}\n\t},\n\n\n\t/* Drag-n-Drop Rendering (for both events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a event or external-element drag over the given drop zone.\n\t// If an external-element, seg will be `null`.\n\t// Must return elements used for any mock events.\n\trenderDrag: function(dropLocation, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event or external-element being dragged.\n\tunrenderDrag: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Event Resizing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes if the given event is allowed to be resized from its starting edge\n\tisEventResizableFromStart: function(event) {\n\t\treturn this.opt('eventResizableFromStart') && this.isEventResizable(event);\n\t},\n\n\n\t// Computes if the given event is allowed to be resized from its ending edge\n\tisEventResizableFromEnd: function(event) {\n\t\treturn this.isEventResizable(event);\n\t},\n\n\n\t// Computes if the given event is allowed to be resized by the user at all\n\tisEventResizable: function(event) {\n\t\tvar source = event.source || {};\n\n\t\treturn firstDefined(\n\t\t\tevent.durationEditable,\n\t\t\tsource.durationEditable,\n\t\t\tthis.opt('eventDurationEditable'),\n\t\t\tevent.editable,\n\t\t\tsource.editable,\n\t\t\tthis.opt('editable')\n\t\t);\n\t},\n\n\n\t// Must be called when an event in the view has been resized to a new length\n\treportEventResize: function(event, resizeLocation, largeUnit, el, ev) {\n\t\tvar calendar = this.calendar;\n\t\tvar mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);\n\t\tvar undoFunc = function() {\n\t\t\tmutateResult.undo();\n\t\t\tcalendar.reportEventChange();\n\t\t};\n\n\t\tthis.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);\n\t\tcalendar.reportEventChange(); // will rerender events\n\t},\n\n\n\t// Triggers event-resize handlers that have subscribed via the API\n\ttriggerEventResize: function(event, durationDelta, undoFunc, el, ev) {\n\t\tthis.publiclyTrigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy\n\t},\n\n\n\t/* Selection (time range)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Selects a date span on the view. `start` and `end` are both Moments.\n\t// `ev` is the native mouse event that begin the interaction.\n\tselect: function(span, ev) {\n\t\tthis.unselect(ev);\n\t\tthis.renderSelection(span);\n\t\tthis.reportSelection(span, ev);\n\t},\n\n\n\t// Renders a visual indication of the selection\n\trenderSelection: function(span) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Called when a new selection is made. Updates internal state and triggers handlers.\n\treportSelection: function(span, ev) {\n\t\tthis.isSelected = true;\n\t\tthis.triggerSelect(span, ev);\n\t},\n\n\n\t// Triggers handlers to 'select'\n\ttriggerSelect: function(span, ev) {\n\t\tthis.publiclyTrigger(\n\t\t\t'select',\n\t\t\tnull,\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's tz for external API\n\t\t\tthis.calendar.applyTimezone(span.end), // \"\n\t\t\tev\n\t\t);\n\t},\n\n\n\t// Undoes a selection. updates in the internal state and triggers handlers.\n\t// `ev` is the native mouse event that began the interaction.\n\tunselect: function(ev) {\n\t\tif (this.isSelected) {\n\t\t\tthis.isSelected = false;\n\t\t\tif (this.destroySelection) {\n\t\t\t\tthis.destroySelection(); // TODO: deprecate\n\t\t\t}\n\t\t\tthis.unrenderSelection();\n\t\t\tthis.publiclyTrigger('unselect', null, ev);\n\t\t}\n\t},\n\n\n\t// Unrenders a visual indication of selection\n\tunrenderSelection: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Event Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tselectEvent: function(event) {\n\t\tif (!this.selectedEvent || this.selectedEvent !== event) {\n\t\t\tthis.unselectEvent();\n\t\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\t\tseg.el.addClass('fc-selected');\n\t\t\t}, event);\n\t\t\tthis.selectedEvent = event;\n\t\t}\n\t},\n\n\n\tunselectEvent: function() {\n\t\tif (this.selectedEvent) {\n\t\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\t\tseg.el.removeClass('fc-selected');\n\t\t\t}, this.selectedEvent);\n\t\t\tthis.selectedEvent = null;\n\t\t}\n\t},\n\n\n\tisEventSelected: function(event) {\n\t\t// event references might change on refetchEvents(), while selectedEvent doesn't,\n\t\t// so compare IDs\n\t\treturn this.selectedEvent && this.selectedEvent._id === event._id;\n\t},\n\n\n\t/* Mouse / Touch Unselecting (time range & event unselection)\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// TODO: move consistently to down/start or up/end?\n\t// TODO: don't kill previous selection if touch scrolling\n\n\n\thandleDocumentMousedown: function(ev) {\n\t\tif (isPrimaryMouseButton(ev)) {\n\t\t\tthis.processUnselect(ev);\n\t\t}\n\t},\n\n\n\tprocessUnselect: function(ev) {\n\t\tthis.processRangeUnselect(ev);\n\t\tthis.processEventUnselect(ev);\n\t},\n\n\n\tprocessRangeUnselect: function(ev) {\n\t\tvar ignore;\n\n\t\t// is there a time-range selection?\n\t\tif (this.isSelected && this.opt('unselectAuto')) {\n\t\t\t// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element\n\t\t\tignore = this.opt('unselectCancel');\n\t\t\tif (!ignore || !$(ev.target).closest(ignore).length) {\n\t\t\t\tthis.unselect(ev);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tprocessEventUnselect: function(ev) {\n\t\tif (this.selectedEvent) {\n\t\t\tif (!$(ev.target).closest('.fc-selected').length) {\n\t\t\t\tthis.unselectEvent();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t/* Day Click\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Triggers handlers to 'dayClick'\n\t// Span has start/end of the clicked area. Only the start is useful.\n\ttriggerDayClick: function(span, dayEl, ev) {\n\t\tthis.publiclyTrigger(\n\t\t\t'dayClick',\n\t\t\tdayEl,\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API\n\t\t\tev\n\t\t);\n\t},\n\n\n\t/* Date Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Initializes internal variables related to calculating hidden days-of-week\n\tinitHiddenDays: function() {\n\t\tvar hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden\n\t\tvar isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n\t\tvar dayCnt = 0;\n\t\tvar i;\n\n\t\tif (this.opt('weekends') === false) {\n\t\t\thiddenDays.push(0, 6); // 0=sunday, 6=saturday\n\t\t}\n\n\t\tfor (i = 0; i < 7; i++) {\n\t\t\tif (\n\t\t\t\t!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)\n\t\t\t) {\n\t\t\t\tdayCnt++;\n\t\t\t}\n\t\t}\n\n\t\tif (!dayCnt) {\n\t\t\tthrow 'invalid hiddenDays'; // all days were hidden? bad.\n\t\t}\n\n\t\tthis.isHiddenDayHash = isHiddenDayHash;\n\t},\n\n\n\t// Is the current day hidden?\n\t// `day` is a day-of-week index (0-6), or a Moment\n\tisHiddenDay: function(day) {\n\t\tif (moment.isMoment(day)) {\n\t\t\tday = day.day();\n\t\t}\n\t\treturn this.isHiddenDayHash[day];\n\t},\n\n\n\t// Incrementing the current day until it is no longer a hidden day, returning a copy.\n\t// If the initial value of `date` is not a hidden day, don't do anything.\n\t// Pass `isExclusive` as `true` if you are dealing with an end date.\n\t// `inc` defaults to `1` (increment one day forward each time)\n\tskipHiddenDays: function(date, inc, isExclusive) {\n\t\tvar out = date.clone();\n\t\tinc = inc || 1;\n\t\twhile (\n\t\t\tthis.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]\n\t\t) {\n\t\t\tout.add(inc, 'days');\n\t\t}\n\t\treturn out;\n\t},\n\n\n\t// Returns the date range of the full days the given range visually appears to occupy.\n\t// Returns a new range object.\n\tcomputeDayRange: function(range) {\n\t\tvar startDay = range.start.clone().stripTime(); // the beginning of the day the range starts\n\t\tvar end = range.end;\n\t\tvar endDay = null;\n\t\tvar endTimeMS;\n\n\t\tif (end) {\n\t\t\tendDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends\n\t\t\tendTimeMS = +end.time(); // # of milliseconds into `endDay`\n\n\t\t\t// If the end time is actually inclusively part of the next day and is equal to or\n\t\t\t// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n\t\t\t// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n\t\t\tif (endTimeMS && endTimeMS >= this.nextDayThreshold) {\n\t\t\t\tendDay.add(1, 'days');\n\t\t\t}\n\t\t}\n\n\t\t// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,\n\t\t// assign the default duration of one day.\n\t\tif (!end || endDay <= startDay) {\n\t\t\tendDay = startDay.clone().add(1, 'days');\n\t\t}\n\n\t\treturn { start: startDay, end: endDay };\n\t},\n\n\n\t// Does the given event visually appear to occupy more than one day?\n\tisMultiDayEvent: function(event) {\n\t\tvar range = this.computeDayRange(event); // event is range-ish\n\n\t\treturn range.end.diff(range.start, 'days') > 1;\n\t}\n\n});\n\n;;\n\n/*\nEmbodies a div that has potential scrollbars\n*/\nvar Scroller = FC.Scroller = Class.extend({\n\n\tel: null, // the guaranteed outer element\n\tscrollEl: null, // the element with the scrollbars\n\toverflowX: null,\n\toverflowY: null,\n\n\n\tconstructor: function(options) {\n\t\toptions = options || {};\n\t\tthis.overflowX = options.overflowX || options.overflow || 'auto';\n\t\tthis.overflowY = options.overflowY || options.overflow || 'auto';\n\t},\n\n\n\trender: function() {\n\t\tthis.el = this.renderEl();\n\t\tthis.applyOverflow();\n\t},\n\n\n\trenderEl: function() {\n\t\treturn (this.scrollEl = $('<div class=\"fc-scroller\"></div>'));\n\t},\n\n\n\t// sets to natural height, unlocks overflow\n\tclear: function() {\n\t\tthis.setHeight('auto');\n\t\tthis.applyOverflow();\n\t},\n\n\n\tdestroy: function() {\n\t\tthis.el.remove();\n\t},\n\n\n\t// Overflow\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tapplyOverflow: function() {\n\t\tthis.scrollEl.css({\n\t\t\t'overflow-x': this.overflowX,\n\t\t\t'overflow-y': this.overflowY\n\t\t});\n\t},\n\n\n\t// Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.\n\t// Useful for preserving scrollbar widths regardless of future resizes.\n\t// Can pass in scrollbarWidths for optimization.\n\tlockOverflow: function(scrollbarWidths) {\n\t\tvar overflowX = this.overflowX;\n\t\tvar overflowY = this.overflowY;\n\n\t\tscrollbarWidths = scrollbarWidths || this.getScrollbarWidths();\n\n\t\tif (overflowX === 'auto') {\n\t\t\toverflowX = (\n\t\t\t\t\tscrollbarWidths.top || scrollbarWidths.bottom || // horizontal scrollbars?\n\t\t\t\t\t// OR scrolling pane with massless scrollbars?\n\t\t\t\t\tthis.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth\n\t\t\t\t\t\t// subtract 1 because of IE off-by-one issue\n\t\t\t\t) ? 'scroll' : 'hidden';\n\t\t}\n\n\t\tif (overflowY === 'auto') {\n\t\t\toverflowY = (\n\t\t\t\t\tscrollbarWidths.left || scrollbarWidths.right || // vertical scrollbars?\n\t\t\t\t\t// OR scrolling pane with massless scrollbars?\n\t\t\t\t\tthis.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight\n\t\t\t\t\t\t// subtract 1 because of IE off-by-one issue\n\t\t\t\t) ? 'scroll' : 'hidden';\n\t\t}\n\n\t\tthis.scrollEl.css({ 'overflow-x': overflowX, 'overflow-y': overflowY });\n\t},\n\n\n\t// Getters / Setters\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\tsetHeight: function(height) {\n\t\tthis.scrollEl.height(height);\n\t},\n\n\n\tgetScrollTop: function() {\n\t\treturn this.scrollEl.scrollTop();\n\t},\n\n\n\tsetScrollTop: function(top) {\n\t\tthis.scrollEl.scrollTop(top);\n\t},\n\n\n\tgetClientWidth: function() {\n\t\treturn this.scrollEl[0].clientWidth;\n\t},\n\n\n\tgetClientHeight: function() {\n\t\treturn this.scrollEl[0].clientHeight;\n\t},\n\n\n\tgetScrollbarWidths: function() {\n\t\treturn getScrollbarWidths(this.scrollEl);\n\t}\n\n});\n\n;;\nfunction Iterator(items) {\n    this.items = items || [];\n}\n\n\n/* Calls a method on every item passing the arguments through */\nIterator.prototype.proxyCall = function(methodName) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    var results = [];\n\n    this.items.forEach(function(item) {\n        results.push(item[methodName].apply(item, args));\n    });\n\n    return results;\n};\n\n;;\n\n/* Toolbar with buttons and title\n----------------------------------------------------------------------------------------------------------------------*/\n\nfunction Toolbar(calendar, toolbarOptions) {\n\tvar t = this;\n\n\t// exports\n\tt.setToolbarOptions = setToolbarOptions;\n\tt.render = render;\n\tt.removeElement = removeElement;\n\tt.updateTitle = updateTitle;\n\tt.activateButton = activateButton;\n\tt.deactivateButton = deactivateButton;\n\tt.disableButton = disableButton;\n\tt.enableButton = enableButton;\n\tt.getViewsWithButtons = getViewsWithButtons;\n\tt.el = null; // mirrors local `el`\n\n\t// locals\n\tvar el;\n\tvar viewsWithButtons = [];\n\tvar tm;\n\n\t// method to update toolbar-specific options, not calendar-wide options\n\tfunction setToolbarOptions(newToolbarOptions) {\n\t\ttoolbarOptions = newToolbarOptions;\n\t}\n\n\t// can be called repeatedly and will rerender\n\tfunction render() {\n\t\tvar sections = toolbarOptions.layout;\n\n\t\ttm = calendar.options.theme ? 'ui' : 'fc';\n\n\t\tif (sections) {\n\t\t\tif (!el) {\n\t\t\t\tel = this.el = $(\"<div class='fc-toolbar \"+ toolbarOptions.extraClasses + \"'/>\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tel.empty();\n\t\t\t}\n\t\t\tel.append(renderSection('left'))\n\t\t\t\t.append(renderSection('right'))\n\t\t\t\t.append(renderSection('center'))\n\t\t\t\t.append('<div class=\"fc-clear\"/>');\n\t\t}\n\t\telse {\n\t\t\tremoveElement();\n\t\t}\n\t}\n\n\n\tfunction removeElement() {\n\t\tif (el) {\n\t\t\tel.remove();\n\t\t\tel = t.el = null;\n\t\t}\n\t}\n\n\n\tfunction renderSection(position) {\n\t\tvar sectionEl = $('<div class=\"fc-' + position + '\"/>');\n\t\tvar buttonStr = toolbarOptions.layout[position];\n\n\t\tif (buttonStr) {\n\t\t\t$.each(buttonStr.split(' '), function(i) {\n\t\t\t\tvar groupChildren = $();\n\t\t\t\tvar isOnlyButtons = true;\n\t\t\t\tvar groupEl;\n\n\t\t\t\t$.each(this.split(','), function(j, buttonName) {\n\t\t\t\t\tvar customButtonProps;\n\t\t\t\t\tvar viewSpec;\n\t\t\t\t\tvar buttonClick;\n\t\t\t\t\tvar overrideText; // text explicitly set by calendar's constructor options. overcomes icons\n\t\t\t\t\tvar defaultText;\n\t\t\t\t\tvar themeIcon;\n\t\t\t\t\tvar normalIcon;\n\t\t\t\t\tvar innerHtml;\n\t\t\t\t\tvar classes;\n\t\t\t\t\tvar button; // the element\n\n\t\t\t\t\tif (buttonName == 'title') {\n\t\t\t\t\t\tgroupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height\n\t\t\t\t\t\tisOnlyButtons = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {\n\t\t\t\t\t\t\tbuttonClick = function(ev) {\n\t\t\t\t\t\t\t\tif (customButtonProps.click) {\n\t\t\t\t\t\t\t\t\tcustomButtonProps.click.call(button[0], ev);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toverrideText = ''; // icons will override text\n\t\t\t\t\t\t\tdefaultText = customButtonProps.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((viewSpec = calendar.getViewSpec(buttonName))) {\n\t\t\t\t\t\t\tbuttonClick = function() {\n\t\t\t\t\t\t\t\tcalendar.changeView(buttonName);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tviewsWithButtons.push(buttonName);\n\t\t\t\t\t\t\toverrideText = viewSpec.buttonTextOverride;\n\t\t\t\t\t\t\tdefaultText = viewSpec.buttonTextDefault;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (calendar[buttonName]) { // a calendar method\n\t\t\t\t\t\t\tbuttonClick = function() {\n\t\t\t\t\t\t\t\tcalendar[buttonName]();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toverrideText = (calendar.overrides.buttonText || {})[buttonName];\n\t\t\t\t\t\t\tdefaultText = calendar.options.buttonText[buttonName]; // everything else is considered default\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (buttonClick) {\n\n\t\t\t\t\t\t\tthemeIcon =\n\t\t\t\t\t\t\t\tcustomButtonProps ?\n\t\t\t\t\t\t\t\t\tcustomButtonProps.themeIcon :\n\t\t\t\t\t\t\t\t\tcalendar.options.themeButtonIcons[buttonName];\n\n\t\t\t\t\t\t\tnormalIcon =\n\t\t\t\t\t\t\t\tcustomButtonProps ?\n\t\t\t\t\t\t\t\t\tcustomButtonProps.icon :\n\t\t\t\t\t\t\t\t\tcalendar.options.buttonIcons[buttonName];\n\n\t\t\t\t\t\t\tif (overrideText) {\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(overrideText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (themeIcon && calendar.options.theme) {\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (normalIcon && !calendar.options.theme) {\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(defaultText);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tclasses = [\n\t\t\t\t\t\t\t\t'fc-' + buttonName + '-button',\n\t\t\t\t\t\t\t\ttm + '-button',\n\t\t\t\t\t\t\t\ttm + '-state-default'\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tbutton = $( // type=\"button\" so that it doesn't submit a form\n\t\t\t\t\t\t\t\t'<button type=\"button\" class=\"' + classes.join(' ') + '\">' +\n\t\t\t\t\t\t\t\t\tinnerHtml +\n\t\t\t\t\t\t\t\t'</button>'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.click(function(ev) {\n\t\t\t\t\t\t\t\t\t// don't process clicks for disabled buttons\n\t\t\t\t\t\t\t\t\tif (!button.hasClass(tm + '-state-disabled')) {\n\n\t\t\t\t\t\t\t\t\t\tbuttonClick(ev);\n\n\t\t\t\t\t\t\t\t\t\t// after the click action, if the button becomes the \"active\" tab, or disabled,\n\t\t\t\t\t\t\t\t\t\t// it should never have a hover class, so remove it now.\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-active') ||\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-hover');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.mousedown(function() {\n\t\t\t\t\t\t\t\t\t// the *down* effect (mouse pressed in).\n\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled\n\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-down');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.mouseup(function() {\n\t\t\t\t\t\t\t\t\t// undo the *down* effect\n\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-down');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.hover(\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t// the *hover* effect.\n\t\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled\n\t\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-hover');\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t// undo the *hover* effect\n\t\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-hover')\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tgroupChildren = groupChildren.add(button);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (isOnlyButtons) {\n\t\t\t\t\tgroupChildren\n\t\t\t\t\t\t.first().addClass(tm + '-corner-left').end()\n\t\t\t\t\t\t.last().addClass(tm + '-corner-right').end();\n\t\t\t\t}\n\n\t\t\t\tif (groupChildren.length > 1) {\n\t\t\t\t\tgroupEl = $('<div/>');\n\t\t\t\t\tif (isOnlyButtons) {\n\t\t\t\t\t\tgroupEl.addClass('fc-button-group');\n\t\t\t\t\t}\n\t\t\t\t\tgroupEl.append(groupChildren);\n\t\t\t\t\tsectionEl.append(groupEl);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsectionEl.append(groupChildren); // 1 or 0 children\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn sectionEl;\n\t}\n\n\n\tfunction updateTitle(text) {\n\t\tif (el) {\n\t\t\tel.find('h2').text(text);\n\t\t}\n\t}\n\n\n\tfunction activateButton(buttonName) {\n\t\tif (el) {\n\t\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t\t.addClass(tm + '-state-active');\n\t\t}\n\t}\n\n\n\tfunction deactivateButton(buttonName) {\n\t\tif (el) {\n\t\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t\t.removeClass(tm + '-state-active');\n\t\t}\n\t}\n\n\n\tfunction disableButton(buttonName) {\n\t\tif (el) {\n\t\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t\t.prop('disabled', true)\n\t\t\t\t.addClass(tm + '-state-disabled');\n\t\t}\n\t}\n\n\n\tfunction enableButton(buttonName) {\n\t\tif (el) {\n\t\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t\t.prop('disabled', false)\n\t\t\t\t.removeClass(tm + '-state-disabled');\n\t\t}\n\t}\n\n\n\tfunction getViewsWithButtons() {\n\t\treturn viewsWithButtons;\n\t}\n\n}\n\n;;\n\nvar Calendar = FC.Calendar = Class.extend({\n\n\tdirDefaults: null, // option defaults related to LTR or RTL\n\tlocaleDefaults: null, // option defaults related to current locale\n\toverrides: null, // option overrides given to the fullCalendar constructor\n\tdynamicOverrides: null, // options set with dynamic setter method. higher precedence than view overrides.\n\toptions: null, // all defaults combined with overrides\n\tviewSpecCache: null, // cache of view definitions\n\tview: null, // current View object\n\theader: null,\n\tfooter: null,\n\tloadingLevel: 0, // number of simultaneous loading tasks\n\n\n\t// a lot of this class' OOP logic is scoped within this constructor function,\n\t// but in the future, write individual methods on the prototype.\n\tconstructor: Calendar_constructor,\n\n\n\t// Subclasses can override this for initialization logic after the constructor has been called\n\tinitialize: function() {\n\t},\n\n\n\t// Computes the flattened options hash for the calendar and assigns to `this.options`.\n\t// Assumes this.overrides and this.dynamicOverrides have already been initialized.\n\tpopulateOptionsHash: function() {\n\t\tvar locale, localeDefaults;\n\t\tvar isRTL, dirDefaults;\n\n\t\tlocale = firstDefined( // explicit locale option given?\n\t\t\tthis.dynamicOverrides.locale,\n\t\t\tthis.overrides.locale\n\t\t);\n\t\tlocaleDefaults = localeOptionHash[locale];\n\t\tif (!localeDefaults) { // explicit locale option not given or invalid?\n\t\t\tlocale = Calendar.defaults.locale;\n\t\t\tlocaleDefaults = localeOptionHash[locale] || {};\n\t\t}\n\n\t\tisRTL = firstDefined( // based on options computed so far, is direction RTL?\n\t\t\tthis.dynamicOverrides.isRTL,\n\t\t\tthis.overrides.isRTL,\n\t\t\tlocaleDefaults.isRTL,\n\t\t\tCalendar.defaults.isRTL\n\t\t);\n\t\tdirDefaults = isRTL ? Calendar.rtlDefaults : {};\n\n\t\tthis.dirDefaults = dirDefaults;\n\t\tthis.localeDefaults = localeDefaults;\n\t\tthis.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence\n\t\t\tCalendar.defaults, // global defaults\n\t\t\tdirDefaults,\n\t\t\tlocaleDefaults,\n\t\t\tthis.overrides,\n\t\t\tthis.dynamicOverrides\n\t\t]);\n\t\tpopulateInstanceComputableOptions(this.options); // fill in gaps with computed options\n\t},\n\n\n\t// Gets information about how to create a view. Will use a cache.\n\tgetViewSpec: function(viewType) {\n\t\tvar cache = this.viewSpecCache;\n\n\t\treturn cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));\n\t},\n\n\n\t// Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n\t// Preference is given to views that have corresponding buttons.\n\tgetUnitViewSpec: function(unit) {\n\t\tvar viewTypes;\n\t\tvar i;\n\t\tvar spec;\n\n\t\tif ($.inArray(unit, intervalUnits) != -1) {\n\n\t\t\t// put views that have buttons first. there will be duplicates, but oh well\n\t\t\tviewTypes = this.header.getViewsWithButtons(); // TODO: include footer as well?\n\t\t\t$.each(FC.views, function(viewType) { // all views\n\t\t\t\tviewTypes.push(viewType);\n\t\t\t});\n\n\t\t\tfor (i = 0; i < viewTypes.length; i++) {\n\t\t\t\tspec = this.getViewSpec(viewTypes[i]);\n\t\t\t\tif (spec) {\n\t\t\t\t\tif (spec.singleUnit == unit) {\n\t\t\t\t\t\treturn spec;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Builds an object with information on how to create a given view\n\tbuildViewSpec: function(requestedViewType) {\n\t\tvar viewOverrides = this.overrides.views || {};\n\t\tvar specChain = []; // for the view. lowest to highest priority\n\t\tvar defaultsChain = []; // for the view. lowest to highest priority\n\t\tvar overridesChain = []; // for the view. lowest to highest priority\n\t\tvar viewType = requestedViewType;\n\t\tvar spec; // for the view\n\t\tvar overrides; // for the view\n\t\tvar duration;\n\t\tvar unit;\n\n\t\t// iterate from the specific view definition to a more general one until we hit an actual View class\n\t\twhile (viewType) {\n\t\t\tspec = fcViews[viewType];\n\t\t\toverrides = viewOverrides[viewType];\n\t\t\tviewType = null; // clear. might repopulate for another iteration\n\n\t\t\tif (typeof spec === 'function') { // TODO: deprecate\n\t\t\t\tspec = { 'class': spec };\n\t\t\t}\n\n\t\t\tif (spec) {\n\t\t\t\tspecChain.unshift(spec);\n\t\t\t\tdefaultsChain.unshift(spec.defaults || {});\n\t\t\t\tduration = duration || spec.duration;\n\t\t\t\tviewType = viewType || spec.type;\n\t\t\t}\n\n\t\t\tif (overrides) {\n\t\t\t\toverridesChain.unshift(overrides); // view-specific option hashes have options at zero-level\n\t\t\t\tduration = duration || overrides.duration;\n\t\t\t\tviewType = viewType || overrides.type;\n\t\t\t}\n\t\t}\n\n\t\tspec = mergeProps(specChain);\n\t\tspec.type = requestedViewType;\n\t\tif (!spec['class']) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (duration) {\n\t\t\tduration = moment.duration(duration);\n\t\t\tif (duration.valueOf()) { // valid?\n\t\t\t\tspec.duration = duration;\n\t\t\t\tunit = computeIntervalUnit(duration);\n\n\t\t\t\t// view is a single-unit duration, like \"week\" or \"day\"\n\t\t\t\t// incorporate options for this. lowest priority\n\t\t\t\tif (duration.as(unit) === 1) {\n\t\t\t\t\tspec.singleUnit = unit;\n\t\t\t\t\toverridesChain.unshift(viewOverrides[unit] || {});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tspec.defaults = mergeOptions(defaultsChain);\n\t\tspec.overrides = mergeOptions(overridesChain);\n\n\t\tthis.buildViewSpecOptions(spec);\n\t\tthis.buildViewSpecButtonText(spec, requestedViewType);\n\n\t\treturn spec;\n\t},\n\n\n\t// Builds and assigns a view spec's options object from its already-assigned defaults and overrides\n\tbuildViewSpecOptions: function(spec) {\n\t\tspec.options = mergeOptions([ // lowest to highest priority\n\t\t\tCalendar.defaults, // global defaults\n\t\t\tspec.defaults, // view's defaults (from ViewSubclass.defaults)\n\t\t\tthis.dirDefaults,\n\t\t\tthis.localeDefaults, // locale and dir take precedence over view's defaults!\n\t\t\tthis.overrides, // calendar's overrides (options given to constructor)\n\t\t\tspec.overrides, // view's overrides (view-specific options)\n\t\t\tthis.dynamicOverrides // dynamically set via setter. highest precedence\n\t\t]);\n\t\tpopulateInstanceComputableOptions(spec.options);\n\t},\n\n\n\t// Computes and assigns a view spec's buttonText-related options\n\tbuildViewSpecButtonText: function(spec, requestedViewType) {\n\n\t\t// given an options object with a possible `buttonText` hash, lookup the buttonText for the\n\t\t// requested view, falling back to a generic unit entry like \"week\" or \"day\"\n\t\tfunction queryButtonText(options) {\n\t\t\tvar buttonText = options.buttonText || {};\n\t\t\treturn buttonText[requestedViewType] ||\n\t\t\t\t// view can decide to look up a certain key\n\t\t\t\t(spec.buttonTextKey ? buttonText[spec.buttonTextKey] : null) ||\n\t\t\t\t// a key like \"month\"\n\t\t\t\t(spec.singleUnit ? buttonText[spec.singleUnit] : null);\n\t\t}\n\n\t\t// highest to lowest priority\n\t\tspec.buttonTextOverride =\n\t\t\tqueryButtonText(this.dynamicOverrides) ||\n\t\t\tqueryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence\n\t\t\tspec.overrides.buttonText; // `buttonText` for view-specific options is a string\n\n\t\t// highest to lowest priority. mirrors buildViewSpecOptions\n\t\tspec.buttonTextDefault =\n\t\t\tqueryButtonText(this.localeDefaults) ||\n\t\t\tqueryButtonText(this.dirDefaults) ||\n\t\t\tspec.defaults.buttonText || // a single string. from ViewSubclass.defaults\n\t\t\tqueryButtonText(Calendar.defaults) ||\n\t\t\t(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"\n\t\t\trequestedViewType; // fall back to given view name\n\t},\n\n\n\t// Given a view name for a custom view or a standard view, creates a ready-to-go View object\n\tinstantiateView: function(viewType) {\n\t\tvar spec = this.getViewSpec(viewType);\n\n\t\treturn new spec['class'](this, viewType, spec.options, spec.duration);\n\t},\n\n\n\t// Returns a boolean about whether the view is okay to instantiate at some point\n\tisValidViewType: function(viewType) {\n\t\treturn Boolean(this.getViewSpec(viewType));\n\t},\n\n\n\t// Should be called when any type of async data fetching begins\n\tpushLoading: function() {\n\t\tif (!(this.loadingLevel++)) {\n\t\t\tthis.publiclyTrigger('loading', null, true, this.view);\n\t\t}\n\t},\n\n\n\t// Should be called when any type of async data fetching completes\n\tpopLoading: function() {\n\t\tif (!(--this.loadingLevel)) {\n\t\t\tthis.publiclyTrigger('loading', null, false, this.view);\n\t\t}\n\t},\n\n\n\t// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)\n\tbuildSelectSpan: function(zonedStartInput, zonedEndInput) {\n\t\tvar start = this.moment(zonedStartInput).stripZone();\n\t\tvar end;\n\n\t\tif (zonedEndInput) {\n\t\t\tend = this.moment(zonedEndInput).stripZone();\n\t\t}\n\t\telse if (start.hasTime()) {\n\t\t\tend = start.clone().add(this.defaultTimedEventDuration);\n\t\t}\n\t\telse {\n\t\t\tend = start.clone().add(this.defaultAllDayEventDuration);\n\t\t}\n\n\t\treturn { start: start, end: end };\n\t}\n\n});\n\n\nCalendar.mixin(EmitterMixin);\n\n\nfunction Calendar_constructor(element, overrides) {\n\tvar t = this;\n\n\n\t// Exports\n\t// -----------------------------------------------------------------------------------\n\n\tt.render = render;\n\tt.destroy = destroy;\n\tt.rerenderEvents = rerenderEvents;\n\tt.changeView = renderView; // `renderView` will switch to another view\n\tt.select = select;\n\tt.unselect = unselect;\n\tt.prev = prev;\n\tt.next = next;\n\tt.prevYear = prevYear;\n\tt.nextYear = nextYear;\n\tt.today = today;\n\tt.gotoDate = gotoDate;\n\tt.incrementDate = incrementDate;\n\tt.zoomTo = zoomTo;\n\tt.getDate = getDate;\n\tt.getCalendar = getCalendar;\n\tt.getView = getView;\n\tt.option = option; // getter/setter method\n\tt.publiclyTrigger = publiclyTrigger;\n\n\n\t// Options\n\t// -----------------------------------------------------------------------------------\n\n\tt.dynamicOverrides = {};\n\tt.viewSpecCache = {};\n\tt.optionHandlers = {}; // for Calendar.options.js\n\tt.overrides = $.extend({}, overrides); // make a copy\n\n\tt.populateOptionsHash(); // sets this.options\n\n\n\n\t// Locale-data Internals\n\t// -----------------------------------------------------------------------------------\n\t// Apply overrides to the current locale's data\n\n\tvar localeData;\n\n\t// Called immediately, and when any of the options change.\n\t// Happens before any internal objects rebuild or rerender, because this is very core.\n\tt.bindOptions([\n\t\t'locale', 'monthNames', 'monthNamesShort', 'dayNames', 'dayNamesShort', 'firstDay', 'weekNumberCalculation'\n\t], function(locale, monthNames, monthNamesShort, dayNames, dayNamesShort, firstDay, weekNumberCalculation) {\n\n\t\t// normalize\n\t\tif (weekNumberCalculation === 'iso') {\n\t\t\tweekNumberCalculation = 'ISO'; // normalize\n\t\t}\n\n\t\tlocaleData = createObject( // make a cheap copy\n\t\t\tgetMomentLocaleData(locale) // will fall back to en\n\t\t);\n\n\t\tif (monthNames) {\n\t\t\tlocaleData._months = monthNames;\n\t\t}\n\t\tif (monthNamesShort) {\n\t\t\tlocaleData._monthsShort = monthNamesShort;\n\t\t}\n\t\tif (dayNames) {\n\t\t\tlocaleData._weekdays = dayNames;\n\t\t}\n\t\tif (dayNamesShort) {\n\t\t\tlocaleData._weekdaysShort = dayNamesShort;\n\t\t}\n\n\t\tif (firstDay == null && weekNumberCalculation === 'ISO') {\n\t\t\tfirstDay = 1;\n\t\t}\n\t\tif (firstDay != null) {\n\t\t\tvar _week = createObject(localeData._week); // _week: { dow: # }\n\t\t\t_week.dow = firstDay;\n\t\t\tlocaleData._week = _week;\n\t\t}\n\n\t\tif ( // whitelist certain kinds of input\n\t\t\tweekNumberCalculation === 'ISO' ||\n\t\t\tweekNumberCalculation === 'local' ||\n\t\t\ttypeof weekNumberCalculation === 'function'\n\t\t) {\n\t\t\tlocaleData._fullCalendar_weekCalc = weekNumberCalculation; // moment-ext will know what to do with it\n\t\t}\n\n\t\t// If the internal current date object already exists, move to new locale.\n\t\t// We do NOT need to do this technique for event dates, because this happens when converting to \"segments\".\n\t\tif (date) {\n\t\t\tlocalizeMoment(date); // sets to localeData\n\t\t}\n\t});\n\n\n\t// Calendar-specific Date Utilities\n\t// -----------------------------------------------------------------------------------\n\n\n\tt.defaultAllDayEventDuration = moment.duration(t.options.defaultAllDayEventDuration);\n\tt.defaultTimedEventDuration = moment.duration(t.options.defaultTimedEventDuration);\n\n\n\t// Builds a moment using the settings of the current calendar: timezone and locale.\n\t// Accepts anything the vanilla moment() constructor accepts.\n\tt.moment = function() {\n\t\tvar mom;\n\n\t\tif (t.options.timezone === 'local') {\n\t\t\tmom = FC.moment.apply(null, arguments);\n\n\t\t\t// Force the moment to be local, because FC.moment doesn't guarantee it.\n\t\t\tif (mom.hasTime()) { // don't give ambiguously-timed moments a local zone\n\t\t\t\tmom.local();\n\t\t\t}\n\t\t}\n\t\telse if (t.options.timezone === 'UTC') {\n\t\t\tmom = FC.moment.utc.apply(null, arguments); // process as UTC\n\t\t}\n\t\telse {\n\t\t\tmom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone\n\t\t}\n\n\t\tlocalizeMoment(mom);\n\n\t\treturn mom;\n\t};\n\n\n\t// Updates the given moment's locale settings to the current calendar locale settings.\n\tfunction localizeMoment(mom) {\n\t\tmom._locale = localeData;\n\t}\n\tt.localizeMoment = localizeMoment;\n\n\n\t// Returns a boolean about whether or not the calendar knows how to calculate\n\t// the timezone offset of arbitrary dates in the current timezone.\n\tt.getIsAmbigTimezone = function() {\n\t\treturn t.options.timezone !== 'local' && t.options.timezone !== 'UTC';\n\t};\n\n\n\t// Returns a copy of the given date in the current timezone. Has no effect on dates without times.\n\tt.applyTimezone = function(date) {\n\t\tif (!date.hasTime()) {\n\t\t\treturn date.clone();\n\t\t}\n\n\t\tvar zonedDate = t.moment(date.toArray());\n\t\tvar timeAdjust = date.time() - zonedDate.time();\n\t\tvar adjustedZonedDate;\n\n\t\t// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)\n\t\tif (timeAdjust) { // is the time result different than expected?\n\t\t\tadjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds\n\t\t\tif (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?\n\t\t\t\tzonedDate = adjustedZonedDate;\n\t\t\t}\n\t\t}\n\n\t\treturn zonedDate;\n\t};\n\n\n\t// Returns a moment for the current date, as defined by the client's computer or from the `now` option.\n\t// Will return an moment with an ambiguous timezone.\n\tt.getNow = function() {\n\t\tvar now = t.options.now;\n\t\tif (typeof now === 'function') {\n\t\t\tnow = now();\n\t\t}\n\t\treturn t.moment(now).stripZone();\n\t};\n\n\n\t// Get an event's normalized end date. If not present, calculate it from the defaults.\n\tt.getEventEnd = function(event) {\n\t\tif (event.end) {\n\t\t\treturn event.end.clone();\n\t\t}\n\t\telse {\n\t\t\treturn t.getDefaultEventEnd(event.allDay, event.start);\n\t\t}\n\t};\n\n\n\t// Given an event's allDay status and start date, return what its fallback end date should be.\n\t// TODO: rename to computeDefaultEventEnd\n\tt.getDefaultEventEnd = function(allDay, zonedStart) {\n\t\tvar end = zonedStart.clone();\n\n\t\tif (allDay) {\n\t\t\tend.stripTime().add(t.defaultAllDayEventDuration);\n\t\t}\n\t\telse {\n\t\t\tend.add(t.defaultTimedEventDuration);\n\t\t}\n\n\t\tif (t.getIsAmbigTimezone()) {\n\t\t\tend.stripZone(); // we don't know what the tzo should be\n\t\t}\n\n\t\treturn end;\n\t};\n\n\n\t// Produces a human-readable string for the given duration.\n\t// Side-effect: changes the locale of the given duration.\n\tt.humanizeDuration = function(duration) {\n\t\treturn duration.locale(t.options.locale).humanize();\n\t};\n\n\n\n\t// Imports\n\t// -----------------------------------------------------------------------------------\n\n\n\tEventManager.call(t);\n\n\n\n\t// Locals\n\t// -----------------------------------------------------------------------------------\n\n\n\tvar _element = element[0];\n\tvar toolbarsManager;\n\tvar header;\n\tvar footer;\n\tvar content;\n\tvar tm; // for making theme classes\n\tvar currentView; // NOTE: keep this in sync with this.view\n\tvar viewsByType = {}; // holds all instantiated view instances, current or not\n\tvar suggestedViewHeight;\n\tvar windowResizeProxy; // wraps the windowResize function\n\tvar ignoreWindowResize = 0;\n\tvar date; // unzoned\n\n\n\n\t// Main Rendering\n\t// -----------------------------------------------------------------------------------\n\n\n\t// compute the initial ambig-timezone date\n\tif (t.options.defaultDate != null) {\n\t\tdate = t.moment(t.options.defaultDate).stripZone();\n\t}\n\telse {\n\t\tdate = t.getNow(); // getNow already returns unzoned\n\t}\n\n\n\tfunction render() {\n\t\tif (!content) {\n\t\t\tinitialRender();\n\t\t}\n\t\telse if (elementVisible()) {\n\t\t\t// mainly for the public API\n\t\t\tcalcSize();\n\t\t\trenderView();\n\t\t}\n\t}\n\n\n\tfunction initialRender() {\n\t\telement.addClass('fc');\n\n\t\t// event delegation for nav links\n\t\telement.on('click.fc', 'a[data-goto]', function(ev) {\n\t\t\tvar anchorEl = $(this);\n\t\t\tvar gotoOptions = anchorEl.data('goto'); // will automatically parse JSON\n\t\t\tvar date = t.moment(gotoOptions.date);\n\t\t\tvar viewType = gotoOptions.type;\n\n\t\t\t// property like \"navLinkDayClick\". might be a string or a function\n\t\t\tvar customAction = currentView.opt('navLink' + capitaliseFirstLetter(viewType) + 'Click');\n\n\t\t\tif (typeof customAction === 'function') {\n\t\t\t\tcustomAction(date, ev);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof customAction === 'string') {\n\t\t\t\t\tviewType = customAction;\n\t\t\t\t}\n\t\t\t\tzoomTo(date, viewType);\n\t\t\t}\n\t\t});\n\n\t\t// called immediately, and upon option change\n\t\tt.bindOption('theme', function(theme) {\n\t\t\ttm = theme ? 'ui' : 'fc'; // affects a larger scope\n\t\t\telement.toggleClass('ui-widget', theme);\n\t\t\telement.toggleClass('fc-unthemed', !theme);\n\t\t});\n\n\t\t// called immediately, and upon option change.\n\t\t// HACK: locale often affects isRTL, so we explicitly listen to that too.\n\t\tt.bindOptions([ 'isRTL', 'locale' ], function(isRTL) {\n\t\t\telement.toggleClass('fc-ltr', !isRTL);\n\t\t\telement.toggleClass('fc-rtl', isRTL);\n\t\t});\n\n\t\tcontent = $(\"<div class='fc-view-container'/>\").prependTo(element);\n\n\t\tvar toolbars = buildToolbars();\n\t\ttoolbarsManager = new Iterator(toolbars);\n\n\t\theader = t.header = toolbars[0];\n\t\tfooter = t.footer = toolbars[1];\n\n\t\trenderHeader();\n\t\trenderFooter();\n\t\trenderView(t.options.defaultView);\n\n\t\tif (t.options.handleWindowResize) {\n\t\t\twindowResizeProxy = debounce(windowResize, t.options.windowResizeDelay); // prevents rapid calls\n\t\t\t$(window).resize(windowResizeProxy);\n\t\t}\n\t}\n\n\n\tfunction destroy() {\n\n\t\tif (currentView) {\n\t\t\tcurrentView.removeElement();\n\n\t\t\t// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.\n\t\t\t// It is still the \"current\" view, just not rendered.\n\t\t}\n\n\t\ttoolbarsManager.proxyCall('removeElement');\n\t\tcontent.remove();\n\t\telement.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');\n\n\t\telement.off('.fc'); // unbind nav link handlers\n\n\t\tif (windowResizeProxy) {\n\t\t\t$(window).unbind('resize', windowResizeProxy);\n\t\t}\n\t}\n\n\n\tfunction elementVisible() {\n\t\treturn element.is(':visible');\n\t}\n\n\n\n\t// View Rendering\n\t// -----------------------------------------------------------------------------------\n\n\n\t// Renders a view because of a date change, view-type change, or for the first time.\n\t// If not given a viewType, keep the current view but render different dates.\n\t// Accepts an optional scroll state to restore to.\n\tfunction renderView(viewType, forcedScroll) {\n\t\tignoreWindowResize++;\n\n\t\tvar needsClearView = currentView && viewType && currentView.type !== viewType;\n\n\t\t// if viewType is changing, remove the old view's rendering\n\t\tif (needsClearView) {\n\t\t\tfreezeContentHeight(); // prevent a scroll jump when view element is removed\n\t\t\tclearView();\n\t\t}\n\n\t\t// if viewType changed, or the view was never created, create a fresh view\n\t\tif (!currentView && viewType) {\n\t\t\tcurrentView = t.view =\n\t\t\t\tviewsByType[viewType] ||\n\t\t\t\t(viewsByType[viewType] = t.instantiateView(viewType));\n\n\t\t\tcurrentView.setElement(\n\t\t\t\t$(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(content)\n\t\t\t);\n\t\t\ttoolbarsManager.proxyCall('activateButton', viewType);\n\t\t}\n\n\t\tif (currentView) {\n\n\t\t\t// in case the view should render a period of time that is completely hidden\n\t\t\tdate = currentView.massageCurrentDate(date);\n\n\t\t\t// render or rerender the view\n\t\t\tif (\n\t\t\t\t!currentView.isDateSet ||\n\t\t\t\t!( // NOT within interval range signals an implicit date window change\n\t\t\t\t\tdate >= currentView.intervalStart &&\n\t\t\t\t\tdate < currentView.intervalEnd\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (elementVisible()) {\n\n\t\t\t\t\tif (forcedScroll) {\n\t\t\t\t\t\tcurrentView.captureInitialScroll(forcedScroll);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentView.setDate(date, forcedScroll);\n\n\t\t\t\t\tif (forcedScroll) {\n\t\t\t\t\t\tcurrentView.releaseScroll();\n\t\t\t\t\t}\n\n\t\t\t\t\t// need to do this after View::render, so dates are calculated\n\t\t\t\t\t// NOTE: view updates title text proactively\n\t\t\t\t\tupdateToolbarsTodayButton();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (needsClearView) {\n\t\t\tthawContentHeight();\n\t\t}\n\n\t\tignoreWindowResize--;\n\t}\n\n\n\t// Unrenders the current view and reflects this change in the Header.\n\t// Unregsiters the `currentView`, but does not remove from viewByType hash.\n\tfunction clearView() {\n\t\ttoolbarsManager.proxyCall('deactivateButton', currentView.type);\n\t\tcurrentView.removeElement();\n\t\tcurrentView = t.view = null;\n\t}\n\n\n\t// Destroys the view, including the view object. Then, re-instantiates it and renders it.\n\t// Maintains the same scroll state.\n\t// TODO: maintain any other user-manipulated state.\n\tfunction reinitView() {\n\t\tignoreWindowResize++;\n\t\tfreezeContentHeight();\n\n\t\tvar viewType = currentView.type;\n\t\tvar scrollState = currentView.queryScroll();\n\t\tclearView();\n\t\tcalcSize();\n\t\trenderView(viewType, scrollState);\n\n\t\tthawContentHeight();\n\t\tignoreWindowResize--;\n\t}\n\n\n\n\t// Resizing\n\t// -----------------------------------------------------------------------------------\n\n\n\tt.getSuggestedViewHeight = function() {\n\t\tif (suggestedViewHeight === undefined) {\n\t\t\tcalcSize();\n\t\t}\n\t\treturn suggestedViewHeight;\n\t};\n\n\n\tt.isHeightAuto = function() {\n\t\treturn t.options.contentHeight === 'auto' || t.options.height === 'auto';\n\t};\n\n\n\tfunction updateSize(shouldRecalc) {\n\t\tif (elementVisible()) {\n\n\t\t\tif (shouldRecalc) {\n\t\t\t\t_calcSize();\n\t\t\t}\n\n\t\t\tignoreWindowResize++;\n\t\t\tcurrentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()\n\t\t\tignoreWindowResize--;\n\n\t\t\treturn true; // signal success\n\t\t}\n\t}\n\n\n\tfunction calcSize() {\n\t\tif (elementVisible()) {\n\t\t\t_calcSize();\n\t\t}\n\t}\n\n\n\tfunction _calcSize() { // assumes elementVisible\n\t\tvar contentHeightInput = t.options.contentHeight;\n\t\tvar heightInput = t.options.height;\n\n\t\tif (typeof contentHeightInput === 'number') { // exists and not 'auto'\n\t\t\tsuggestedViewHeight = contentHeightInput;\n\t\t}\n\t\telse if (typeof contentHeightInput === 'function') { // exists and is a function\n\t\t\tsuggestedViewHeight = contentHeightInput();\n\t\t}\n\t\telse if (typeof heightInput === 'number') { // exists and not 'auto'\n\t\t\tsuggestedViewHeight = heightInput - queryToolbarsHeight();\n\t\t}\n\t\telse if (typeof heightInput === 'function') { // exists and is a function\n\t\t\tsuggestedViewHeight = heightInput() - queryToolbarsHeight();\n\t\t}\n\t\telse if (heightInput === 'parent') { // set to height of parent element\n\t\t\tsuggestedViewHeight = element.parent().height() - queryToolbarsHeight();\n\t\t}\n\t\telse {\n\t\t\tsuggestedViewHeight = Math.round(content.width() / Math.max(t.options.aspectRatio, .5));\n\t\t}\n\t}\n\n\n\tfunction queryToolbarsHeight() {\n\t\treturn toolbarsManager.items.reduce(function(accumulator, toolbar) {\n\t\t\tvar toolbarHeight = toolbar.el ? toolbar.el.outerHeight(true) : 0; // includes margin\n\t\t\treturn accumulator + toolbarHeight;\n\t\t}, 0);\n\t}\n\n\n\tfunction windowResize(ev) {\n\t\tif (\n\t\t\t!ignoreWindowResize &&\n\t\t\tev.target === window && // so we don't process jqui \"resize\" events that have bubbled up\n\t\t\tcurrentView.start // view has already been rendered\n\t\t) {\n\t\t\tif (updateSize(true)) {\n\t\t\t\tcurrentView.publiclyTrigger('windowResize', _element);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/* Event Rendering\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction rerenderEvents() { // API method. destroys old events if previously rendered.\n\t\tif (elementVisible()) {\n\t\t\tt.reportEventChange(); // will re-trasmit events to the view, causing a rerender\n\t\t}\n\t}\n\n\n\n\t/* Toolbars\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction buildToolbars() {\n\t\treturn [\n\t\t\tnew Toolbar(t, computeHeaderOptions()),\n\t\t\tnew Toolbar(t, computeFooterOptions())\n\t\t];\n\t}\n\n\n\tfunction computeHeaderOptions() {\n\t\treturn {\n\t\t\textraClasses: 'fc-header-toolbar',\n\t\t\tlayout: t.options.header\n\t\t};\n\t}\n\n\n\tfunction computeFooterOptions() {\n\t\treturn {\n\t\t\textraClasses: 'fc-footer-toolbar',\n\t\t\tlayout: t.options.footer\n\t\t};\n\t}\n\n\n\t// can be called repeatedly and Header will rerender\n\tfunction renderHeader() {\n\t\theader.setToolbarOptions(computeHeaderOptions());\n\t\theader.render();\n\t\tif (header.el) {\n\t\t\telement.prepend(header.el);\n\t\t}\n\t}\n\n\n\t// can be called repeatedly and Footer will rerender\n\tfunction renderFooter() {\n\t\tfooter.setToolbarOptions(computeFooterOptions());\n\t\tfooter.render();\n\t\tif (footer.el) {\n\t\t\telement.append(footer.el);\n\t\t}\n\t}\n\n\n\tt.setToolbarsTitle = function(title) {\n\t\ttoolbarsManager.proxyCall('updateTitle', title);\n\t};\n\n\n\tfunction updateToolbarsTodayButton() {\n\t\tvar now = t.getNow();\n\t\tif (now >= currentView.intervalStart && now < currentView.intervalEnd) {\n\t\t\ttoolbarsManager.proxyCall('disableButton', 'today');\n\t\t}\n\t\telse {\n\t\t\ttoolbarsManager.proxyCall('enableButton', 'today');\n\t\t}\n\t}\n\n\n\n\t/* Selection\n\t-----------------------------------------------------------------------------*/\n\n\n\t// this public method receives start/end dates in any format, with any timezone\n\tfunction select(zonedStartInput, zonedEndInput) {\n\t\tcurrentView.select(\n\t\t\tt.buildSelectSpan.apply(t, arguments)\n\t\t);\n\t}\n\n\n\tfunction unselect() { // safe to be called before renderView\n\t\tif (currentView) {\n\t\t\tcurrentView.unselect();\n\t\t}\n\t}\n\n\n\n\t/* Date\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction prev() {\n\t\tdate = currentView.computePrevDate(date);\n\t\trenderView();\n\t}\n\n\n\tfunction next() {\n\t\tdate = currentView.computeNextDate(date);\n\t\trenderView();\n\t}\n\n\n\tfunction prevYear() {\n\t\tdate.add(-1, 'years');\n\t\trenderView();\n\t}\n\n\n\tfunction nextYear() {\n\t\tdate.add(1, 'years');\n\t\trenderView();\n\t}\n\n\n\tfunction today() {\n\t\tdate = t.getNow();\n\t\trenderView();\n\t}\n\n\n\tfunction gotoDate(zonedDateInput) {\n\t\tdate = t.moment(zonedDateInput).stripZone();\n\t\trenderView();\n\t}\n\n\n\tfunction incrementDate(delta) {\n\t\tdate.add(moment.duration(delta));\n\t\trenderView();\n\t}\n\n\n\t// Forces navigation to a view for the given date.\n\t// `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n\tfunction zoomTo(newDate, viewType) {\n\t\tvar spec;\n\n\t\tviewType = viewType || 'day'; // day is default zoom\n\t\tspec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);\n\n\t\tdate = newDate.clone();\n\t\trenderView(spec ? spec.type : null);\n\t}\n\n\n\t// for external API\n\tfunction getDate() {\n\t\treturn t.applyTimezone(date); // infuse the calendar's timezone\n\t}\n\n\n\n\t/* Height \"Freezing\"\n\t-----------------------------------------------------------------------------*/\n\n\n\tt.freezeContentHeight = freezeContentHeight;\n\tt.thawContentHeight = thawContentHeight;\n\n\tvar freezeContentHeightDepth = 0;\n\n\n\tfunction freezeContentHeight() {\n\t\tif (!(freezeContentHeightDepth++)) {\n\t\t\tcontent.css({\n\t\t\t\twidth: '100%',\n\t\t\t\theight: content.height(),\n\t\t\t\toverflow: 'hidden'\n\t\t\t});\n\t\t}\n\t}\n\n\n\tfunction thawContentHeight() {\n\t\tif (!(--freezeContentHeightDepth)) {\n\t\t\tcontent.css({\n\t\t\t\twidth: '',\n\t\t\t\theight: '',\n\t\t\t\toverflow: ''\n\t\t\t});\n\t\t}\n\t}\n\n\n\n\t/* Misc\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction getCalendar() {\n\t\treturn t;\n\t}\n\n\n\tfunction getView() {\n\t\treturn currentView;\n\t}\n\n\n\tfunction option(name, value) {\n\t\tvar newOptionHash;\n\n\t\tif (typeof name === 'string') {\n\t\t\tif (value === undefined) { // getter\n\t\t\t\treturn t.options[name];\n\t\t\t}\n\t\t\telse { // setter for individual option\n\t\t\t\tnewOptionHash = {};\n\t\t\t\tnewOptionHash[name] = value;\n\t\t\t\tsetOptions(newOptionHash);\n\t\t\t}\n\t\t}\n\t\telse if (typeof name === 'object') { // compound setter with object input\n\t\t\tsetOptions(name);\n\t\t}\n\t}\n\n\n\tfunction setOptions(newOptionHash) {\n\t\tvar optionCnt = 0;\n\t\tvar optionName;\n\n\t\tfor (optionName in newOptionHash) {\n\t\t\tt.dynamicOverrides[optionName] = newOptionHash[optionName];\n\t\t}\n\n\t\tt.viewSpecCache = {}; // the dynamic override invalidates the options in this cache, so just clear it\n\t\tt.populateOptionsHash(); // this.options needs to be recomputed after the dynamic override\n\n\t\t// trigger handlers after this.options has been updated\n\t\tfor (optionName in newOptionHash) {\n\t\t\tt.triggerOptionHandlers(optionName); // recall bindOption/bindOptions\n\t\t\toptionCnt++;\n\t\t}\n\n\t\t// special-case handling of single option change.\n\t\t// if only one option change, `optionName` will be its name.\n\t\tif (optionCnt === 1) {\n\t\t\tif (optionName === 'height' || optionName === 'contentHeight' || optionName === 'aspectRatio') {\n\t\t\t\tupdateSize(true); // true = allow recalculation of height\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (optionName === 'defaultDate') {\n\t\t\t\treturn; // can't change date this way. use gotoDate instead\n\t\t\t}\n\t\t\telse if (optionName === 'businessHours') {\n\t\t\t\tif (currentView) {\n\t\t\t\t\tcurrentView.unrenderBusinessHours();\n\t\t\t\t\tcurrentView.renderBusinessHours();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (optionName === 'timezone') {\n\t\t\t\tt.rezoneArrayEventSources();\n\t\t\t\tt.refetchEvents();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// catch-all. rerender the header and footer and rebuild/rerender the current view\n\t\trenderHeader();\n\t\trenderFooter();\n\t\tviewsByType = {}; // even non-current views will be affected by this option change. do before rerender\n\t\treinitView();\n\t}\n\n\n\tfunction publiclyTrigger(name, thisObj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 2);\n\n\t\tthisObj = thisObj || _element;\n\t\tthis.triggerWith(name, thisObj, args); // Emitter's method\n\n\t\tif (t.options[name]) {\n\t\t\treturn t.options[name].apply(thisObj, args);\n\t\t}\n\t}\n\n\tt.initialize();\n}\n\n;;\n/*\nOptions binding/triggering system.\n*/\nCalendar.mixin({\n\n\t// A map of option names to arrays of handler objects. Initialized to {} in Calendar.\n\t// Format for a handler object:\n\t// {\n\t//   func // callback function to be called upon change\n\t//   names // option names whose values should be given to func\n\t// }\n\toptionHandlers: null,\n\n\t// Calls handlerFunc immediately, and when the given option has changed.\n\t// handlerFunc will be given the option value.\n\tbindOption: function(optionName, handlerFunc) {\n\t\tthis.bindOptions([ optionName ], handlerFunc);\n\t},\n\n\t// Calls handlerFunc immediately, and when any of the given options change.\n\t// handlerFunc will be given each option value as ordered function arguments.\n\tbindOptions: function(optionNames, handlerFunc) {\n\t\tvar handlerObj = { func: handlerFunc, names: optionNames };\n\t\tvar i;\n\n\t\tfor (i = 0; i < optionNames.length; i++) {\n\t\t\tthis.registerOptionHandlerObj(optionNames[i], handlerObj);\n\t\t}\n\n\t\tthis.triggerOptionHandlerObj(handlerObj);\n\t},\n\n\t// Puts the given handler object into the internal hash\n\tregisterOptionHandlerObj: function(optionName, handlerObj) {\n\t\t(this.optionHandlers[optionName] || (this.optionHandlers[optionName] = []))\n\t\t\t.push(handlerObj);\n\t},\n\n\t// Reports that the given option has changed, and calls all appropriate handlers.\n\ttriggerOptionHandlers: function(optionName) {\n\t\tvar handlerObjs = this.optionHandlers[optionName] || [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < handlerObjs.length; i++) {\n\t\t\tthis.triggerOptionHandlerObj(handlerObjs[i]);\n\t\t}\n\t},\n\n\t// Calls the callback for a specific handler object, passing in the appropriate arguments.\n\ttriggerOptionHandlerObj: function(handlerObj) {\n\t\tvar optionNames = handlerObj.names;\n\t\tvar optionValues = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < optionNames.length; i++) {\n\t\t\toptionValues.push(this.options[optionNames[i]]);\n\t\t}\n\n\t\thandlerObj.func.apply(this, optionValues); // maintain the Calendar's `this` context\n\t}\n\n});\n\n;;\n\nCalendar.defaults = {\n\n\ttitleRangeSeparator: ' \\u2013 ', // en dash\n\tmonthYearFormat: 'MMMM YYYY', // required for en. other locales rely on datepicker computable option\n\n\tdefaultTimedEventDuration: '02:00:00',\n\tdefaultAllDayEventDuration: { days: 1 },\n\tforceEventDuration: false,\n\tnextDayThreshold: '09:00:00', // 9am\n\n\t// display\n\tdefaultView: 'month',\n\taspectRatio: 1.35,\n\theader: {\n\t\tleft: 'title',\n\t\tcenter: '',\n\t\tright: 'today prev,next'\n\t},\n\tweekends: true,\n\tweekNumbers: false,\n\n\tweekNumberTitle: 'W',\n\tweekNumberCalculation: 'local',\n\n\t//editable: false,\n\n\t//nowIndicator: false,\n\n\tscrollTime: '06:00:00',\n\n\t// event ajax\n\tlazyFetching: true,\n\tstartParam: 'start',\n\tendParam: 'end',\n\ttimezoneParam: 'timezone',\n\n\ttimezone: false,\n\n\t//allDayDefault: undefined,\n\n\t// locale\n\tisRTL: false,\n\tbuttonText: {\n\t\tprev: \"prev\",\n\t\tnext: \"next\",\n\t\tprevYear: \"prev year\",\n\t\tnextYear: \"next year\",\n\t\tyear: 'year', // TODO: locale files need to specify this\n\t\ttoday: 'today',\n\t\tmonth: 'month',\n\t\tweek: 'week',\n\t\tday: 'day'\n\t},\n\n\tbuttonIcons: {\n\t\tprev: 'left-single-arrow',\n\t\tnext: 'right-single-arrow',\n\t\tprevYear: 'left-double-arrow',\n\t\tnextYear: 'right-double-arrow'\n\t},\n\n\tallDayText: 'all-day',\n\n\t// jquery-ui theming\n\ttheme: false,\n\tthemeButtonIcons: {\n\t\tprev: 'circle-triangle-w',\n\t\tnext: 'circle-triangle-e',\n\t\tprevYear: 'seek-prev',\n\t\tnextYear: 'seek-next'\n\t},\n\n\t//eventResizableFromStart: false,\n\tdragOpacity: .75,\n\tdragRevertDuration: 500,\n\tdragScroll: true,\n\n\t//selectable: false,\n\tunselectAuto: true,\n\n\tdropAccept: '*',\n\n\teventOrder: 'title',\n\t//eventRenderWait: null,\n\n\teventLimit: false,\n\teventLimitText: 'more',\n\teventLimitClick: 'popover',\n\tdayPopoverFormat: 'LL',\n\n\thandleWindowResize: true,\n\twindowResizeDelay: 100, // milliseconds before an updateSize happens\n\n\tlongPressDelay: 1000\n\n};\n\n\nCalendar.englishDefaults = { // used by locale.js\n\tdayPopoverFormat: 'dddd, MMMM D'\n};\n\n\nCalendar.rtlDefaults = { // right-to-left defaults\n\theader: { // TODO: smarter solution (first/center/last ?)\n\t\tleft: 'next,prev today',\n\t\tcenter: '',\n\t\tright: 'title'\n\t},\n\tbuttonIcons: {\n\t\tprev: 'right-single-arrow',\n\t\tnext: 'left-single-arrow',\n\t\tprevYear: 'right-double-arrow',\n\t\tnextYear: 'left-double-arrow'\n\t},\n\tthemeButtonIcons: {\n\t\tprev: 'circle-triangle-e',\n\t\tnext: 'circle-triangle-w',\n\t\tnextYear: 'seek-prev',\n\t\tprevYear: 'seek-next'\n\t}\n};\n\n;;\n\nvar localeOptionHash = FC.locales = {}; // initialize and expose\n\n\n// TODO: document the structure and ordering of a FullCalendar locale file\n\n\n// Initialize jQuery UI datepicker translations while using some of the translations\n// Will set this as the default locales for datepicker.\nFC.datepickerLocale = function(localeCode, dpLocaleCode, dpOptions) {\n\n\t// get the FullCalendar internal option hash for this locale. create if necessary\n\tvar fcOptions = localeOptionHash[localeCode] || (localeOptionHash[localeCode] = {});\n\n\t// transfer some simple options from datepicker to fc\n\tfcOptions.isRTL = dpOptions.isRTL;\n\tfcOptions.weekNumberTitle = dpOptions.weekHeader;\n\n\t// compute some more complex options from datepicker\n\t$.each(dpComputableOptions, function(name, func) {\n\t\tfcOptions[name] = func(dpOptions);\n\t});\n\n\t// is jQuery UI Datepicker is on the page?\n\tif ($.datepicker) {\n\n\t\t// Register the locale data.\n\t\t// FullCalendar and MomentJS use locale codes like \"pt-br\" but Datepicker\n\t\t// does it like \"pt-BR\" or if it doesn't have the locale, maybe just \"pt\".\n\t\t// Make an alias so the locale can be referenced either way.\n\t\t$.datepicker.regional[dpLocaleCode] =\n\t\t\t$.datepicker.regional[localeCode] = // alias\n\t\t\t\tdpOptions;\n\n\t\t// Alias 'en' to the default locale data. Do this every time.\n\t\t$.datepicker.regional.en = $.datepicker.regional[''];\n\n\t\t// Set as Datepicker's global defaults.\n\t\t$.datepicker.setDefaults(dpOptions);\n\t}\n};\n\n\n// Sets FullCalendar-specific translations. Will set the locales as the global default.\nFC.locale = function(localeCode, newFcOptions) {\n\tvar fcOptions;\n\tvar momOptions;\n\n\t// get the FullCalendar internal option hash for this locale. create if necessary\n\tfcOptions = localeOptionHash[localeCode] || (localeOptionHash[localeCode] = {});\n\n\t// provided new options for this locales? merge them in\n\tif (newFcOptions) {\n\t\tfcOptions = localeOptionHash[localeCode] = mergeOptions([ fcOptions, newFcOptions ]);\n\t}\n\n\t// compute locale options that weren't defined.\n\t// always do this. newFcOptions can be undefined when initializing from i18n file,\n\t// so no way to tell if this is an initialization or a default-setting.\n\tmomOptions = getMomentLocaleData(localeCode); // will fall back to en\n\t$.each(momComputableOptions, function(name, func) {\n\t\tif (fcOptions[name] == null) {\n\t\t\tfcOptions[name] = func(momOptions, fcOptions);\n\t\t}\n\t});\n\n\t// set it as the default locale for FullCalendar\n\tCalendar.defaults.locale = localeCode;\n};\n\n\n// NOTE: can't guarantee any of these computations will run because not every locale has datepicker\n// configs, so make sure there are English fallbacks for these in the defaults file.\nvar dpComputableOptions = {\n\n\tbuttonText: function(dpOptions) {\n\t\treturn {\n\t\t\t// the translations sometimes wrongly contain HTML entities\n\t\t\tprev: stripHtmlEntities(dpOptions.prevText),\n\t\t\tnext: stripHtmlEntities(dpOptions.nextText),\n\t\t\ttoday: stripHtmlEntities(dpOptions.currentText)\n\t\t};\n\t},\n\n\t// Produces format strings like \"MMMM YYYY\" -> \"September 2014\"\n\tmonthYearFormat: function(dpOptions) {\n\t\treturn dpOptions.showMonthAfterYear ?\n\t\t\t'YYYY[' + dpOptions.yearSuffix + '] MMMM' :\n\t\t\t'MMMM YYYY[' + dpOptions.yearSuffix + ']';\n\t}\n\n};\n\nvar momComputableOptions = {\n\n\t// Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"\n\tdayOfMonthFormat: function(momOptions, fcOptions) {\n\t\tvar format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"\n\n\t\t// strip the year off the edge, as well as other misc non-whitespace chars\n\t\tformat = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');\n\n\t\tif (fcOptions.isRTL) {\n\t\t\tformat += ' ddd'; // for RTL, add day-of-week to end\n\t\t}\n\t\telse {\n\t\t\tformat = 'ddd ' + format; // for LTR, add day-of-week to beginning\n\t\t}\n\t\treturn format;\n\t},\n\n\t// Produces format strings like \"h:mma\" -> \"6:00pm\"\n\tmediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"\n\tsmallTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '(:mm)')\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign locales\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"\n\textraSmallTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '(:mm)')\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign locales\n\t\t\t.replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"\n\thourFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '')\n\t\t\t.replace(/(\\Wmm)$/, '') // like above, but for foreign locales\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)\n\tnoMeridiemTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(/\\s*a$/i, ''); // remove trailing AM/PM\n\t}\n\n};\n\n\n// options that should be computed off live calendar options (considers override options)\n// TODO: best place for this? related to locale?\n// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it\nvar instanceComputableOptions = {\n\n\t// Produces format strings for results like \"Mo 16\"\n\tsmallDayDateFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'D dd' :\n\t\t\t'dd D';\n\t},\n\n\t// Produces format strings for results like \"Wk 5\"\n\tweekFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'w[ ' + options.weekNumberTitle + ']' :\n\t\t\t'[' + options.weekNumberTitle + ' ]w';\n\t},\n\n\t// Produces format strings for results like \"Wk5\"\n\tsmallWeekFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'w[' + options.weekNumberTitle + ']' :\n\t\t\t'[' + options.weekNumberTitle + ']w';\n\t}\n\n};\n\nfunction populateInstanceComputableOptions(options) {\n\t$.each(instanceComputableOptions, function(name, func) {\n\t\tif (options[name] == null) {\n\t\t\toptions[name] = func(options);\n\t\t}\n\t});\n}\n\n\n// Returns moment's internal locale data. If doesn't exist, returns English.\nfunction getMomentLocaleData(localeCode) {\n\treturn moment.localeData(localeCode) || moment.localeData('en');\n}\n\n\n// Initialize English by forcing computation of moment-derived options.\n// Also, sets it as the default.\nFC.locale('en', Calendar.englishDefaults);\n\n;;\n\nFC.sourceNormalizers = [];\nFC.sourceFetchers = [];\n\nvar ajaxDefaults = {\n\tdataType: 'json',\n\tcache: false\n};\n\nvar eventGUID = 1;\n\n\nfunction EventManager() { // assumed to be a calendar\n\tvar t = this;\n\n\n\t// exports\n\tt.requestEvents = requestEvents;\n\tt.reportEventChange = reportEventChange;\n\tt.isFetchNeeded = isFetchNeeded;\n\tt.fetchEvents = fetchEvents;\n\tt.fetchEventSources = fetchEventSources;\n\tt.refetchEvents = refetchEvents;\n\tt.refetchEventSources = refetchEventSources;\n\tt.getEventSources = getEventSources;\n\tt.getEventSourceById = getEventSourceById;\n\tt.addEventSource = addEventSource;\n\tt.removeEventSource = removeEventSource;\n\tt.removeEventSources = removeEventSources;\n\tt.updateEvent = updateEvent;\n\tt.updateEvents = updateEvents;\n\tt.renderEvent = renderEvent;\n\tt.renderEvents = renderEvents;\n\tt.removeEvents = removeEvents;\n\tt.clientEvents = clientEvents;\n\tt.mutateEvent = mutateEvent;\n\tt.normalizeEventDates = normalizeEventDates;\n\tt.normalizeEventTimes = normalizeEventTimes;\n\n\n\t// locals\n\tvar stickySource = { events: [] };\n\tvar sources = [ stickySource ];\n\tvar rangeStart, rangeEnd;\n\tvar pendingSourceCnt = 0; // outstanding fetch requests, max one per source\n\tvar cache = []; // holds events that have already been expanded\n\tvar prunedCache; // like cache, but only events that intersect with rangeStart/rangeEnd\n\n\n\t$.each(\n\t\t(t.options.events ? [ t.options.events ] : []).concat(t.options.eventSources || []),\n\t\tfunction(i, sourceInput) {\n\t\t\tvar source = buildEventSource(sourceInput);\n\t\t\tif (source) {\n\t\t\t\tsources.push(source);\n\t\t\t}\n\t\t}\n\t);\n\n\n\n\tfunction requestEvents(start, end) {\n\t\tif (!t.options.lazyFetching || isFetchNeeded(start, end)) {\n\t\t\treturn fetchEvents(start, end);\n\t\t}\n\t\telse {\n\t\t\treturn Promise.resolve(prunedCache);\n\t\t}\n\t}\n\n\n\tfunction reportEventChange() {\n\t\tprunedCache = filterEventsWithinRange(cache);\n\t\tt.trigger('eventsReset', prunedCache);\n\t}\n\n\n\tfunction filterEventsWithinRange(events) {\n\t\tvar filteredEvents = [];\n\t\tvar i, event;\n\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\tevent = events[i];\n\n\t\t\tif (\n\t\t\t\tevent.start.clone().stripZone() < rangeEnd &&\n\t\t\t\tt.getEventEnd(event).stripZone() > rangeStart\n\t\t\t) {\n\t\t\t\tfilteredEvents.push(event);\n\t\t\t}\n\t\t}\n\n\t\treturn filteredEvents;\n\t}\n\n\n\tt.getEventCache = function() {\n\t\treturn cache;\n\t};\n\n\n\tt.getPrunedEventCache = function() {\n\t\treturn prunedCache;\n\t};\n\n\n\n\t/* Fetching\n\t-----------------------------------------------------------------------------*/\n\n\n\t// start and end are assumed to be unzoned\n\tfunction isFetchNeeded(start, end) {\n\t\treturn !rangeStart || // nothing has been fetched yet?\n\t\t\tstart < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?\n\t}\n\n\n\tfunction fetchEvents(start, end) {\n\t\trangeStart = start;\n\t\trangeEnd = end;\n\t\treturn refetchEvents();\n\t}\n\n\n\t// poorly named. fetches all sources with current `rangeStart` and `rangeEnd`.\n\tfunction refetchEvents() {\n\t\treturn fetchEventSources(sources, 'reset');\n\t}\n\n\n\t// poorly named. fetches a subset of event sources.\n\tfunction refetchEventSources(matchInputs) {\n\t\treturn fetchEventSources(getEventSourcesByMatchArray(matchInputs));\n\t}\n\n\n\t// expects an array of event source objects (the originals, not copies)\n\t// `specialFetchType` is an optimization parameter that affects purging of the event cache.\n\tfunction fetchEventSources(specificSources, specialFetchType) {\n\t\tvar i, source;\n\n\t\tif (specialFetchType === 'reset') {\n\t\t\tcache = [];\n\t\t}\n\t\telse if (specialFetchType !== 'add') {\n\t\t\tcache = excludeEventsBySources(cache, specificSources);\n\t\t}\n\n\t\tfor (i = 0; i < specificSources.length; i++) {\n\t\t\tsource = specificSources[i];\n\n\t\t\t// already-pending sources have already been accounted for in pendingSourceCnt\n\t\t\tif (source._status !== 'pending') {\n\t\t\t\tpendingSourceCnt++;\n\t\t\t}\n\n\t\t\tsource._fetchId = (source._fetchId || 0) + 1;\n\t\t\tsource._status = 'pending';\n\t\t}\n\n\t\tfor (i = 0; i < specificSources.length; i++) {\n\t\t\tsource = specificSources[i];\n\t\t\ttryFetchEventSource(source, source._fetchId);\n\t\t}\n\n\t\tif (pendingSourceCnt) {\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\tt.one('eventsReceived', resolve); // will send prunedCache\n\t\t\t});\n\t\t}\n\t\telse { // executed all synchronously, or no sources at all\n\t\t\treturn Promise.resolve(prunedCache);\n\t\t}\n\t}\n\n\n\t// fetches an event source and processes its result ONLY if it is still the current fetch.\n\t// caller is responsible for incrementing pendingSourceCnt first.\n\tfunction tryFetchEventSource(source, fetchId) {\n\t\t_fetchEventSource(source, function(eventInputs) {\n\t\t\tvar isArraySource = $.isArray(source.events);\n\t\t\tvar i, eventInput;\n\t\t\tvar abstractEvent;\n\n\t\t\tif (\n\t\t\t\t// is this the source's most recent fetch?\n\t\t\t\t// if not, rely on an upcoming fetch of this source to decrement pendingSourceCnt\n\t\t\t\tfetchId === source._fetchId &&\n\t\t\t\t// event source no longer valid?\n\t\t\t\tsource._status !== 'rejected'\n\t\t\t) {\n\t\t\t\tsource._status = 'resolved';\n\n\t\t\t\tif (eventInputs) {\n\t\t\t\t\tfor (i = 0; i < eventInputs.length; i++) {\n\t\t\t\t\t\teventInput = eventInputs[i];\n\n\t\t\t\t\t\tif (isArraySource) { // array sources have already been convert to Event Objects\n\t\t\t\t\t\t\tabstractEvent = eventInput;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tabstractEvent = buildEventFromInput(eventInput, source);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (abstractEvent) { // not false (an invalid event)\n\t\t\t\t\t\t\tcache.push.apply( // append\n\t\t\t\t\t\t\t\tcache,\n\t\t\t\t\t\t\t\texpandEvent(abstractEvent) // add individual expanded events to the cache\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdecrementPendingSourceCnt();\n\t\t\t}\n\t\t});\n\t}\n\n\n\tfunction rejectEventSource(source) {\n\t\tvar wasPending = source._status === 'pending';\n\n\t\tsource._status = 'rejected';\n\n\t\tif (wasPending) {\n\t\t\tdecrementPendingSourceCnt();\n\t\t}\n\t}\n\n\n\tfunction decrementPendingSourceCnt() {\n\t\tpendingSourceCnt--;\n\t\tif (!pendingSourceCnt) {\n\t\t\treportEventChange(cache); // updates prunedCache\n\t\t\tt.trigger('eventsReceived', prunedCache);\n\t\t}\n\t}\n\n\n\tfunction _fetchEventSource(source, callback) {\n\t\tvar i;\n\t\tvar fetchers = FC.sourceFetchers;\n\t\tvar res;\n\n\t\tfor (i=0; i<fetchers.length; i++) {\n\t\t\tres = fetchers[i].call(\n\t\t\t\tt, // this, the Calendar object\n\t\t\t\tsource,\n\t\t\t\trangeStart.clone(),\n\t\t\t\trangeEnd.clone(),\n\t\t\t\tt.options.timezone,\n\t\t\t\tcallback\n\t\t\t);\n\n\t\t\tif (res === true) {\n\t\t\t\t// the fetcher is in charge. made its own async request\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (typeof res == 'object') {\n\t\t\t\t// the fetcher returned a new source. process it\n\t\t\t\t_fetchEventSource(res, callback);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tvar events = source.events;\n\t\tif (events) {\n\t\t\tif ($.isFunction(events)) {\n\t\t\t\tt.pushLoading();\n\t\t\t\tevents.call(\n\t\t\t\t\tt, // this, the Calendar object\n\t\t\t\t\trangeStart.clone(),\n\t\t\t\t\trangeEnd.clone(),\n\t\t\t\t\tt.options.timezone,\n\t\t\t\t\tfunction(events) {\n\t\t\t\t\t\tcallback(events);\n\t\t\t\t\t\tt.popLoading();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ($.isArray(events)) {\n\t\t\t\tcallback(events);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}else{\n\t\t\tvar url = source.url;\n\t\t\tif (url) {\n\t\t\t\tvar success = source.success;\n\t\t\t\tvar error = source.error;\n\t\t\t\tvar complete = source.complete;\n\n\t\t\t\t// retrieve any outbound GET/POST $.ajax data from the options\n\t\t\t\tvar customData;\n\t\t\t\tif ($.isFunction(source.data)) {\n\t\t\t\t\t// supplied as a function that returns a key/value object\n\t\t\t\t\tcustomData = source.data();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// supplied as a straight key/value object\n\t\t\t\t\tcustomData = source.data;\n\t\t\t\t}\n\n\t\t\t\t// use a copy of the custom data so we can modify the parameters\n\t\t\t\t// and not affect the passed-in object.\n\t\t\t\tvar data = $.extend({}, customData || {});\n\n\t\t\t\tvar startParam = firstDefined(source.startParam, t.options.startParam);\n\t\t\t\tvar endParam = firstDefined(source.endParam, t.options.endParam);\n\t\t\t\tvar timezoneParam = firstDefined(source.timezoneParam, t.options.timezoneParam);\n\n\t\t\t\tif (startParam) {\n\t\t\t\t\tdata[startParam] = rangeStart.format();\n\t\t\t\t}\n\t\t\t\tif (endParam) {\n\t\t\t\t\tdata[endParam] = rangeEnd.format();\n\t\t\t\t}\n\t\t\t\tif (t.options.timezone && t.options.timezone != 'local') {\n\t\t\t\t\tdata[timezoneParam] = t.options.timezone;\n\t\t\t\t}\n\n\t\t\t\tt.pushLoading();\n\t\t\t\t$.ajax($.extend({}, ajaxDefaults, source, {\n\t\t\t\t\tdata: data,\n\t\t\t\t\tsuccess: function(events) {\n\t\t\t\t\t\tevents = events || [];\n\t\t\t\t\t\tvar res = applyAll(success, this, arguments);\n\t\t\t\t\t\tif ($.isArray(res)) {\n\t\t\t\t\t\t\tevents = res;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(events);\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tapplyAll(error, this, arguments);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tapplyAll(complete, this, arguments);\n\t\t\t\t\t\tt.popLoading();\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}else{\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/* Sources\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction addEventSource(sourceInput) {\n\t\tvar source = buildEventSource(sourceInput);\n\t\tif (source) {\n\t\t\tsources.push(source);\n\t\t\tfetchEventSources([ source ], 'add'); // will eventually call reportEventChange\n\t\t}\n\t}\n\n\n\tfunction buildEventSource(sourceInput) { // will return undefined if invalid source\n\t\tvar normalizers = FC.sourceNormalizers;\n\t\tvar source;\n\t\tvar i;\n\n\t\tif ($.isFunction(sourceInput) || $.isArray(sourceInput)) {\n\t\t\tsource = { events: sourceInput };\n\t\t}\n\t\telse if (typeof sourceInput === 'string') {\n\t\t\tsource = { url: sourceInput };\n\t\t}\n\t\telse if (typeof sourceInput === 'object') {\n\t\t\tsource = $.extend({}, sourceInput); // shallow copy\n\t\t}\n\n\t\tif (source) {\n\n\t\t\t// TODO: repeat code, same code for event classNames\n\t\t\tif (source.className) {\n\t\t\t\tif (typeof source.className === 'string') {\n\t\t\t\t\tsource.className = source.className.split(/\\s+/);\n\t\t\t\t}\n\t\t\t\t// otherwise, assumed to be an array\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsource.className = [];\n\t\t\t}\n\n\t\t\t// for array sources, we convert to standard Event Objects up front\n\t\t\tif ($.isArray(source.events)) {\n\t\t\t\tsource.origArray = source.events; // for removeEventSource\n\t\t\t\tsource.events = $.map(source.events, function(eventInput) {\n\t\t\t\t\treturn buildEventFromInput(eventInput, source);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (i=0; i<normalizers.length; i++) {\n\t\t\t\tnormalizers[i].call(t, source);\n\t\t\t}\n\n\t\t\treturn source;\n\t\t}\n\t}\n\n\n\tfunction removeEventSource(matchInput) {\n\t\tremoveSpecificEventSources(\n\t\t\tgetEventSourcesByMatch(matchInput)\n\t\t);\n\t}\n\n\n\t// if called with no arguments, removes all.\n\tfunction removeEventSources(matchInputs) {\n\t\tif (matchInputs == null) {\n\t\t\tremoveSpecificEventSources(sources, true); // isAll=true\n\t\t}\n\t\telse {\n\t\t\tremoveSpecificEventSources(\n\t\t\t\tgetEventSourcesByMatchArray(matchInputs)\n\t\t\t);\n\t\t}\n\t}\n\n\n\tfunction removeSpecificEventSources(targetSources, isAll) {\n\t\tvar i;\n\n\t\t// cancel pending requests\n\t\tfor (i = 0; i < targetSources.length; i++) {\n\t\t\trejectEventSource(targetSources[i]);\n\t\t}\n\n\t\tif (isAll) { // an optimization\n\t\t\tsources = [];\n\t\t\tcache = [];\n\t\t}\n\t\telse {\n\t\t\t// remove from persisted source list\n\t\t\tsources = $.grep(sources, function(source) {\n\t\t\t\tfor (i = 0; i < targetSources.length; i++) {\n\t\t\t\t\tif (source === targetSources[i]) {\n\t\t\t\t\t\treturn false; // exclude\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true; // include\n\t\t\t});\n\n\t\t\tcache = excludeEventsBySources(cache, targetSources);\n\t\t}\n\n\t\treportEventChange();\n\t}\n\n\n\tfunction getEventSources() {\n\t\treturn sources.slice(1); // returns a shallow copy of sources with stickySource removed\n\t}\n\n\n\tfunction getEventSourceById(id) {\n\t\treturn $.grep(sources, function(source) {\n\t\t\treturn source.id && source.id === id;\n\t\t})[0];\n\t}\n\n\n\t// like getEventSourcesByMatch, but accepts multple match criteria (like multiple IDs)\n\tfunction getEventSourcesByMatchArray(matchInputs) {\n\n\t\t// coerce into an array\n\t\tif (!matchInputs) {\n\t\t\tmatchInputs = [];\n\t\t}\n\t\telse if (!$.isArray(matchInputs)) {\n\t\t\tmatchInputs = [ matchInputs ];\n\t\t}\n\n\t\tvar matchingSources = [];\n\t\tvar i;\n\n\t\t// resolve raw inputs to real event source objects\n\t\tfor (i = 0; i < matchInputs.length; i++) {\n\t\t\tmatchingSources.push.apply( // append\n\t\t\t\tmatchingSources,\n\t\t\t\tgetEventSourcesByMatch(matchInputs[i])\n\t\t\t);\n\t\t}\n\n\t\treturn matchingSources;\n\t}\n\n\n\t// matchInput can either by a real event source object, an ID, or the function/URL for the source.\n\t// returns an array of matching source objects.\n\tfunction getEventSourcesByMatch(matchInput) {\n\t\tvar i, source;\n\n\t\t// given an proper event source object\n\t\tfor (i = 0; i < sources.length; i++) {\n\t\t\tsource = sources[i];\n\t\t\tif (source === matchInput) {\n\t\t\t\treturn [ source ];\n\t\t\t}\n\t\t}\n\n\t\t// an ID match\n\t\tsource = getEventSourceById(matchInput);\n\t\tif (source) {\n\t\t\treturn [ source ];\n\t\t}\n\n\t\treturn $.grep(sources, function(source) {\n\t\t\treturn isSourcesEquivalent(matchInput, source);\n\t\t});\n\t}\n\n\n\tfunction isSourcesEquivalent(source1, source2) {\n\t\treturn source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);\n\t}\n\n\n\tfunction getSourcePrimitive(source) {\n\t\treturn (\n\t\t\t(typeof source === 'object') ? // a normalized event source?\n\t\t\t\t(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive\n\t\t\t\tnull\n\t\t) ||\n\t\tsource; // the given argument *is* the primitive\n\t}\n\n\n\t// util\n\t// returns a filtered array without events that are part of any of the given sources\n\tfunction excludeEventsBySources(specificEvents, specificSources) {\n\t\treturn $.grep(specificEvents, function(event) {\n\t\t\tfor (var i = 0; i < specificSources.length; i++) {\n\t\t\t\tif (event.source === specificSources[i]) {\n\t\t\t\t\treturn false; // exclude\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true; // keep\n\t\t});\n\t}\n\n\n\n\t/* Manipulation\n\t-----------------------------------------------------------------------------*/\n\n\n\t// Only ever called from the externally-facing API\n\tfunction updateEvent(event) {\n\t\tupdateEvents([ event ]);\n\t}\n\n\n\t// Only ever called from the externally-facing API\n\tfunction updateEvents(events) {\n\t\tvar i, event;\n\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\tevent = events[i];\n\n\t\t\t// massage start/end values, even if date string values\n\t\t\tevent.start = t.moment(event.start);\n\t\t\tif (event.end) {\n\t\t\t\tevent.end = t.moment(event.end);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tevent.end = null;\n\t\t\t}\n\n\t\t\tmutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization\n\t\t}\n\n\t\treportEventChange(); // reports event modifications (so we can redraw)\n\t}\n\n\n\t// Returns a hash of misc event properties that should be copied over to related events.\n\tfunction getMiscEventProps(event) {\n\t\tvar props = {};\n\n\t\t$.each(event, function(name, val) {\n\t\t\tif (isMiscEventPropName(name)) {\n\t\t\t\tif (val !== undefined && isAtomic(val)) { // a defined non-object\n\t\t\t\t\tprops[name] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn props;\n\t}\n\n\t// non-date-related, non-id-related, non-secret\n\tfunction isMiscEventPropName(name) {\n\t\treturn !/^_|^(id|allDay|start|end)$/.test(name);\n\t}\n\n\n\t// returns the expanded events that were created\n\tfunction renderEvent(eventInput, stick) {\n\t\treturn renderEvents([ eventInput ], stick);\n\t}\n\n\n\t// returns the expanded events that were created\n\tfunction renderEvents(eventInputs, stick) {\n\t\tvar renderedEvents = [];\n\t\tvar renderableEvents;\n\t\tvar abstractEvent;\n\t\tvar i, j, event;\n\n\t\tfor (i = 0; i < eventInputs.length; i++) {\n\t\t\tabstractEvent = buildEventFromInput(eventInputs[i]);\n\n\t\t\tif (abstractEvent) { // not false (a valid input)\n\t\t\t\trenderableEvents = expandEvent(abstractEvent);\n\n\t\t\t\tfor (j = 0; j < renderableEvents.length; j++) {\n\t\t\t\t\tevent = renderableEvents[j];\n\n\t\t\t\t\tif (!event.source) {\n\t\t\t\t\t\tif (stick) {\n\t\t\t\t\t\t\tstickySource.events.push(event);\n\t\t\t\t\t\t\tevent.source = stickySource;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.push(event);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trenderedEvents = renderedEvents.concat(renderableEvents);\n\t\t\t}\n\t\t}\n\n\t\tif (renderedEvents.length) { // any new events rendered?\n\t\t\treportEventChange();\n\t\t}\n\n\t\treturn renderedEvents;\n\t}\n\n\n\tfunction removeEvents(filter) {\n\t\tvar eventID;\n\t\tvar i;\n\n\t\tif (filter == null) { // null or undefined. remove all events\n\t\t\tfilter = function() { return true; }; // will always match\n\t\t}\n\t\telse if (!$.isFunction(filter)) { // an event ID\n\t\t\teventID = filter + '';\n\t\t\tfilter = function(event) {\n\t\t\t\treturn event._id == eventID;\n\t\t\t};\n\t\t}\n\n\t\t// Purge event(s) from our local cache\n\t\tcache = $.grep(cache, filter, true); // inverse=true\n\n\t\t// Remove events from array sources.\n\t\t// This works because they have been converted to official Event Objects up front.\n\t\t// (and as a result, event._id has been calculated).\n\t\tfor (i=0; i<sources.length; i++) {\n\t\t\tif ($.isArray(sources[i].events)) {\n\t\t\t\tsources[i].events = $.grep(sources[i].events, filter, true);\n\t\t\t}\n\t\t}\n\n\t\treportEventChange();\n\t}\n\n\n\tfunction clientEvents(filter) {\n\t\tif ($.isFunction(filter)) {\n\t\t\treturn $.grep(cache, filter);\n\t\t}\n\t\telse if (filter != null) { // not null, not undefined. an event ID\n\t\t\tfilter += '';\n\t\t\treturn $.grep(cache, function(e) {\n\t\t\t\treturn e._id == filter;\n\t\t\t});\n\t\t}\n\t\treturn cache; // else, return all\n\t}\n\n\n\t// Makes sure all array event sources have their internal event objects\n\t// converted over to the Calendar's current timezone.\n\tt.rezoneArrayEventSources = function() {\n\t\tvar i;\n\t\tvar events;\n\t\tvar j;\n\n\t\tfor (i = 0; i < sources.length; i++) {\n\t\t\tevents = sources[i].events;\n\t\t\tif ($.isArray(events)) {\n\n\t\t\t\tfor (j = 0; j < events.length; j++) {\n\t\t\t\t\trezoneEventDates(events[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction rezoneEventDates(event) {\n\t\tevent.start = t.moment(event.start);\n\t\tif (event.end) {\n\t\t\tevent.end = t.moment(event.end);\n\t\t}\n\t\tbackupEventDates(event);\n\t}\n\n\n\t/* Event Normalization\n\t-----------------------------------------------------------------------------*/\n\n\n\t// Given a raw object with key/value properties, returns an \"abstract\" Event object.\n\t// An \"abstract\" event is an event that, if recurring, will not have been expanded yet.\n\t// Will return `false` when input is invalid.\n\t// `source` is optional\n\tfunction buildEventFromInput(input, source) {\n\t\tvar out = {};\n\t\tvar start, end;\n\t\tvar allDay;\n\n\t\tif (t.options.eventDataTransform) {\n\t\t\tinput = t.options.eventDataTransform(input);\n\t\t}\n\t\tif (source && source.eventDataTransform) {\n\t\t\tinput = source.eventDataTransform(input);\n\t\t}\n\n\t\t// Copy all properties over to the resulting object.\n\t\t// The special-case properties will be copied over afterwards.\n\t\t$.extend(out, input);\n\n\t\tif (source) {\n\t\t\tout.source = source;\n\t\t}\n\n\t\tout._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');\n\n\t\tif (input.className) {\n\t\t\tif (typeof input.className == 'string') {\n\t\t\t\tout.className = input.className.split(/\\s+/);\n\t\t\t}\n\t\t\telse { // assumed to be an array\n\t\t\t\tout.className = input.className;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tout.className = [];\n\t\t}\n\n\t\tstart = input.start || input.date; // \"date\" is an alias for \"start\"\n\t\tend = input.end;\n\n\t\t// parse as a time (Duration) if applicable\n\t\tif (isTimeString(start)) {\n\t\t\tstart = moment.duration(start);\n\t\t}\n\t\tif (isTimeString(end)) {\n\t\t\tend = moment.duration(end);\n\t\t}\n\n\t\tif (input.dow || moment.isDuration(start) || moment.isDuration(end)) {\n\n\t\t\t// the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet\n\t\t\tout.start = start ? moment.duration(start) : null; // will be a Duration or null\n\t\t\tout.end = end ? moment.duration(end) : null; // will be a Duration or null\n\t\t\tout._recurring = true; // our internal marker\n\t\t}\n\t\telse {\n\n\t\t\tif (start) {\n\t\t\t\tstart = t.moment(start);\n\t\t\t\tif (!start.isValid()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end) {\n\t\t\t\tend = t.moment(end);\n\t\t\t\tif (!end.isValid()) {\n\t\t\t\t\tend = null; // let defaults take over\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallDay = input.allDay;\n\t\t\tif (allDay === undefined) { // still undefined? fallback to default\n\t\t\t\tallDay = firstDefined(\n\t\t\t\t\tsource ? source.allDayDefault : undefined,\n\t\t\t\t\tt.options.allDayDefault\n\t\t\t\t);\n\t\t\t\t// still undefined? normalizeEventDates will calculate it\n\t\t\t}\n\n\t\t\tassignDatesToEvent(start, end, allDay, out);\n\t\t}\n\n\t\tt.normalizeEvent(out); // hook for external use. a prototype method\n\n\t\treturn out;\n\t}\n\tt.buildEventFromInput = buildEventFromInput;\n\n\n\t// Normalizes and assigns the given dates to the given partially-formed event object.\n\t// NOTE: mutates the given start/end moments. does not make a copy.\n\tfunction assignDatesToEvent(start, end, allDay, event) {\n\t\tevent.start = start;\n\t\tevent.end = end;\n\t\tevent.allDay = allDay;\n\t\tnormalizeEventDates(event);\n\t\tbackupEventDates(event);\n\t}\n\n\n\t// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.\n\t// NOTE: Will modify the given object.\n\tfunction normalizeEventDates(eventProps) {\n\n\t\tnormalizeEventTimes(eventProps);\n\n\t\tif (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {\n\t\t\teventProps.end = null;\n\t\t}\n\n\t\tif (!eventProps.end) {\n\t\t\tif (t.options.forceEventDuration) {\n\t\t\t\teventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);\n\t\t\t}\n\t\t\telse {\n\t\t\t\teventProps.end = null;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Ensures the allDay property exists and the timeliness of the start/end dates are consistent\n\tfunction normalizeEventTimes(eventProps) {\n\t\tif (eventProps.allDay == null) {\n\t\t\teventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));\n\t\t}\n\n\t\tif (eventProps.allDay) {\n\t\t\teventProps.start.stripTime();\n\t\t\tif (eventProps.end) {\n\t\t\t\t// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment\n\t\t\t\teventProps.end.stripTime();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!eventProps.start.hasTime()) {\n\t\t\t\teventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time\n\t\t\t}\n\t\t\tif (eventProps.end && !eventProps.end.hasTime()) {\n\t\t\t\teventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If the given event is a recurring event, break it down into an array of individual instances.\n\t// If not a recurring event, return an array with the single original event.\n\t// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.\n\t// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).\n\tfunction expandEvent(abstractEvent, _rangeStart, _rangeEnd) {\n\t\tvar events = [];\n\t\tvar dowHash;\n\t\tvar dow;\n\t\tvar i;\n\t\tvar date;\n\t\tvar startTime, endTime;\n\t\tvar start, end;\n\t\tvar event;\n\n\t\t_rangeStart = _rangeStart || rangeStart;\n\t\t_rangeEnd = _rangeEnd || rangeEnd;\n\n\t\tif (abstractEvent) {\n\t\t\tif (abstractEvent._recurring) {\n\n\t\t\t\t// make a boolean hash as to whether the event occurs on each day-of-week\n\t\t\t\tif ((dow = abstractEvent.dow)) {\n\t\t\t\t\tdowHash = {};\n\t\t\t\t\tfor (i = 0; i < dow.length; i++) {\n\t\t\t\t\t\tdowHash[dow[i]] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// iterate through every day in the current range\n\t\t\t\tdate = _rangeStart.clone().stripTime(); // holds the date of the current day\n\t\t\t\twhile (date.isBefore(_rangeEnd)) {\n\n\t\t\t\t\tif (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week\n\n\t\t\t\t\t\tstartTime = abstractEvent.start; // the stored start and end properties are times (Durations)\n\t\t\t\t\t\tendTime = abstractEvent.end; // \"\n\t\t\t\t\t\tstart = date.clone();\n\t\t\t\t\t\tend = null;\n\n\t\t\t\t\t\tif (startTime) {\n\t\t\t\t\t\t\tstart = start.time(startTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (endTime) {\n\t\t\t\t\t\t\tend = date.clone().time(endTime);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tevent = $.extend({}, abstractEvent); // make a copy of the original\n\t\t\t\t\t\tassignDatesToEvent(\n\t\t\t\t\t\t\tstart, end,\n\t\t\t\t\t\t\t!startTime && !endTime, // allDay?\n\t\t\t\t\t\t\tevent\n\t\t\t\t\t\t);\n\t\t\t\t\t\tevents.push(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tdate.add(1, 'days');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tevents.push(abstractEvent); // return the original event. will be a one-item array\n\t\t\t}\n\t\t}\n\n\t\treturn events;\n\t}\n\tt.expandEvent = expandEvent;\n\n\n\n\t/* Event Modification Math\n\t-----------------------------------------------------------------------------------------*/\n\n\n\t// Modifies an event and all related events by applying the given properties.\n\t// Special date-diffing logic is used for manipulation of dates.\n\t// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.\n\t// All date comparisons are done against the event's pristine _start and _end dates.\n\t// Returns an object with delta information and a function to undo all operations.\n\t// For making computations in a granularity greater than day/time, specify largeUnit.\n\t// NOTE: The given `newProps` might be mutated for normalization purposes.\n\tfunction mutateEvent(event, newProps, largeUnit) {\n\t\tvar miscProps = {};\n\t\tvar oldProps;\n\t\tvar clearEnd;\n\t\tvar startDelta;\n\t\tvar endDelta;\n\t\tvar durationDelta;\n\t\tvar undoFunc;\n\n\t\t// diffs the dates in the appropriate way, returning a duration\n\t\tfunction diffDates(date1, date0) { // date1 - date0\n\t\t\tif (largeUnit) {\n\t\t\t\treturn diffByUnit(date1, date0, largeUnit);\n\t\t\t}\n\t\t\telse if (newProps.allDay) {\n\t\t\t\treturn diffDay(date1, date0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn diffDayTime(date1, date0);\n\t\t\t}\n\t\t}\n\n\t\tnewProps = newProps || {};\n\n\t\t// normalize new date-related properties\n\t\tif (!newProps.start) {\n\t\t\tnewProps.start = event.start.clone();\n\t\t}\n\t\tif (newProps.end === undefined) {\n\t\t\tnewProps.end = event.end ? event.end.clone() : null;\n\t\t}\n\t\tif (newProps.allDay == null) { // is null or undefined?\n\t\t\tnewProps.allDay = event.allDay;\n\t\t}\n\t\tnormalizeEventDates(newProps);\n\n\t\t// create normalized versions of the original props to compare against\n\t\t// need a real end value, for diffing\n\t\toldProps = {\n\t\t\tstart: event._start.clone(),\n\t\t\tend: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),\n\t\t\tallDay: newProps.allDay // normalize the dates in the same regard as the new properties\n\t\t};\n\t\tnormalizeEventDates(oldProps);\n\n\t\t// need to clear the end date if explicitly changed to null\n\t\tclearEnd = event._end !== null && newProps.end === null;\n\n\t\t// compute the delta for moving the start date\n\t\tstartDelta = diffDates(newProps.start, oldProps.start);\n\n\t\t// compute the delta for moving the end date\n\t\tif (newProps.end) {\n\t\t\tendDelta = diffDates(newProps.end, oldProps.end);\n\t\t\tdurationDelta = endDelta.subtract(startDelta);\n\t\t}\n\t\telse {\n\t\t\tdurationDelta = null;\n\t\t}\n\n\t\t// gather all non-date-related properties\n\t\t$.each(newProps, function(name, val) {\n\t\t\tif (isMiscEventPropName(name)) {\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\tmiscProps[name] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// apply the operations to the event and all related events\n\t\tundoFunc = mutateEvents(\n\t\t\tclientEvents(event._id), // get events with this ID\n\t\t\tclearEnd,\n\t\t\tnewProps.allDay,\n\t\t\tstartDelta,\n\t\t\tdurationDelta,\n\t\t\tmiscProps\n\t\t);\n\n\t\treturn {\n\t\t\tdateDelta: startDelta,\n\t\t\tdurationDelta: durationDelta,\n\t\t\tundo: undoFunc\n\t\t};\n\t}\n\n\n\t// Modifies an array of events in the following ways (operations are in order):\n\t// - clear the event's `end`\n\t// - convert the event to allDay\n\t// - add `dateDelta` to the start and end\n\t// - add `durationDelta` to the event's duration\n\t// - assign `miscProps` to the event\n\t//\n\t// Returns a function that can be called to undo all the operations.\n\t//\n\t// TODO: don't use so many closures. possible memory issues when lots of events with same ID.\n\t//\n\tfunction mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {\n\t\tvar isAmbigTimezone = t.getIsAmbigTimezone();\n\t\tvar undoFunctions = [];\n\n\t\t// normalize zero-length deltas to be null\n\t\tif (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }\n\t\tif (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }\n\n\t\t$.each(events, function(i, event) {\n\t\t\tvar oldProps;\n\t\t\tvar newProps;\n\n\t\t\t// build an object holding all the old values, both date-related and misc.\n\t\t\t// for the undo function.\n\t\t\toldProps = {\n\t\t\t\tstart: event.start.clone(),\n\t\t\t\tend: event.end ? event.end.clone() : null,\n\t\t\t\tallDay: event.allDay\n\t\t\t};\n\t\t\t$.each(miscProps, function(name) {\n\t\t\t\toldProps[name] = event[name];\n\t\t\t});\n\n\t\t\t// new date-related properties. work off the original date snapshot.\n\t\t\t// ok to use references because they will be thrown away when backupEventDates is called.\n\t\t\tnewProps = {\n\t\t\t\tstart: event._start,\n\t\t\t\tend: event._end,\n\t\t\t\tallDay: allDay // normalize the dates in the same regard as the new properties\n\t\t\t};\n\t\t\tnormalizeEventDates(newProps); // massages start/end/allDay\n\n\t\t\t// strip or ensure the end date\n\t\t\tif (clearEnd) {\n\t\t\t\tnewProps.end = null;\n\t\t\t}\n\t\t\telse if (durationDelta && !newProps.end) { // the duration translation requires an end date\n\t\t\t\tnewProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);\n\t\t\t}\n\n\t\t\tif (dateDelta) {\n\t\t\t\tnewProps.start.add(dateDelta);\n\t\t\t\tif (newProps.end) {\n\t\t\t\t\tnewProps.end.add(dateDelta);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (durationDelta) {\n\t\t\t\tnewProps.end.add(durationDelta); // end already ensured above\n\t\t\t}\n\n\t\t\t// if the dates have changed, and we know it is impossible to recompute the\n\t\t\t// timezone offsets, strip the zone.\n\t\t\tif (\n\t\t\t\tisAmbigTimezone &&\n\t\t\t\t!newProps.allDay &&\n\t\t\t\t(dateDelta || durationDelta)\n\t\t\t) {\n\t\t\t\tnewProps.start.stripZone();\n\t\t\t\tif (newProps.end) {\n\t\t\t\t\tnewProps.end.stripZone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.extend(event, miscProps, newProps); // copy over misc props, then date-related props\n\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay\n\n\t\t\tundoFunctions.push(function() {\n\t\t\t\t$.extend(event, oldProps);\n\t\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay\n\t\t\t});\n\t\t});\n\n\t\treturn function() {\n\t\t\tfor (var i = 0; i < undoFunctions.length; i++) {\n\t\t\t\tundoFunctions[i]();\n\t\t\t}\n\t\t};\n\t}\n\n}\n\n\n// hook for external libs to manipulate event properties upon creation.\n// should manipulate the event in-place.\nCalendar.prototype.normalizeEvent = function(event) {\n};\n\n\n// Does the given span (start, end, and other location information)\n// fully contain the other?\nCalendar.prototype.spanContainsSpan = function(outerSpan, innerSpan) {\n\tvar eventStart = outerSpan.start.clone().stripZone();\n\tvar eventEnd = this.getEventEnd(outerSpan).stripZone();\n\n\treturn innerSpan.start >= eventStart && innerSpan.end <= eventEnd;\n};\n\n\n// Returns a list of events that the given event should be compared against when being considered for a move to\n// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.\nCalendar.prototype.getPeerEvents = function(span, event) {\n\tvar cache = this.getEventCache();\n\tvar peerEvents = [];\n\tvar i, otherEvent;\n\n\tfor (i = 0; i < cache.length; i++) {\n\t\totherEvent = cache[i];\n\t\tif (\n\t\t\t!event ||\n\t\t\tevent._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events\n\t\t) {\n\t\t\tpeerEvents.push(otherEvent);\n\t\t}\n\t}\n\n\treturn peerEvents;\n};\n\n\n// updates the \"backup\" properties, which are preserved in order to compute diffs later on.\nfunction backupEventDates(event) {\n\tevent._allDay = event.allDay;\n\tevent._start = event.start.clone();\n\tevent._end = event.end ? event.end.clone() : null;\n}\n\n\n/* Overlapping / Constraining\n-----------------------------------------------------------------------------------------*/\n\n\n// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)\nCalendar.prototype.isEventSpanAllowed = function(span, event) {\n\tvar source = event.source || {};\n\n\tvar constraint = firstDefined(\n\t\tevent.constraint,\n\t\tsource.constraint,\n\t\tthis.options.eventConstraint\n\t);\n\n\tvar overlap = firstDefined(\n\t\tevent.overlap,\n\t\tsource.overlap,\n\t\tthis.options.eventOverlap\n\t);\n\n\treturn this.isSpanAllowed(span, constraint, overlap, event) &&\n\t\t(!this.options.eventAllow || this.options.eventAllow(span, event) !== false);\n};\n\n\n// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)\nCalendar.prototype.isExternalSpanAllowed = function(eventSpan, eventLocation, eventProps) {\n\tvar eventInput;\n\tvar event;\n\n\t// note: very similar logic is in View's reportExternalDrop\n\tif (eventProps) {\n\t\teventInput = $.extend({}, eventProps, eventLocation);\n\t\tevent = this.expandEvent(\n\t\t\tthis.buildEventFromInput(eventInput)\n\t\t)[0];\n\t}\n\n\tif (event) {\n\t\treturn this.isEventSpanAllowed(eventSpan, event);\n\t}\n\telse { // treat it as a selection\n\n\t\treturn this.isSelectionSpanAllowed(eventSpan);\n\t}\n};\n\n\n// Determines the given span (unzoned start/end with other misc data) can be selected.\nCalendar.prototype.isSelectionSpanAllowed = function(span) {\n\treturn this.isSpanAllowed(span, this.options.selectConstraint, this.options.selectOverlap) &&\n\t\t(!this.options.selectAllow || this.options.selectAllow(span) !== false);\n};\n\n\n// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist\n// according to the constraint/overlap settings.\n// `event` is not required if checking a selection.\nCalendar.prototype.isSpanAllowed = function(span, constraint, overlap, event) {\n\tvar constraintEvents;\n\tvar anyContainment;\n\tvar peerEvents;\n\tvar i, peerEvent;\n\tvar peerOverlap;\n\n\t// the range must be fully contained by at least one of produced constraint events\n\tif (constraint != null) {\n\n\t\t// not treated as an event! intermediate data structure\n\t\t// TODO: use ranges in the future\n\t\tconstraintEvents = this.constraintToEvents(constraint);\n\t\tif (constraintEvents) { // not invalid\n\n\t\t\tanyContainment = false;\n\t\t\tfor (i = 0; i < constraintEvents.length; i++) {\n\t\t\t\tif (this.spanContainsSpan(constraintEvents[i], span)) {\n\t\t\t\t\tanyContainment = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!anyContainment) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpeerEvents = this.getPeerEvents(span, event);\n\n\tfor (i = 0; i < peerEvents.length; i++)  {\n\t\tpeerEvent = peerEvents[i];\n\n\t\t// there needs to be an actual intersection before disallowing anything\n\t\tif (this.eventIntersectsRange(peerEvent, span)) {\n\n\t\t\t// evaluate overlap for the given range and short-circuit if necessary\n\t\t\tif (overlap === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// if the event's overlap is a test function, pass the peer event in question as the first param\n\t\t\telse if (typeof overlap === 'function' && !overlap(peerEvent, event)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// if we are computing if the given range is allowable for an event, consider the other event's\n\t\t\t// EventObject-specific or Source-specific `overlap` property\n\t\t\tif (event) {\n\t\t\t\tpeerOverlap = firstDefined(\n\t\t\t\t\tpeerEvent.overlap,\n\t\t\t\t\t(peerEvent.source || {}).overlap\n\t\t\t\t\t// we already considered the global `eventOverlap`\n\t\t\t\t);\n\t\t\t\tif (peerOverlap === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// if the peer event's overlap is a test function, pass the subject event as the first param\n\t\t\t\tif (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n\n\n// Given an event input from the API, produces an array of event objects. Possible event inputs:\n// 'businessHours'\n// An event ID (number or string)\n// An object with specific start/end dates or a recurring event (like what businessHours accepts)\nCalendar.prototype.constraintToEvents = function(constraintInput) {\n\n\tif (constraintInput === 'businessHours') {\n\t\treturn this.getCurrentBusinessHourEvents();\n\t}\n\n\tif (typeof constraintInput === 'object') {\n\t\tif (constraintInput.start != null) { // needs to be event-like input\n\t\t\treturn this.expandEvent(this.buildEventFromInput(constraintInput));\n\t\t}\n\t\telse {\n\t\t\treturn null; // invalid\n\t\t}\n\t}\n\n\treturn this.clientEvents(constraintInput); // probably an ID\n};\n\n\n// Does the event's date range intersect with the given range?\n// start/end already assumed to have stripped zones :(\nCalendar.prototype.eventIntersectsRange = function(event, range) {\n\tvar eventStart = event.start.clone().stripZone();\n\tvar eventEnd = this.getEventEnd(event).stripZone();\n\n\treturn range.start < eventEnd && range.end > eventStart;\n};\n\n\n/* Business Hours\n-----------------------------------------------------------------------------------------*/\n\nvar BUSINESS_HOUR_EVENT_DEFAULTS = {\n\tid: '_fcBusinessHours', // will relate events from different calls to expandEvent\n\tstart: '09:00',\n\tend: '17:00',\n\tdow: [ 1, 2, 3, 4, 5 ], // monday - friday\n\trendering: 'inverse-background'\n\t// classNames are defined in businessHoursSegClasses\n};\n\n// Return events objects for business hours within the current view.\n// Abuse of our event system :(\nCalendar.prototype.getCurrentBusinessHourEvents = function(wholeDay) {\n\treturn this.computeBusinessHourEvents(wholeDay, this.options.businessHours);\n};\n\n// Given a raw input value from options, return events objects for business hours within the current view.\nCalendar.prototype.computeBusinessHourEvents = function(wholeDay, input) {\n\tif (input === true) {\n\t\treturn this.expandBusinessHourEvents(wholeDay, [ {} ]);\n\t}\n\telse if ($.isPlainObject(input)) {\n\t\treturn this.expandBusinessHourEvents(wholeDay, [ input ]);\n\t}\n\telse if ($.isArray(input)) {\n\t\treturn this.expandBusinessHourEvents(wholeDay, input, true);\n\t}\n\telse {\n\t\treturn [];\n\t}\n};\n\n// inputs expected to be an array of objects.\n// if ignoreNoDow is true, will ignore entries that don't specify a day-of-week (dow) key.\nCalendar.prototype.expandBusinessHourEvents = function(wholeDay, inputs, ignoreNoDow) {\n\tvar view = this.getView();\n\tvar events = [];\n\tvar i, input;\n\n\tfor (i = 0; i < inputs.length; i++) {\n\t\tinput = inputs[i];\n\n\t\tif (ignoreNoDow && !input.dow) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// give defaults. will make a copy\n\t\tinput = $.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, input);\n\n\t\t// if a whole-day series is requested, clear the start/end times\n\t\tif (wholeDay) {\n\t\t\tinput.start = null;\n\t\t\tinput.end = null;\n\t\t}\n\n\t\tevents.push.apply(events, // append\n\t\t\tthis.expandEvent(\n\t\t\t\tthis.buildEventFromInput(input),\n\t\t\t\tview.start,\n\t\t\t\tview.end\n\t\t\t)\n\t\t);\n\t}\n\n\treturn events;\n};\n\n;;\n\n/* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nvar BasicView = FC.BasicView = View.extend({\n\n\tscroller: null,\n\n\tdayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)\n\tdayGrid: null, // the main subcomponent that does most of the heavy lifting\n\n\tdayNumbersVisible: false, // display day numbers on each day cell?\n\tcolWeekNumbersVisible: false, // display week numbers along the side?\n\tcellWeekNumbersVisible: false, // display week numbers in day cell?\n\n\tweekNumberWidth: null, // width of all the week-number cells running down the side\n\n\theadContainerEl: null, // div that hold's the dayGrid's rendered date header\n\theadRowEl: null, // the fake row element of the day-of-week header\n\n\n\tinitialize: function() {\n\t\tthis.dayGrid = this.instantiateDayGrid();\n\n\t\tthis.scroller = new Scroller({\n\t\t\toverflowX: 'hidden',\n\t\t\toverflowY: 'auto'\n\t\t});\n\t},\n\n\n\t// Generates the DayGrid object this view needs. Draws from this.dayGridClass\n\tinstantiateDayGrid: function() {\n\t\t// generate a subclass on the fly with BasicView-specific behavior\n\t\t// TODO: cache this subclass\n\t\tvar subclass = this.dayGridClass.extend(basicDayGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t// Sets the display range and computes all necessary dates\n\tsetRange: function(range) {\n\t\tView.prototype.setRange.call(this, range); // call the super-method\n\n\t\tthis.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange\n\t\tthis.dayGrid.setRange(range);\n\t},\n\n\n\t// Compute the value to feed into setRange. Overrides superclass.\n\tcomputeRange: function(date) {\n\t\tvar range = View.prototype.computeRange.call(this, date); // get value from the super-method\n\n\t\t// year and month views should be aligned with weeks. this is already done for week\n\t\tif (/year|month/.test(range.intervalUnit)) {\n\t\t\trange.start.startOf('week');\n\t\t\trange.start = this.skipHiddenDays(range.start);\n\n\t\t\t// make end-of-week if not already\n\t\t\tif (range.end.weekday()) {\n\t\t\t\trange.end.add(1, 'week').startOf('week');\n\t\t\t\trange.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards\n\t\t\t}\n\t\t}\n\n\t\treturn range;\n\t},\n\n\n\t// Renders the view into `this.el`, which should already be assigned\n\trenderDates: function() {\n\n\t\tthis.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible\n\t\tif (this.opt('weekNumbers')) {\n\t\t\tif (this.opt('weekNumbersWithinDays')) {\n\t\t\t\tthis.cellWeekNumbersVisible = true;\n\t\t\t\tthis.colWeekNumbersVisible = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.cellWeekNumbersVisible = false;\n\t\t\t\tthis.colWeekNumbersVisible = true;\n\t\t\t};\n\t\t}\n\t\tthis.dayGrid.numbersVisible = this.dayNumbersVisible ||\n\t\t\tthis.cellWeekNumbersVisible || this.colWeekNumbersVisible;\n\n\t\tthis.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());\n\t\tthis.renderHead();\n\n\t\tthis.scroller.render();\n\t\tvar dayGridContainerEl = this.scroller.el.addClass('fc-day-grid-container');\n\t\tvar dayGridEl = $('<div class=\"fc-day-grid\" />').appendTo(dayGridContainerEl);\n\t\tthis.el.find('.fc-body > tr > td').append(dayGridContainerEl);\n\n\t\tthis.dayGrid.setElement(dayGridEl);\n\t\tthis.dayGrid.renderDates(this.hasRigidRows());\n\t},\n\n\n\t// render the day-of-week headers\n\trenderHead: function() {\n\t\tthis.headContainerEl =\n\t\t\tthis.el.find('.fc-head-container')\n\t\t\t\t.html(this.dayGrid.renderHeadHtml());\n\t\tthis.headRowEl = this.headContainerEl.find('.fc-row');\n\t},\n\n\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n\t// always completely kill the dayGrid's rendering.\n\tunrenderDates: function() {\n\t\tthis.dayGrid.unrenderDates();\n\t\tthis.dayGrid.removeElement();\n\t\tthis.scroller.destroy();\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tthis.dayGrid.renderBusinessHours();\n\t},\n\n\n\tunrenderBusinessHours: function() {\n\t\tthis.dayGrid.unrenderBusinessHours();\n\t},\n\n\n\t// Builds the HTML skeleton for the view.\n\t// The day-grid component will render inside of a container defined by this HTML.\n\trenderSkeletonHtml: function() {\n\t\treturn '' +\n\t\t\t'<table>' +\n\t\t\t\t'<thead class=\"fc-head\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</thead>' +\n\t\t\t\t'<tbody class=\"fc-body\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\"></td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</tbody>' +\n\t\t\t'</table>';\n\t},\n\n\n\t// Generates an HTML attribute string for setting the width of the week number column, if it is known\n\tweekNumberStyleAttr: function() {\n\t\tif (this.weekNumberWidth !== null) {\n\t\t\treturn 'style=\"width:' + this.weekNumberWidth + 'px\"';\n\t\t}\n\t\treturn '';\n\t},\n\n\n\t// Determines whether each row should have a constant height\n\thasRigidRows: function() {\n\t\tvar eventLimit = this.opt('eventLimit');\n\t\treturn eventLimit && typeof eventLimit !== 'number';\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Refreshes the horizontal dimensions of the view\n\tupdateWidth: function() {\n\t\tif (this.colWeekNumbersVisible) {\n\t\t\t// Make sure all week number cells running down the side have the same width.\n\t\t\t// Record the width for cells created later.\n\t\t\tthis.weekNumberWidth = matchCellWidths(\n\t\t\t\tthis.el.find('.fc-week-number')\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// Adjusts the vertical dimensions of the view to the specified values\n\tsetHeight: function(totalHeight, isAuto) {\n\t\tvar eventLimit = this.opt('eventLimit');\n\t\tvar scrollerHeight;\n\t\tvar scrollbarWidths;\n\n\t\t// reset all heights to be natural\n\t\tthis.scroller.clear();\n\t\tuncompensateScroll(this.headRowEl);\n\n\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n\t\t// is the event limit a constant level number?\n\t\tif (eventLimit && typeof eventLimit === 'number') {\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n\t\t}\n\n\t\t// distribute the height to the rows\n\t\t// (totalHeight is a \"recommended\" value if isAuto)\n\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\tthis.setGridHeight(scrollerHeight, isAuto);\n\n\t\t// is the event limit dynamically calculated?\n\t\tif (eventLimit && typeof eventLimit !== 'number') {\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n\t\t}\n\n\t\tif (!isAuto) { // should we force dimensions of the scroll container?\n\n\t\t\tthis.scroller.setHeight(scrollerHeight);\n\t\t\tscrollbarWidths = this.scroller.getScrollbarWidths();\n\n\t\t\tif (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n\n\t\t\t\tcompensateScroll(this.headRowEl, scrollbarWidths);\n\n\t\t\t\t// doing the scrollbar compensation might have created text overflow which created more height. redo\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\t\tthis.scroller.setHeight(scrollerHeight);\n\t\t\t}\n\n\t\t\t// guarantees the same scrollbar widths\n\t\t\tthis.scroller.lockOverflow(scrollbarWidths);\n\t\t}\n\t},\n\n\n\t// given a desired total height of the view, returns what the height of the scroller should be\n\tcomputeScrollerHeight: function(totalHeight) {\n\t\treturn totalHeight -\n\t\t\tsubtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n\t},\n\n\n\t// Sets the height of just the DayGrid component in this view\n\tsetGridHeight: function(height, isAuto) {\n\t\tif (isAuto) {\n\t\t\tundistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n\t\t}\n\t\telse {\n\t\t\tdistributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n\t\t}\n\t},\n\n\n\t/* Scroll\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tcomputeInitialScroll: function() {\n\t\treturn { top: 0 };\n\t},\n\n\n\tqueryScroll: function() {\n\t\treturn { top: this.scroller.getScrollTop() };\n\t},\n\n\n\tsetScroll: function(scroll) {\n\t\tthis.scroller.setScrollTop(scroll.top);\n\t},\n\n\n\t/* Hit Areas\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// forward all hit-related method calls to dayGrid\n\n\n\tprepareHits: function() {\n\t\tthis.dayGrid.prepareHits();\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.dayGrid.releaseHits();\n\t},\n\n\n\tqueryHit: function(left, top) {\n\t\treturn this.dayGrid.queryHit(left, top);\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\treturn this.dayGrid.getHitSpan(hit);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.dayGrid.getHitEl(hit);\n\t},\n\n\n\t/* Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders the given events onto the view and populates the segments array\n\trenderEvents: function(events) {\n\t\tthis.dayGrid.renderEvents(events);\n\n\t\tthis.updateHeight(); // must compensate for events that overflow the row\n\t},\n\n\n\t// Retrieves all segment objects that are rendered in the view\n\tgetEventSegs: function() {\n\t\treturn this.dayGrid.getEventSegs();\n\t},\n\n\n\t// Unrenders all event elements and clears internal segment data\n\tunrenderEvents: function() {\n\t\tthis.dayGrid.unrenderEvents();\n\n\t\t// we DON'T need to call updateHeight() because\n\t\t// a renderEvents() call always happens after this, which will eventually call updateHeight()\n\t},\n\n\n\t/* Dragging (for both events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(dropLocation, seg) {\n\t\treturn this.dayGrid.renderDrag(dropLocation, seg);\n\t},\n\n\n\tunrenderDrag: function() {\n\t\tthis.dayGrid.unrenderDrag();\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection\n\trenderSelection: function(span) {\n\t\tthis.dayGrid.renderSelection(span);\n\t},\n\n\n\t// Unrenders a visual indications of a selection\n\tunrenderSelection: function() {\n\t\tthis.dayGrid.unrenderSelection();\n\t}\n\n});\n\n\n// Methods that will customize the rendering behavior of the BasicView's dayGrid\nvar basicDayGridMethods = {\n\n\n\t// Generates the HTML that will go before the day-of week header cells\n\trenderHeadIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.colWeekNumbersVisible) {\n\t\t\treturn '' +\n\t\t\t\t'<th class=\"fc-week-number ' + view.widgetHeaderClass + '\" ' + view.weekNumberStyleAttr() + '>' +\n\t\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\t\thtmlEscape(view.opt('weekNumberTitle')) +\n\t\t\t\t\t'</span>' +\n\t\t\t\t'</th>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n\trenderNumberIntroHtml: function(row) {\n\t\tvar view = this.view;\n\t\tvar weekStart = this.getCellDate(row, 0);\n\n\t\tif (view.colWeekNumbersVisible) {\n\t\t\treturn '' +\n\t\t\t\t'<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '>' +\n\t\t\t\t\tview.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n\t\t\t\t\t\t{ date: weekStart, type: 'week', forceOff: this.colCnt === 1 },\n\t\t\t\t\t\tweekStart.format('w') // inner HTML\n\t\t\t\t\t) +\n\t\t\t\t'</td>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that goes before the day bg cells for each day-row\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.colWeekNumbersVisible) {\n\t\t\treturn '<td class=\"fc-week-number ' + view.widgetContentClass + '\" ' +\n\t\t\t\tview.weekNumberStyleAttr() + '></td>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that goes before every other type of row generated by DayGrid.\n\t// Affects helper-skeleton and highlight-skeleton rows.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.colWeekNumbersVisible) {\n\t\t\treturn '<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '></td>';\n\t\t}\n\n\t\treturn '';\n\t}\n\n};\n\n;;\n\n/* A month view with day cells running in rows (one-per-week) and columns\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar MonthView = FC.MonthView = BasicView.extend({\n\n\t// Produces information about what range to display\n\tcomputeRange: function(date) {\n\t\tvar range = BasicView.prototype.computeRange.call(this, date); // get value from super-method\n\t\tvar rowCnt;\n\n\t\t// ensure 6 weeks\n\t\tif (this.isFixedWeeks()) {\n\t\t\trowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays\n\t\t\trange.end.add(6 - rowCnt, 'weeks');\n\t\t}\n\n\t\treturn range;\n\t},\n\n\n\t// Overrides the default BasicView behavior to have special multi-week auto-height logic\n\tsetGridHeight: function(height, isAuto) {\n\n\t\t// if auto, make the height of each row the height that it would be if there were 6 weeks\n\t\tif (isAuto) {\n\t\t\theight *= this.rowCnt / 6;\n\t\t}\n\n\t\tdistributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n\t},\n\n\n\tisFixedWeeks: function() {\n\t\treturn this.opt('fixedWeekCount');\n\t}\n\n});\n\n;;\n\nfcViews.basic = {\n\t'class': BasicView\n};\n\nfcViews.basicDay = {\n\ttype: 'basic',\n\tduration: { days: 1 }\n};\n\nfcViews.basicWeek = {\n\ttype: 'basic',\n\tduration: { weeks: 1 }\n};\n\nfcViews.month = {\n\t'class': MonthView,\n\tduration: { months: 1 }, // important for prev/next\n\tdefaults: {\n\t\tfixedWeekCount: true\n\t}\n};\n;;\n\n/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\nvar AgendaView = FC.AgendaView = View.extend({\n\n\tscroller: null,\n\n\ttimeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override\n\ttimeGrid: null, // the main time-grid subcomponent of this view\n\n\tdayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override\n\tdayGrid: null, // the \"all-day\" subcomponent. if all-day is turned off, this will be null\n\n\taxisWidth: null, // the width of the time axis running down the side\n\n\theadContainerEl: null, // div that hold's the timeGrid's rendered date header\n\tnoScrollRowEls: null, // set of fake row elements that must compensate when scroller has scrollbars\n\n\t// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath\n\tbottomRuleEl: null,\n\n\n\tinitialize: function() {\n\t\tthis.timeGrid = this.instantiateTimeGrid();\n\n\t\tif (this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n\t\t\tthis.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view\n\t\t}\n\n\t\tthis.scroller = new Scroller({\n\t\t\toverflowX: 'hidden',\n\t\t\toverflowY: 'auto'\n\t\t});\n\t},\n\n\n\t// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass\n\tinstantiateTimeGrid: function() {\n\t\tvar subclass = this.timeGridClass.extend(agendaTimeGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass\n\tinstantiateDayGrid: function() {\n\t\tvar subclass = this.dayGridClass.extend(agendaDayGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t/* Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the display range and computes all necessary dates\n\tsetRange: function(range) {\n\t\tView.prototype.setRange.call(this, range); // call the super-method\n\n\t\tthis.timeGrid.setRange(range);\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.setRange(range);\n\t\t}\n\t},\n\n\n\t// Renders the view into `this.el`, which has already been assigned\n\trenderDates: function() {\n\n\t\tthis.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());\n\t\tthis.renderHead();\n\n\t\tthis.scroller.render();\n\t\tvar timeGridWrapEl = this.scroller.el.addClass('fc-time-grid-container');\n\t\tvar timeGridEl = $('<div class=\"fc-time-grid\" />').appendTo(timeGridWrapEl);\n\t\tthis.el.find('.fc-body > tr > td').append(timeGridWrapEl);\n\n\t\tthis.timeGrid.setElement(timeGridEl);\n\t\tthis.timeGrid.renderDates();\n\n\t\t// the <hr> that sometimes displays under the time-grid\n\t\tthis.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>')\n\t\t\t.appendTo(this.timeGrid.el); // inject it into the time-grid\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));\n\t\t\tthis.dayGrid.renderDates();\n\n\t\t\t// have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\t\t\tthis.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();\n\t\t}\n\n\t\tthis.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller\n\t},\n\n\n\t// render the day-of-week headers\n\trenderHead: function() {\n\t\tthis.headContainerEl =\n\t\t\tthis.el.find('.fc-head-container')\n\t\t\t\t.html(this.timeGrid.renderHeadHtml());\n\t},\n\n\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n\t// always completely kill each grid's rendering.\n\tunrenderDates: function() {\n\t\tthis.timeGrid.unrenderDates();\n\t\tthis.timeGrid.removeElement();\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderDates();\n\t\t\tthis.dayGrid.removeElement();\n\t\t}\n\n\t\tthis.scroller.destroy();\n\t},\n\n\n\t// Builds the HTML skeleton for the view.\n\t// The day-grid and time-grid components will render inside containers defined by this HTML.\n\trenderSkeletonHtml: function() {\n\t\treturn '' +\n\t\t\t'<table>' +\n\t\t\t\t'<thead class=\"fc-head\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</thead>' +\n\t\t\t\t'<tbody class=\"fc-body\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +\n\t\t\t\t\t\t\t(this.dayGrid ?\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +\n\t\t\t\t\t\t\t\t'<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t'</td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</tbody>' +\n\t\t\t'</table>';\n\t},\n\n\n\t// Generates an HTML attribute string for setting the width of the axis, if it is known\n\taxisStyleAttr: function() {\n\t\tif (this.axisWidth !== null) {\n\t\t\t return 'style=\"width:' + this.axisWidth + 'px\"';\n\t\t}\n\t\treturn '';\n\t},\n\n\n\t/* Business Hours\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBusinessHours: function() {\n\t\tthis.timeGrid.renderBusinessHours();\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.renderBusinessHours();\n\t\t}\n\t},\n\n\n\tunrenderBusinessHours: function() {\n\t\tthis.timeGrid.unrenderBusinessHours();\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderBusinessHours();\n\t\t}\n\t},\n\n\n\t/* Now Indicator\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tgetNowIndicatorUnit: function() {\n\t\treturn this.timeGrid.getNowIndicatorUnit();\n\t},\n\n\n\trenderNowIndicator: function(date) {\n\t\tthis.timeGrid.renderNowIndicator(date);\n\t},\n\n\n\tunrenderNowIndicator: function() {\n\t\tthis.timeGrid.unrenderNowIndicator();\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tupdateSize: function(isResize) {\n\t\tthis.timeGrid.updateSize(isResize);\n\n\t\tView.prototype.updateSize.call(this, isResize); // call the super-method\n\t},\n\n\n\t// Refreshes the horizontal dimensions of the view\n\tupdateWidth: function() {\n\t\t// make all axis cells line up, and record the width so newly created axis cells will have it\n\t\tthis.axisWidth = matchCellWidths(this.el.find('.fc-axis'));\n\t},\n\n\n\t// Adjusts the vertical dimensions of the view to the specified values\n\tsetHeight: function(totalHeight, isAuto) {\n\t\tvar eventLimit;\n\t\tvar scrollerHeight;\n\t\tvar scrollbarWidths;\n\n\t\t// reset all dimensions back to the original state\n\t\tthis.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary\n\t\tthis.scroller.clear(); // sets height to 'auto' and clears overflow\n\t\tuncompensateScroll(this.noScrollRowEls);\n\n\t\t// limit number of events in the all-day area\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n\t\t\teventLimit = this.opt('eventLimit');\n\t\t\tif (eventLimit && typeof eventLimit !== 'number') {\n\t\t\t\teventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n\t\t\t}\n\t\t\tif (eventLimit) {\n\t\t\t\tthis.dayGrid.limitRows(eventLimit);\n\t\t\t}\n\t\t}\n\n\t\tif (!isAuto) { // should we force dimensions of the scroll container?\n\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\tthis.scroller.setHeight(scrollerHeight);\n\t\t\tscrollbarWidths = this.scroller.getScrollbarWidths();\n\n\t\t\tif (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n\n\t\t\t\t// make the all-day and header rows lines up\n\t\t\t\tcompensateScroll(this.noScrollRowEls, scrollbarWidths);\n\n\t\t\t\t// the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n\t\t\t\t// and reapply the desired height to the scroller.\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\t\tthis.scroller.setHeight(scrollerHeight);\n\t\t\t}\n\n\t\t\t// guarantees the same scrollbar widths\n\t\t\tthis.scroller.lockOverflow(scrollbarWidths);\n\n\t\t\t// if there's any space below the slats, show the horizontal rule.\n\t\t\t// this won't cause any new overflow, because lockOverflow already called.\n\t\t\tif (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n\t\t\t\tthis.bottomRuleEl.show();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// given a desired total height of the view, returns what the height of the scroller should be\n\tcomputeScrollerHeight: function(totalHeight) {\n\t\treturn totalHeight -\n\t\t\tsubtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n\t},\n\n\n\t/* Scroll\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it\n\tcomputeInitialScroll: function() {\n\t\tvar scrollTime = moment.duration(this.opt('scrollTime'));\n\t\tvar top = this.timeGrid.computeTimeTop(scrollTime);\n\n\t\t// zoom can give weird floating-point values. rather scroll a little bit further\n\t\ttop = Math.ceil(top);\n\n\t\tif (top) {\n\t\t\ttop++; // to overcome top border that slots beyond the first have. looks better\n\t\t}\n\n\t\treturn { top: top };\n\t},\n\n\n\tqueryScroll: function() {\n\t\treturn { top: this.scroller.getScrollTop() };\n\t},\n\n\n\tsetScroll: function(scroll) {\n\t\tthis.scroller.setScrollTop(scroll.top);\n\t},\n\n\n\t/* Hit Areas\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// forward all hit-related method calls to the grids (dayGrid might not be defined)\n\n\n\tprepareHits: function() {\n\t\tthis.timeGrid.prepareHits();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.prepareHits();\n\t\t}\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.timeGrid.releaseHits();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.releaseHits();\n\t\t}\n\t},\n\n\n\tqueryHit: function(left, top) {\n\t\tvar hit = this.timeGrid.queryHit(left, top);\n\n\t\tif (!hit && this.dayGrid) {\n\t\t\thit = this.dayGrid.queryHit(left, top);\n\t\t}\n\n\t\treturn hit;\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from\n\t\treturn hit.component.getHitSpan(hit);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from\n\t\treturn hit.component.getHitEl(hit);\n\t},\n\n\n\t/* Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders events onto the view and populates the View's segment array\n\trenderEvents: function(events) {\n\t\tvar dayEvents = [];\n\t\tvar timedEvents = [];\n\t\tvar daySegs = [];\n\t\tvar timedSegs;\n\t\tvar i;\n\n\t\t// separate the events into all-day and timed\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\tif (events[i].allDay) {\n\t\t\t\tdayEvents.push(events[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttimedEvents.push(events[i]);\n\t\t\t}\n\t\t}\n\n\t\t// render the events in the subcomponents\n\t\ttimedSegs = this.timeGrid.renderEvents(timedEvents);\n\t\tif (this.dayGrid) {\n\t\t\tdaySegs = this.dayGrid.renderEvents(dayEvents);\n\t\t}\n\n\t\t// the all-day area is flexible and might have a lot of events, so shift the height\n\t\tthis.updateHeight();\n\t},\n\n\n\t// Retrieves all segment objects that are rendered in the view\n\tgetEventSegs: function() {\n\t\treturn this.timeGrid.getEventSegs().concat(\n\t\t\tthis.dayGrid ? this.dayGrid.getEventSegs() : []\n\t\t);\n\t},\n\n\n\t// Unrenders all event elements and clears internal segment data\n\tunrenderEvents: function() {\n\n\t\t// unrender the events in the subcomponents\n\t\tthis.timeGrid.unrenderEvents();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderEvents();\n\t\t}\n\n\t\t// we DON'T need to call updateHeight() because\n\t\t// a renderEvents() call always happens after this, which will eventually call updateHeight()\n\t},\n\n\n\t/* Dragging (for events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(dropLocation, seg) {\n\t\tif (dropLocation.start.hasTime()) {\n\t\t\treturn this.timeGrid.renderDrag(dropLocation, seg);\n\t\t}\n\t\telse if (this.dayGrid) {\n\t\t\treturn this.dayGrid.renderDrag(dropLocation, seg);\n\t\t}\n\t},\n\n\n\tunrenderDrag: function() {\n\t\tthis.timeGrid.unrenderDrag();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderDrag();\n\t\t}\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection\n\trenderSelection: function(span) {\n\t\tif (span.start.hasTime() || span.end.hasTime()) {\n\t\t\tthis.timeGrid.renderSelection(span);\n\t\t}\n\t\telse if (this.dayGrid) {\n\t\t\tthis.dayGrid.renderSelection(span);\n\t\t}\n\t},\n\n\n\t// Unrenders a visual indications of a selection\n\tunrenderSelection: function() {\n\t\tthis.timeGrid.unrenderSelection();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderSelection();\n\t\t}\n\t}\n\n});\n\n\n// Methods that will customize the rendering behavior of the AgendaView's timeGrid\n// TODO: move into TimeGrid\nvar agendaTimeGridMethods = {\n\n\n\t// Generates the HTML that will go before the day-of week header cells\n\trenderHeadIntroHtml: function() {\n\t\tvar view = this.view;\n\t\tvar weekText;\n\n\t\tif (view.opt('weekNumbers')) {\n\t\t\tweekText = this.start.format(view.opt('smallWeekFormat'));\n\n\t\t\treturn '' +\n\t\t\t\t'<th class=\"fc-axis fc-week-number ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t\tview.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n\t\t\t\t\t\t{ date: this.start, type: 'week', forceOff: this.colCnt > 1 },\n\t\t\t\t\t\thtmlEscape(weekText) // inner HTML\n\t\t\t\t\t) +\n\t\t\t\t'</th>';\n\t\t}\n\t\telse {\n\t\t\treturn '<th class=\"fc-axis ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '></th>';\n\t\t}\n\t},\n\n\n\t// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '></td>';\n\t},\n\n\n\t// Generates the HTML that goes before all other types of cells.\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n\t}\n\n};\n\n\n// Methods that will customize the rendering behavior of the AgendaView's dayGrid\nvar agendaDayGridMethods = {\n\n\n\t// Generates the HTML that goes before the all-day cells\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '' +\n\t\t\t'<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\tview.getAllDayHtml() +\n\t\t\t\t'</span>' +\n\t\t\t'</td>';\n\t},\n\n\n\t// Generates the HTML that goes before all other types of cells.\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n\t}\n\n};\n\n;;\n\nvar AGENDA_ALL_DAY_EVENT_LIMIT = 5;\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar AGENDA_STOCK_SUB_DURATIONS = [\n\t{ hours: 1 },\n\t{ minutes: 30 },\n\t{ minutes: 15 },\n\t{ seconds: 30 },\n\t{ seconds: 15 }\n];\n\nfcViews.agenda = {\n\t'class': AgendaView,\n\tdefaults: {\n\t\tallDaySlot: true,\n\t\tslotDuration: '00:30:00',\n\t\tminTime: '00:00:00',\n\t\tmaxTime: '24:00:00',\n\t\tslotEventOverlap: true // a bad name. confused with overlap/constraint system\n\t}\n};\n\nfcViews.agendaDay = {\n\ttype: 'agenda',\n\tduration: { days: 1 }\n};\n\nfcViews.agendaWeek = {\n\ttype: 'agenda',\n\tduration: { weeks: 1 }\n};\n;;\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\"\n*/\nvar ListView = View.extend({\n\n\tgrid: null,\n\tscroller: null,\n\n\tinitialize: function() {\n\t\tthis.grid = new ListViewGrid(this);\n\t\tthis.scroller = new Scroller({\n\t\t\toverflowX: 'hidden',\n\t\t\toverflowY: 'auto'\n\t\t});\n\t},\n\n\tsetRange: function(range) {\n\t\tView.prototype.setRange.call(this, range); // super\n\n\t\tthis.grid.setRange(range); // needs to process range-related options\n\t},\n\n\trenderSkeleton: function() {\n\t\tthis.el.addClass(\n\t\t\t'fc-list-view ' +\n\t\t\tthis.widgetContentClass\n\t\t);\n\n\t\tthis.scroller.render();\n\t\tthis.scroller.el.appendTo(this.el);\n\n\t\tthis.grid.setElement(this.scroller.scrollEl);\n\t},\n\n\tunrenderSkeleton: function() {\n\t\tthis.scroller.destroy(); // will remove the Grid too\n\t},\n\n\tsetHeight: function(totalHeight, isAuto) {\n\t\tthis.scroller.setHeight(this.computeScrollerHeight(totalHeight));\n\t},\n\n\tcomputeScrollerHeight: function(totalHeight) {\n\t\treturn totalHeight -\n\t\t\tsubtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n\t},\n\n\trenderEvents: function(events) {\n\t\tthis.grid.renderEvents(events);\n\t},\n\n\tunrenderEvents: function() {\n\t\tthis.grid.unrenderEvents();\n\t},\n\n\tisEventResizable: function(event) {\n\t\treturn false;\n\t},\n\n\tisEventDraggable: function(event) {\n\t\treturn false;\n\t}\n\n});\n\n/*\nResponsible for event rendering and user-interaction.\nIts \"el\" is the inner-content of the above view's scroller.\n*/\nvar ListViewGrid = Grid.extend({\n\n\tsegSelector: '.fc-list-item', // which elements accept event actions\n\thasDayInteractions: false, // no day selection or day clicking\n\n\t// slices by day\n\tspanToSegs: function(span) {\n\t\tvar view = this.view;\n\t\tvar dayStart = view.start.clone().time(0); // timed, so segs get times!\n\t\tvar dayIndex = 0;\n\t\tvar seg;\n\t\tvar segs = [];\n\n\t\twhile (dayStart < view.end) {\n\n\t\t\tseg = intersectRanges(span, {\n\t\t\t\tstart: dayStart,\n\t\t\t\tend: dayStart.clone().add(1, 'day')\n\t\t\t});\n\n\t\t\tif (seg) {\n\t\t\t\tseg.dayIndex = dayIndex;\n\t\t\t\tsegs.push(seg);\n\t\t\t}\n\n\t\t\tdayStart.add(1, 'day');\n\t\t\tdayIndex++;\n\n\t\t\t// detect when span won't go fully into the next day,\n\t\t\t// and mutate the latest seg to the be the end.\n\t\t\tif (\n\t\t\t\tseg && !seg.isEnd && span.end.hasTime() &&\n\t\t\t\tspan.end < dayStart.clone().add(this.view.nextDayThreshold)\n\t\t\t) {\n\t\t\t\tseg.end = span.end.clone();\n\t\t\t\tseg.isEnd = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\t// like \"4:00am\"\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('mediumTimeFormat');\n\t},\n\n\t// for events with a url, the whole <tr> should be clickable,\n\t// but it's impossible to wrap with an <a> tag. simulate this.\n\thandleSegClick: function(seg, ev) {\n\t\tvar url;\n\n\t\tGrid.prototype.handleSegClick.apply(this, arguments); // super. might prevent the default action\n\n\t\t// not clicking on or within an <a> with an href\n\t\tif (!$(ev.target).closest('a[href]').length) {\n\t\t\turl = seg.event.url;\n\t\t\tif (url && !ev.isDefaultPrevented()) { // jsEvent not cancelled in handler\n\t\t\t\twindow.location.href = url; // simulate link click\n\t\t\t}\n\t\t}\n\t},\n\n\t// returns list of foreground segs that were actually rendered\n\trenderFgSegs: function(segs) {\n\t\tsegs = this.renderFgSegEls(segs); // might filter away hidden events\n\n\t\tif (!segs.length) {\n\t\t\tthis.renderEmptyMessage();\n\t\t}\n\t\telse {\n\t\t\tthis.renderSegList(segs);\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\trenderEmptyMessage: function() {\n\t\tthis.el.html(\n\t\t\t'<div class=\"fc-list-empty-wrap2\">' + // TODO: try less wraps\n\t\t\t'<div class=\"fc-list-empty-wrap1\">' +\n\t\t\t'<div class=\"fc-list-empty\">' +\n\t\t\t\thtmlEscape(this.view.opt('noEventsMessage')) +\n\t\t\t'</div>' +\n\t\t\t'</div>' +\n\t\t\t'</div>'\n\t\t);\n\t},\n\n\t// render the event segments in the view\n\trenderSegList: function(allSegs) {\n\t\tvar segsByDay = this.groupSegsByDay(allSegs); // sparse array\n\t\tvar dayIndex;\n\t\tvar daySegs;\n\t\tvar i;\n\t\tvar tableEl = $('<table class=\"fc-list-table\"><tbody/></table>');\n\t\tvar tbodyEl = tableEl.find('tbody');\n\n\t\tfor (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {\n\t\t\tdaySegs = segsByDay[dayIndex];\n\t\t\tif (daySegs) { // sparse array, so might be undefined\n\n\t\t\t\t// append a day header\n\t\t\t\ttbodyEl.append(this.dayHeaderHtml(\n\t\t\t\t\tthis.view.start.clone().add(dayIndex, 'days')\n\t\t\t\t));\n\n\t\t\t\tthis.sortEventSegs(daySegs);\n\n\t\t\t\tfor (i = 0; i < daySegs.length; i++) {\n\t\t\t\t\ttbodyEl.append(daySegs[i].el); // append event row\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.el.empty().append(tableEl);\n\t},\n\n\t// Returns a sparse array of arrays, segs grouped by their dayIndex\n\tgroupSegsByDay: function(segs) {\n\t\tvar segsByDay = []; // sparse array\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\t(segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n\t\t\t\t.push(seg);\n\t\t}\n\n\t\treturn segsByDay;\n\t},\n\n\t// generates the HTML for the day headers that live amongst the event rows\n\tdayHeaderHtml: function(dayDate) {\n\t\tvar view = this.view;\n\t\tvar mainFormat = view.opt('listDayFormat');\n\t\tvar altFormat = view.opt('listDayAltFormat');\n\n\t\treturn '<tr class=\"fc-list-heading\" data-date=\"' + dayDate.format('YYYY-MM-DD') + '\">' +\n\t\t\t'<td class=\"' + view.widgetHeaderClass + '\" colspan=\"3\">' +\n\t\t\t\t(mainFormat ?\n\t\t\t\t\tview.buildGotoAnchorHtml(\n\t\t\t\t\t\tdayDate,\n\t\t\t\t\t\t{ 'class': 'fc-list-heading-main' },\n\t\t\t\t\t\thtmlEscape(dayDate.format(mainFormat)) // inner HTML\n\t\t\t\t\t) :\n\t\t\t\t\t'') +\n\t\t\t\t(altFormat ?\n\t\t\t\t\tview.buildGotoAnchorHtml(\n\t\t\t\t\t\tdayDate,\n\t\t\t\t\t\t{ 'class': 'fc-list-heading-alt' },\n\t\t\t\t\t\thtmlEscape(dayDate.format(altFormat)) // inner HTML\n\t\t\t\t\t) :\n\t\t\t\t\t'') +\n\t\t\t'</td>' +\n\t\t'</tr>';\n\t},\n\n\t// generates the HTML for a single event row\n\tfgSegHtml: function(seg) {\n\t\tvar view = this.view;\n\t\tvar classes = [ 'fc-list-item' ].concat(this.getSegCustomClasses(seg));\n\t\tvar bgColor = this.getSegBackgroundColor(seg);\n\t\tvar event = seg.event;\n\t\tvar url = event.url;\n\t\tvar timeHtml;\n\n\t\tif (event.allDay) {\n\t\t\ttimeHtml = view.getAllDayHtml();\n\t\t}\n\t\telse if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day\n\t\t\tif (seg.isStart || seg.isEnd) { // outer segment that probably lasts part of the day\n\t\t\t\ttimeHtml = htmlEscape(this.getEventTimeText(seg));\n\t\t\t}\n\t\t\telse { // inner segment that lasts the whole day\n\t\t\t\ttimeHtml = view.getAllDayHtml();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Display the normal time text for the *event's* times\n\t\t\ttimeHtml = htmlEscape(this.getEventTimeText(event));\n\t\t}\n\n\t\tif (url) {\n\t\t\tclasses.push('fc-has-url');\n\t\t}\n\n\t\treturn '<tr class=\"' + classes.join(' ') + '\">' +\n\t\t\t(this.displayEventTime ?\n\t\t\t\t'<td class=\"fc-list-item-time ' + view.widgetContentClass + '\">' +\n\t\t\t\t\t(timeHtml || '') +\n\t\t\t\t'</td>' :\n\t\t\t\t'') +\n\t\t\t'<td class=\"fc-list-item-marker ' + view.widgetContentClass + '\">' +\n\t\t\t\t'<span class=\"fc-event-dot\"' +\n\t\t\t\t(bgColor ?\n\t\t\t\t\t' style=\"background-color:' + bgColor + '\"' :\n\t\t\t\t\t'') +\n\t\t\t\t'></span>' +\n\t\t\t'</td>' +\n\t\t\t'<td class=\"fc-list-item-title ' + view.widgetContentClass + '\">' +\n\t\t\t\t'<a' + (url ? ' href=\"' + htmlEscape(url) + '\"' : '') + '>' +\n\t\t\t\t\thtmlEscape(seg.event.title || '') +\n\t\t\t\t'</a>' +\n\t\t\t'</td>' +\n\t\t'</tr>';\n\t}\n\n});\n\n;;\n\nfcViews.list = {\n\t'class': ListView,\n\tbuttonTextKey: 'list', // what to lookup in locale files\n\tdefaults: {\n\t\tbuttonText: 'list', // text to display for English\n\t\tlistDayFormat: 'LL', // like \"January 1, 2016\"\n\t\tnoEventsMessage: 'No events to display'\n\t}\n};\n\nfcViews.listDay = {\n\ttype: 'list',\n\tduration: { days: 1 },\n\tdefaults: {\n\t\tlistDayFormat: 'dddd' // day-of-week is all we need. full date is probably in header\n\t}\n};\n\nfcViews.listWeek = {\n\ttype: 'list',\n\tduration: { weeks: 1 },\n\tdefaults: {\n\t\tlistDayFormat: 'dddd', // day-of-week is more important\n\t\tlistDayAltFormat: 'LL'\n\t}\n};\n\nfcViews.listMonth = {\n\ttype: 'list',\n\tduration: { month: 1 },\n\tdefaults: {\n\t\tlistDayAltFormat: 'dddd' // day-of-week is nice-to-have\n\t}\n};\n\nfcViews.listYear = {\n\ttype: 'list',\n\tduration: { year: 1 },\n\tdefaults: {\n\t\tlistDayAltFormat: 'dddd' // day-of-week is nice-to-have\n\t}\n};\n\n;;\n\nreturn FC; // export for Node/CommonJS\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}